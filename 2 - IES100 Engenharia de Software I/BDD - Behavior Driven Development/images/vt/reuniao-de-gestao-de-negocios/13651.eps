%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1503.i114.004.S.m007.c10.business round table.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: kot
%%CreationDate: 3/19/2015
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2015-03-19T12:43:28+04:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-03-19T12:43:28+04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-03-19T12:43:28+04:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7DmS6p2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxVUit55uXpRvJxFW4KWoPemC0gE8lPCh2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxVEWmnXt3U28JkA2LbAV+ZoMBIDOMDLksubS5tn4TxtGx3APf5HEG0&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b8ac7172-ff54-d14a-90bd-69fa316e5cc6</stEvt:instanceID>
                  <stEvt:when>2015-03-18T19:06:15+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:164081e2-e412-7443-8077-109fa963da21</stEvt:instanceID>
                  <stEvt:when>2015-03-19T00:52:25+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:631d3343-b207-b84f-96d2-ccef7444a67f</stEvt:instanceID>
                  <stEvt:when>2015-03-19T15:00:03+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9268F1F80ACEE411ACF197DD2187D141</stEvt:instanceID>
                  <stEvt:when>2015-03-19T12:21:23+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9368F1F80ACEE411ACF197DD2187D141</stEvt:instanceID>
                  <stEvt:when>2015-03-19T12:32:36+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9568F1F80ACEE411ACF197DD2187D141</stEvt:instanceID>
                  <stEvt:when>2015-03-19T12:43:28+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:9368F1F80ACEE411ACF197DD2187D141</stRef:instanceID>
            <stRef:documentID>xmp.did:9368F1F80ACEE411ACF197DD2187D141</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:b8ac7172-ff54-d14a-90bd-69fa316e5cc6</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:9568F1F80ACEE411ACF197DD2187D141</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:9568F1F80ACEE411ACF197DD2187D141</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:b8ac7172-ff54-d14a-90bd-69fa316e5cc6</xmpMM:OriginalDocumentID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
0 450 mo
450 450 li
450 0 li
0 0 li
0 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.686275 .827451 .839216 rgb
ef
187.281 314.265 mo
159.927 347.101 li
157.581 349.914 153.358 350.301 150.542 347.954 cv
117.709 320.598 li
114.893 318.253 114.509 314.028 116.855 311.216 cv
144.209 278.379 li
146.557 275.566 150.778 275.18 153.594 277.526 cv
186.427 304.884 li
189.243 307.226 189.627 311.447 187.281 314.265 cv
187.281 314.265 li
cp
.317647 .321569 .329412 rgb
ef
171.039 330.238 mo
177.574 319.595 184.106 308.952 190.638 298.309 cv
190.146 295.007 189.652 291.707 189.16 288.404 cv
187.277 286.237 185.392 284.066 183.51 281.897 cv
175.691 288.69 167.871 295.482 160.049 302.275 cv
159.469 301.827 158.891 301.379 158.311 300.934 cv
164.64 292.618 170.972 284.302 177.301 275.984 cv
173.561 272.87 169.82 269.757 166.083 266.639 cv
154.436 276.785 142.788 286.929 131.144 297.074 cv
144.44 308.129 157.739 319.185 171.039 330.238 cv
171.039 330.238 li
cp
.0784314 .101961 .105882 rgb
ef
125.954 222.423 mo
86.9087 205.049 li
83.562 203.559 82.042 199.6 83.5313 196.254 cv
100.909 157.208 li
102.398 153.862 106.357 152.34 109.704 153.831 cv
148.749 171.205 li
152.095 172.695 153.616 176.654 152.126 180 cv
134.752 219.045 li
133.263 222.393 129.305 223.912 125.954 222.423 cv
125.954 222.423 li
cp
.317647 .321569 .329412 rgb
ef
110.941 204.136 mo
113.735 206.311 116.533 208.489 124.898 210.646 cv
133.259 212.808 147.191 214.955 155.461 213.167 cv
163.728 211.379 166.332 205.663 161.855 198.275 cv
157.375 190.886 145.813 181.828 138.52 177.185 cv
131.224 172.541 128.196 172.31 125.168 172.08 cv
120.424 182.764 115.683 193.45 110.941 204.136 cv
110.941 204.136 li
cp
0 0 0 rgb
ef
295.649 292.716 mo
312.053 332.179 li
313.461 335.563 311.841 339.482 308.457 340.888 cv
268.994 357.293 li
265.611 358.699 261.692 357.083 260.286 353.699 cv
243.881 314.237 li
242.476 310.854 244.093 306.935 247.477 305.528 cv
286.94 289.123 li
290.321 287.718 294.242 289.333 295.649 292.716 cv
295.649 292.716 li
cp
.317647 .321569 .329412 rgb
ef
293.976 316.322 mo
293.44 312.817 292.906 309.318 288.319 301.996 cv
283.731 294.675 275.091 283.54 267.857 279.152 cv
260.627 274.765 254.805 277.126 252.978 285.57 cv
251.15 294.016 253.318 308.539 255.422 316.93 cv
257.525 325.315 259.564 327.567 261.606 329.815 cv
272.397 325.315 283.188 320.82 293.976 316.322 cv
293.976 316.322 li
cp
0 0 0 rgb
ef
203.953 138.464 mo
203.953 95.728 li
203.953 92.0659 206.952 89.0679 210.616 89.0679 cv
253.353 89.0679 li
257.016 89.0679 260.016 92.0659 260.016 95.728 cv
260.016 138.464 li
260.016 142.13 257.016 145.128 253.353 145.128 cv
210.616 145.128 li
206.952 145.128 203.953 142.13 203.953 138.464 cv
203.953 138.464 li
cp
.317647 .321569 .329412 rgb
ef
206.206 115.796 mo
208.002 128.156 209.796 140.515 211.589 152.872 cv
214.08 155.092 216.572 157.316 219.063 159.536 cv
221.897 159.997 224.735 160.457 227.569 160.917 cv
229.231 150.696 230.889 140.47 232.551 130.246 cv
233.281 130.219 234.012 130.191 234.746 130.164 cv
235.206 140.604 235.664 151.046 236.124 161.486 cv
240.992 161.486 245.86 161.486 250.727 161.486 cv
253.181 146.237 255.637 130.987 258.09 115.737 cv
240.796 115.76 223.501 115.777 206.206 115.796 cv
206.206 115.796 li
cp
.0784314 .101961 .105882 rgb
ef
309.87 191.905 mo
352.18 185.881 li
355.806 185.364 359.195 187.91 359.715 191.537 cv
365.739 233.847 li
366.255 237.476 363.71 240.866 360.083 241.382 cv
317.771 247.407 li
314.145 247.926 310.755 245.38 310.238 241.75 cv
304.213 199.44 li
303.694 195.815 306.239 192.424 309.87 191.905 cv
309.87 191.905 li
cp
.317647 .321569 .329412 rgb
ef
332.631 190.94 mo
320.646 194.461 308.663 197.979 296.681 201.498 cv
294.835 204.277 292.987 207.057 291.138 209.836 cv
291.083 212.71 291.027 215.581 290.97 218.453 cv
301.327 218.655 311.682 218.858 322.039 219.061 cv
322.168 219.78 322.297 220.5 322.43 221.22 cv
312.157 223.149 301.886 225.077 291.613 227.004 cv
292.302 231.822 292.987 236.642 293.671 241.459 cv
309.115 241.738 324.558 242.018 340.001 242.297 cv
337.543 225.18 335.087 208.061 332.631 190.94 cv
332.631 190.94 li
cp
.0784314 .101961 .105882 rgb
ef
225.5 318.624 mo
276.791 318.624 318.624 276.791 318.624 225.5 cv
318.624 174.208 276.791 132.375 225.5 132.375 cv
174.208 132.375 132.375 174.208 132.375 225.5 cv
132.375 276.791 174.208 318.624 225.5 318.624 cv
225.5 318.624 li
cp
.54902 .745098 .741176 rgb
ef
224.833 269.153 mo
191.239 292.852 li
175.784 270.944 li
209.379 247.243 li
224.833 269.153 li
cp
.890196 .886275 .894118 rgb
ef
223.81 264.277 mo
192.062 290.395 li
175.028 269.688 li
206.776 243.572 li
223.81 264.277 li
cp
1 1 1 rgb
ef
195.035 294.719 mo
194.589 293.675 194.145 292.628 193.724 291.47 cv
193.303 290.31 192.907 289.037 192.843 287.873 cv
192.778 286.71 193.045 285.66 193.353 284.745 cv
193.659 283.829 194.003 283.053 194.215 283.107 cv
194.426 283.164 194.507 284.051 194.556 285.034 cv
194.602 286.014 194.617 287.092 194.804 287.779 cv
194.992 288.467 195.351 288.764 195.676 288.792 cv
196.002 288.819 196.294 288.58 196.459 287.287 cv
196.622 285.998 196.659 283.653 196.343 281.538 cv
196.026 279.42 195.354 277.526 195.317 276.712 cv
195.28 275.895 195.875 276.16 196.435 277.276 cv
196.991 278.391 197.509 280.362 198.029 282.33 cv
197.58 280.446 197.129 278.563 196.782 277.488 cv
196.435 276.414 196.189 276.149 197.055 276.321 cv
197.925 276.493 199.905 277.102 201.109 278.92 cv
202.31 280.737 202.736 283.766 202.712 286.518 cv
202.69 289.268 202.221 291.743 201.75 294.218 cv
199.512 294.385 197.273 294.553 195.035 294.719 cv
195.035 294.719 li
cp
.858824 .713726 .533333 rgb
ef
161.763 267.002 mo
162.872 267.247 163.98 267.497 165.199 267.701 cv
166.415 267.907 167.738 268.067 168.893 267.92 cv
170.047 267.775 171.033 267.321 171.878 266.854 cv
172.722 266.388 173.426 265.908 173.333 265.709 cv
173.242 265.513 172.351 265.592 171.377 265.721 cv
170.404 265.854 169.341 266.032 168.632 265.972 cv
167.923 265.912 167.563 265.613 167.478 265.298 cv
167.392 264.984 167.576 264.652 168.816 264.257 cv
170.057 263.862 172.351 263.405 174.491 263.335 cv
176.632 263.265 178.615 263.581 179.69 263.64 cv
180.765 263.702 180.931 263.5 180.507 263.145 cv
180.086 262.789 179.075 262.273 178.339 262.005 cv
177.598 261.735 177.129 261.711 176.159 261.701 cv
175.186 261.688 173.714 261.688 172.24 261.688 cv
173.388 261.536 174.537 261.387 175.71 261.395 cv
176.88 261.406 178.075 261.578 178.763 261.664 cv
179.448 261.754 179.625 261.751 178.843 261.008 cv
178.06 260.264 176.318 258.782 174.368 258.084 cv
172.415 257.387 170.253 257.482 168 257.982 cv
165.742 258.486 163.393 259.396 161.044 260.305 cv
161.284 262.536 161.523 264.77 161.763 267.002 cv
161.763 267.002 li
cp
ef
167.183 350.632 mo
179.542 342.985 191.899 335.34 198.216 331.074 cv
204.53 326.809 204.8 325.924 204.889 320.309 cv
204.98 314.691 204.889 304.339 204.8 293.991 cv
200.528 294.307 196.257 294.627 191.985 294.945 cv
192.215 303.225 192.443 311.505 192.674 319.782 cv
182.002 324.94 171.334 330.098 160.664 335.254 cv
162.837 340.382 165.012 345.507 167.183 350.632 cv
167.183 350.632 li
cp
.0784314 .101961 .105882 rgb
ef
111.798 304.486 mo
117.089 290.95 122.377 277.414 125.432 270.435 cv
128.488 263.455 129.308 263.027 134.816 261.926 cv
140.326 260.824 150.524 259.045 160.719 257.265 cv
161.176 261.523 161.634 265.783 162.091 270.039 cv
153.908 271.311 145.721 272.577 137.537 273.847 cv
134.393 285.272 131.245 296.7 128.101 308.122 cv
122.666 306.913 117.233 305.7 111.798 304.486 cv
111.798 304.486 li
cp
ef
171.039 330.238 mo
167.005 322.933 162.969 315.628 158.931 308.323 cv
158.4 307.358 li
156.042 306.47 li
155.474 306.255 li
147.213 303.136 li
131.144 297.074 li
111.798 304.486 li
116.462 317.733 134.424 342.951 167.183 350.632 cv
171.039 330.238 li
cp
.2 .211765 .215686 rgb
ef
171.039 330.238 mo
154.832 310.022 li
131.144 297.074 li
111.798 304.486 li
116.462 317.733 134.424 342.951 167.183 350.632 cv
171.039 330.238 li
cp
0 0 .0196078 rgb
ef
136.208 310.088 mo
135.67 310.174 135.129 310.264 134.598 310.616 cv
134.071 310.974 133.552 311.599 133.371 311.997 cv
133.192 312.4 133.352 312.579 133.511 312.756 cv
133.698 312.965 133.886 313.172 134.073 313.38 cv
134.785 312.281 135.498 311.185 136.208 310.088 cv
136.208 310.088 li
cp
.858824 .713726 .533333 rgb
ef
162.14 313.937 mo
161.385 313.592 li
160.942 312.431 160.5 311.271 160 310.459 cv
159.502 309.648 158.943 309.186 158.388 308.722 cv
158.814 308.209 li
159.49 308.869 160.166 309.525 160.66 310.397 cv
161.152 311.271 161.465 312.354 161.774 313.438 cv
162.14 313.937 li
cp
156.008 304.032 mo
153.41 302.991 li
152.722 302.718 152.197 302.976 151.709 303.116 cv
150.352 302.951 148.991 302.786 147.542 303.064 cv
146.093 303.347 144.551 304.072 143.543 304.724 cv
143.289 304.889 143.068 305.049 142.871 305.203 cv
142.291 305.665 141.934 306.095 141.575 306.525 cv
140.304 307.187 139.026 307.957 137.934 308.706 cv
136.8 309.486 135.87 310.241 135.05 311.534 cv
134.23 312.824 133.521 314.648 132.747 316.515 cv
131.97 318.38 131.128 320.286 131.833 322.645 cv
132.535 325.006 134.783 327.818 137.031 330.632 cv
140.202 332.333 143.375 334.037 145.822 334.305 cv
148.27 334.568 149.992 333.396 151.688 332.296 cv
152.679 331.654 153.663 331.034 154.531 330.423 cv
155.148 329.989 155.708 329.563 156.17 329.13 cv
156.665 328.672 157.056 328.208 157.384 327.73 cv
157.798 327.122 158.118 326.482 158.432 325.783 cv
158.971 324.573 159.497 323.175 159.92 321.809 cv
160.399 321.231 160.879 320.657 161.336 319.549 cv
161.793 318.438 162.229 316.791 162.245 315.316 cv
162.248 314.841 162.208 314.382 162.14 313.937 cv
161.993 312.996 161.717 312.111 161.44 311.225 cv
161.259 309.533 li
159.729 307.134 li
159.767 307.191 160.319 306.571 160.353 305.949 cv
160.473 303.876 li
160.504 303.333 160.215 303.182 160.03 303.025 cv
158.891 303.01 li
158.136 302.998 156.364 302.779 156.008 304.032 cv
156.008 304.032 li
156.008 304.032 li
cp
.901961 .760784 .580392 rgb
ef
157.384 327.73 mo
157.396 328.277 157.408 328.823 157.153 329.406 cv
156.898 329.993 156.379 330.616 156.018 330.866 cv
155.655 331.116 155.449 330.991 155.247 330.862 cv
155.007 330.718 154.771 330.569 154.531 330.423 cv
155.483 329.526 156.436 328.626 157.384 327.73 cv
157.384 327.73 li
cp
.858824 .713726 .533333 rgb
ef
158.814 308.209 mo
159.49 308.869 160.166 309.525 160.66 310.397 cv
161.152 311.271 161.465 312.354 161.774 313.438 cv
161.898 313.605 162.017 313.77 162.14 313.937 cv
161.888 313.82 161.636 313.704 161.385 313.592 cv
160.942 312.431 160.5 311.271 160 310.459 cv
159.502 309.648 158.943 309.186 158.388 308.722 cv
158.529 308.55 158.673 308.378 158.814 308.209 cv
158.814 308.209 li
cp
.317647 .247059 .192157 rgb
ef
146.458 309.308 mo
143.283 313.548 140.107 317.787 138.538 321.343 cv
136.966 324.896 136.997 327.763 137.031 330.632 cv
140.202 332.333 143.375 334.037 145.822 334.305 cv
148.27 334.568 149.992 333.396 151.688 332.296 cv
152.679 331.654 153.663 331.034 154.531 330.423 cv
155.148 329.989 155.708 329.563 156.17 329.13 cv
156.665 328.672 157.056 328.208 157.384 327.73 cv
157.798 327.122 158.118 326.482 158.432 325.783 cv
158.971 324.573 159.497 323.175 159.92 321.809 cv
159.936 321.757 159.951 321.704 159.966 321.652 cv
160.396 320.234 160.709 318.857 160.903 318.005 cv
161.1 317.154 161.173 316.827 160.688 315.726 cv
160.203 314.624 159.156 312.747 158.535 311.63 cv
157.912 310.511 157.712 310.152 157.101 309.877 cv
156.49 309.597 155.467 309.4 153.625 309.318 cv
151.783 309.237 149.121 309.273 146.458 309.308 cv
146.458 309.308 li
cp
.384314 .298039 .231373 rgb
ef
138.538 321.343 mo
140.107 317.787 143.283 313.548 146.458 309.308 cv
145.261 307.936 144.06 306.563 143.292 306.047 cv
142.282 305.364 138.956 308.003 137.934 308.706 cv
136.8 309.486 135.87 310.241 135.05 311.534 cv
134.23 312.824 133.521 314.648 132.747 316.515 cv
131.97 318.38 131.128 320.286 131.833 322.645 cv
132.535 325.006 134.783 327.818 137.031 330.632 cv
136.997 327.763 136.966 324.896 138.538 321.343 cv
138.538 321.343 li
cp
.317647 .247059 .192157 rgb
ef
155.124 305.095 mo
154.353 304.552 153.583 304.005 152.636 303.677 cv
151.691 303.35 150.567 303.24 149.443 303.127 cv
149.258 303.037 149.074 302.948 148.89 302.858 cv
149.05 303.087 149.207 303.314 149.366 303.538 cv
150.588 303.765 151.807 303.989 152.695 304.337 cv
153.585 304.681 154.141 305.145 154.697 305.607 cv
154.841 305.438 154.982 305.267 155.124 305.095 cv
155.124 305.095 li
cp
ef
159.729 307.134 mo
157.07 307.586 li
158.388 308.722 li
158.814 308.209 li
159.49 308.869 160.166 309.525 160.66 310.397 cv
161.152 311.271 161.465 312.354 161.774 313.438 cv
162.14 313.937 li
161.993 312.996 161.717 312.111 161.44 311.225 cv
161.259 309.533 li
159.729 307.134 li
cp
.858824 .713726 .533333 rgb
ef
156.045 306.731 mo
156.008 304.032 li
153.41 302.991 li
152.722 302.718 152.197 302.976 151.709 303.116 cv
150.819 303.01 149.928 302.9 149.01 302.917 cv
149.443 303.127 li
150.567 303.24 151.691 303.35 152.636 303.677 cv
153.583 304.005 154.353 304.552 155.124 305.095 cv
154.697 305.607 li
156.045 306.731 li
cp
ef
154.798 353.257 mo
149.246 359.918 li
148.77 360.488 147.914 360.569 147.342 360.093 cv
106.348 325.936 li
105.776 325.46 105.7 324.604 106.175 324.033 cv
111.724 317.373 li
112.2 316.801 113.057 316.721 113.628 317.197 cv
154.623 351.353 li
155.194 351.829 155.271 352.687 154.798 353.257 cv
154.798 353.257 li
cp
.2 .211765 .215686 rgb
ef
127.925 182.208 mo
128.589 179.557 126.878 175.82 125.168 172.08 cv
118.035 161.421 li
110.271 184.72 111.202 180.841 98.2217 205.941 cv
110.941 204.136 li
115.212 202.622 119.487 201.107 121.191 198.416 cv
121.526 197.89 121.763 197.319 121.931 196.721 cv
122.002 196.477 122.06 196.229 122.112 195.977 cv
122.174 195.672 122.223 195.363 122.263 195.05 cv
122.53 193.007 122.444 190.841 123.132 189.132 cv
123.755 187.575 125.018 186.403 126.108 185.184 cv
126.246 185.028 126.384 184.873 126.513 184.716 cv
126.59 184.627 126.661 184.54 126.734 184.447 cv
127.274 183.763 127.717 183.041 127.925 182.208 cv
127.925 182.208 li
cp
.0784314 .101961 .105882 rgb
ef
110.941 204.136 mo
120.746 189.71 li
125.168 172.08 li
118.035 161.421 li
110.776 167.114 98.2251 183.682 98.2217 205.941 cv
110.941 204.136 li
cp
0 0 .0196078 rgb
ef
127.281 189.546 mo
128.07 182.054 121.047 173.419 114.353 171.423 cv
98.3267 166.641 89.436 184.791 98.9097 193.088 cv
99.7969 193.868 100.66 194.645 101.486 195.313 cv
102.07 195.79 102.634 196.211 103.175 196.539 cv
103.752 196.893 104.302 197.141 104.854 197.326 cv
111.764 199.644 120.184 199.729 125.309 193.971 cv
125.309 193.971 127.627 193.118 127.871 192.489 cv
128.015 192.111 127.545 190.033 127.281 189.546 cv
127.281 189.546 li
cp
.901961 .760784 .580392 rgb
ef
124.029 193.381 mo
123.578 194.212 123.125 195.04 122.411 195.716 cv
121.695 196.391 120.715 196.91 119.736 197.43 cv
119.555 197.6 119.374 197.768 119.192 197.937 cv
119.312 197.733 119.431 197.529 119.548 197.323 cv
120.543 196.582 121.539 195.84 122.184 195.138 cv
122.828 194.435 123.123 193.772 123.418 193.112 cv
123.621 193.201 123.826 193.294 124.029 193.381 cv
124.029 193.381 li
cp
.317647 .247059 .192157 rgb
ef
126.016 188.985 mo
126.332 188.094 126.645 187.204 126.648 186.132 cv
126.651 185.057 126.345 183.806 126.034 182.549 cv
126.006 182.706 125.976 182.862 125.945 183.019 cv
126.062 184.256 126.175 185.49 126.087 186.439 cv
125.997 187.388 125.702 188.051 125.408 188.711 cv
125.61 188.804 125.813 188.894 126.016 188.985 cv
126.016 188.985 li
cp
ef
79.5884 201.79 mo
71.666 198.265 li
70.9868 197.96 70.6797 197.16 70.9805 196.481 cv
92.6758 147.732 li
92.9775 147.053 93.7822 146.744 94.4604 147.046 cv
102.383 150.574 li
103.062 150.875 103.369 151.679 103.067 152.356 cv
81.3726 201.106 li
81.0713 201.785 80.2676 202.091 79.5884 201.79 cv
79.5884 201.79 li
cp
.2 .211765 .215686 rgb
ef
121.277 183.729 mo
121.342 185.982 121.406 188.233 120.574 190.666 cv
119.745 193.096 118.02 195.707 116.595 197.139 cv
115.167 198.569 114.042 198.814 112.916 199.064 cv
108.829 198.542 104.741 198.019 101.486 196.315 cv
98.2344 194.61 95.8115 191.725 93.8247 187.594 cv
91.8408 183.464 90.2866 178.091 93.1582 174.375 cv
96.0293 170.656 103.319 168.596 108.801 169.001 cv
114.282 169.405 117.955 172.282 121.63 175.157 cv
122.893 176.638 124.155 178.122 124.097 179.548 cv
124.038 180.977 122.656 182.352 121.277 183.729 cv
121.277 183.729 li
cp
.243137 .184314 .129412 rgb
ef
90.8091 175.701 mo
90.1182 177.692 89.9243 180.005 90.5112 182.042 cv
91.0977 184.079 92.4609 185.837 94.709 186.408 cv
96.957 186.977 100.085 186.36 102.315 184.256 cv
104.548 182.156 105.877 178.567 105.61 175.734 cv
105.343 172.903 103.479 170.83 101.256 170.063 cv
99.0327 169.295 96.4531 169.836 94.5679 170.942 cv
92.6816 172.044 91.4966 173.708 90.8091 175.701 cv
90.8091 175.701 li
cp
.317647 .247059 .192157 rgb
ef
95.8018 176.127 mo
95.2861 176.521 94.7495 177.261 94.7207 178.041 cv
94.6909 178.821 95.1694 179.641 95.7627 179.668 cv
96.3516 179.7 97.0552 178.935 97.3311 178.13 cv
97.6074 177.326 97.457 176.483 97.1343 176.088 cv
96.8125 175.689 96.3184 175.734 95.8018 176.127 cv
95.8018 176.127 li
cp
.243137 .184314 .129412 rgb
ef
114.227 179.981 mo
115.931 180.672 117.466 181.487 118.943 182.339 cv
119.733 182.795 120.503 183.261 121.277 183.729 cv
121.922 183.086 122.567 182.441 123.08 181.793 cv
123.66 181.054 124.066 180.31 124.097 179.548 cv
124.106 179.38 124.093 179.208 124.063 179.036 cv
124.026 178.805 123.958 178.576 123.866 178.342 cv
123.501 177.42 122.751 176.483 121.959 175.545 cv
121.848 175.417 121.738 175.287 121.63 175.157 cv
117.955 172.282 114.282 169.405 108.801 169.001 cv
106.295 168.816 103.415 169.146 100.749 169.913 cv
100.918 169.956 101.09 170.005 101.256 170.063 cv
102.183 170.383 103.046 170.93 103.755 171.66 cv
104.753 172.688 105.454 174.083 105.61 175.734 cv
105.659 176.253 105.653 176.798 105.601 177.353 cv
108.607 178.137 111.614 178.919 114.227 179.981 cv
114.227 179.981 li
cp
.384314 .298039 .231373 rgb
ef
266.568 320.566 mo
264.262 322.03 262.937 325.924 261.606 329.815 cv
259.456 342.461 li
281.111 330.882 277.771 333.058 304.454 323.757 cv
293.976 316.322 li
289.833 314.481 285.69 312.643 282.599 313.426 cv
281.997 313.577 281.435 313.828 280.896 314.148 cv
280.679 314.277 280.467 314.414 280.256 314.563 cv
279.999 314.742 279.752 314.934 279.507 315.133 cv
277.909 316.433 276.481 318.063 274.807 318.834 cv
273.284 319.533 271.562 319.518 269.931 319.653 cv
269.727 319.669 269.52 319.689 269.316 319.712 cv
269.2 319.728 269.086 319.743 268.974 319.758 cv
268.107 319.884 267.291 320.105 266.568 320.566 cv
266.568 320.566 li
cp
.890196 .886275 .894118 rgb
ef
259.31 204.008 mo
292.293 228.549 li
276.289 250.061 li
243.304 225.519 li
259.31 204.008 li
cp
ef
256.809 218.429 mo
287.596 245.676 li
269.827 265.752 li
239.039 238.508 li
256.809 218.429 li
cp
1 1 1 rgb
ef
291.016 201.212 mo
290.645 202.289 290.271 203.363 289.806 204.504 cv
289.342 205.647 288.783 206.857 288.053 207.763 cv
287.322 208.669 286.414 209.271 285.574 209.743 cv
284.735 210.216 283.958 210.563 283.839 210.379 cv
283.719 210.195 284.254 209.482 284.876 208.721 cv
285.496 207.962 286.21 207.151 286.531 206.519 cv
286.852 205.884 286.787 205.42 286.563 205.18 cv
286.342 204.94 285.961 204.925 284.976 205.773 cv
283.985 206.62 282.393 208.333 281.208 210.118 cv
280.021 211.902 279.25 213.757 278.729 214.388 cv
278.21 215.017 277.945 214.42 278.28 213.221 cv
278.616 212.016 279.553 210.207 280.486 208.399 cv
279.559 210.098 278.628 211.799 278.164 212.827 cv
277.703 213.858 277.71 214.217 277.181 213.509 cv
276.653 212.799 275.591 211.021 275.916 208.865 cv
276.242 206.709 277.956 204.179 279.815 202.153 cv
281.681 200.126 283.685 198.606 285.694 197.084 cv
287.468 198.462 289.24 199.837 291.016 201.212 cv
291.016 201.212 li
cp
.858824 .713726 .533333 rgb
ef
297.119 244.084 mo
296.463 243.158 295.807 242.229 295.041 241.262 cv
294.276 240.294 293.401 239.287 292.445 238.625 cv
291.492 237.958 290.453 237.634 289.518 237.415 cv
288.577 237.193 287.736 237.077 287.671 237.287 cv
287.607 237.498 288.319 238.032 289.13 238.587 cv
289.939 239.146 290.848 239.724 291.336 240.243 cv
291.82 240.765 291.884 241.226 291.739 241.518 cv
291.593 241.809 291.234 241.933 290.048 241.395 cv
288.861 240.854 286.852 239.656 285.219 238.274 cv
283.58 236.889 282.321 235.326 281.563 234.562 cv
280.808 233.797 280.553 233.835 280.627 234.381 cv
280.701 234.928 281.104 235.986 281.471 236.681 cv
281.841 237.377 282.171 237.709 282.888 238.369 cv
283.599 239.029 284.691 240.016 285.785 241.004 cv
284.831 240.348 283.876 239.69 283.013 238.896 cv
282.15 238.103 281.382 237.173 280.932 236.65 cv
280.479 236.124 280.347 236.009 280.432 237.084 cv
280.514 238.158 280.808 240.427 281.791 242.252 cv
282.771 244.076 284.438 245.458 286.448 246.595 cv
288.458 247.735 290.81 248.636 293.164 249.535 cv
294.482 247.72 295.8 245.903 297.119 244.084 cv
297.119 244.084 li
cp
ef
349.161 178.396 mo
334.867 175.784 320.568 173.173 313.023 172.105 cv
305.479 171.037 304.686 171.513 300.854 175.621 cv
297.021 179.727 290.149 187.468 283.279 195.21 cv
286.663 197.835 290.045 200.463 293.43 203.09 cv
298.809 196.792 304.189 190.496 309.569 184.198 cv
320.942 187.524 332.318 190.85 343.691 194.177 cv
345.516 188.917 347.337 183.658 349.161 178.396 cv
349.161 178.396 li
cp
.0784314 .101961 .105882 rgb
ef
359.324 249.765 mo
346.326 256.264 333.327 262.761 326.381 265.894 cv
319.432 269.024 318.538 268.789 313.712 265.915 cv
308.887 263.04 300.126 257.525 291.368 252.01 cv
293.883 248.543 296.399 245.076 298.914 241.612 cv
305.838 246.153 312.763 250.698 319.685 255.243 cv
329.68 248.874 339.671 242.507 349.668 236.138 cv
352.886 240.68 356.106 245.224 359.324 249.765 cv
359.324 249.765 li
cp
ef
332.631 190.94 mo
330.727 199.069 328.823 207.196 326.923 215.321 cv
326.67 216.392 li
327.825 218.633 li
328.102 219.175 li
332.143 227.026 li
340.001 242.297 li
359.324 249.765 li
364.742 236.811 368.323 206.057 349.161 178.396 cv
332.631 190.94 li
cp
.2 .211765 .215686 rgb
ef
332.631 190.94 mo
331.104 216.81 li
340.001 242.297 li
359.324 249.765 li
364.742 236.811 368.323 206.057 349.161 178.396 cv
332.631 190.94 li
cp
0 0 .0196078 rgb
ef
344.965 229.247 mo
345.424 229.541 345.885 229.839 346.518 229.932 cv
347.146 230.021 347.951 229.907 348.354 229.729 cv
348.756 229.553 348.756 229.311 348.756 229.072 cv
348.756 228.792 348.756 228.513 348.756 228.232 cv
347.494 228.57 346.229 228.908 344.965 229.247 cv
344.965 229.247 li
cp
.858824 .713726 .533333 rgb
ef
328.305 209.008 mo
328.633 209.769 li
328.184 210.926 327.735 212.084 327.561 213.021 cv
327.389 213.956 327.489 214.675 327.591 215.392 cv
326.932 215.486 li
326.873 214.544 326.814 213.601 327.032 212.624 cv
327.251 211.645 327.744 210.632 328.242 209.618 cv
328.305 209.008 li
cp
326.216 220.464 mo
327.447 222.979 li
327.77 223.642 328.334 223.802 328.793 224.027 cv
329.688 225.06 330.589 226.097 331.851 226.857 cv
333.115 227.621 334.743 228.112 335.93 228.307 cv
336.23 228.355 336.5 228.386 336.749 228.401 cv
337.488 228.447 338.042 228.37 338.597 228.291 cv
339.982 228.65 341.447 228.939 342.762 229.114 cv
344.121 229.295 345.322 229.356 346.796 228.948 cv
348.271 228.541 350.017 227.662 351.844 226.8 cv
353.671 225.933 355.572 225.083 356.631 222.861 cv
357.695 220.639 357.91 217.046 358.126 213.451 cv
356.918 210.06 355.705 206.67 354.064 204.834 cv
352.429 202.995 350.36 202.708 348.368 202.39 cv
347.201 202.202 346.057 202.001 345.003 201.873 cv
344.257 201.781 343.555 201.723 342.922 201.732 cv
342.246 201.742 341.646 201.821 341.08 201.959 cv
340.366 202.132 339.699 202.392 338.999 202.703 cv
337.786 203.237 336.461 203.921 335.229 204.652 cv
334.488 204.76 333.748 204.863 332.665 205.38 cv
331.58 205.898 330.152 206.826 329.152 207.915 cv
328.828 208.263 328.552 208.629 328.305 209.008 cv
327.785 209.798 327.395 210.644 327.009 211.488 cv
326.007 212.867 li
325.534 215.668 li
325.544 215.6 324.721 215.692 324.275 216.13 cv
322.797 217.59 li
322.41 217.973 322.522 218.277 322.555 218.517 cv
323.39 219.292 li
323.943 219.807 325.111 221.155 326.216 220.464 cv
326.216 220.464 li
326.216 220.464 li
cp
.901961 .760784 .580392 rgb
ef
341.08 201.959 mo
341.438 201.544 341.797 201.133 342.377 200.869 cv
342.958 200.604 343.763 200.489 344.199 200.546 cv
344.636 200.604 344.702 200.834 344.77 201.068 cv
344.847 201.336 344.923 201.603 345.003 201.873 cv
343.695 201.9 342.387 201.928 341.08 201.959 cv
341.08 201.959 li
cp
.858824 .713726 .533333 rgb
ef
326.932 215.486 mo
326.873 214.544 326.814 213.601 327.032 212.624 cv
327.251 211.645 327.744 210.632 328.242 209.618 cv
328.264 209.415 328.282 209.208 328.305 209.008 cv
328.414 209.262 328.521 209.513 328.633 209.769 cv
328.184 210.926 327.735 212.084 327.561 213.021 cv
327.389 213.956 327.489 214.675 327.591 215.392 cv
327.373 215.422 327.153 215.455 326.932 215.486 cv
326.932 215.486 li
cp
.317647 .247059 .192157 rgb
ef
336.837 222.951 mo
342.036 221.935 347.235 220.919 350.781 219.334 cv
354.331 217.75 356.229 215.6 358.126 213.451 cv
356.918 210.06 355.705 206.67 354.064 204.834 cv
352.429 202.995 350.36 202.708 348.368 202.39 cv
347.201 202.202 346.057 202.001 345.003 201.873 cv
344.257 201.781 343.555 201.723 342.922 201.732 cv
342.246 201.742 341.646 201.821 341.08 201.959 cv
340.366 202.132 339.699 202.392 338.999 202.703 cv
337.786 203.237 336.461 203.921 335.229 204.652 cv
335.182 204.68 335.137 204.707 335.091 204.738 cv
333.822 205.5 332.665 206.314 331.948 206.814 cv
331.233 207.318 330.96 207.509 330.582 208.65 cv
330.204 209.793 329.723 211.887 329.434 213.134 cv
329.145 214.381 329.054 214.779 329.32 215.397 cv
329.587 216.014 330.215 216.846 331.528 218.14 cv
332.843 219.436 334.838 221.194 336.837 222.951 cv
336.837 222.951 li
cp
.384314 .298039 .231373 rgb
ef
350.781 219.334 mo
347.235 220.919 342.036 221.935 336.837 222.951 cv
336.81 224.774 336.778 226.597 337 227.495 cv
337.296 228.678 341.533 228.948 342.762 229.114 cv
344.121 229.295 345.322 229.356 346.796 228.948 cv
348.271 228.541 350.017 227.662 351.844 226.8 cv
353.671 225.933 355.572 225.083 356.631 222.861 cv
357.695 220.639 357.91 217.046 358.126 213.451 cv
356.229 215.6 354.331 217.75 350.781 219.334 cv
350.781 219.334 li
cp
.317647 .247059 .192157 rgb
ef
327.586 220.268 mo
327.791 221.189 327.997 222.11 328.479 222.989 cv
328.961 223.867 329.719 224.701 330.48 225.536 cv
330.558 225.727 330.636 225.917 330.711 226.108 cv
330.745 225.832 330.779 225.559 330.813 225.285 cv
330.062 224.298 329.305 223.314 328.879 222.459 cv
328.449 221.61 328.348 220.89 328.246 220.175 cv
328.024 220.206 327.803 220.237 327.586 220.268 cv
327.586 220.268 li
cp
ef
325.534 215.668 mo
327.81 217.117 li
327.591 215.392 li
326.932 215.486 li
326.873 214.544 326.814 213.601 327.032 212.624 cv
327.251 211.645 327.744 210.632 328.242 209.618 cv
328.305 209.008 li
327.785 209.798 327.395 210.644 327.009 211.488 cv
326.007 212.867 li
325.534 215.668 li
cp
.858824 .713726 .533333 rgb
ef
327.997 218.437 mo
326.216 220.464 li
327.447 222.979 li
327.77 223.642 328.334 223.802 328.793 224.027 cv
329.382 224.701 329.969 225.379 330.663 225.985 cv
330.48 225.536 li
329.719 224.701 328.961 223.867 328.479 222.989 cv
327.997 222.11 327.791 221.189 327.586 220.268 cv
328.246 220.175 li
327.997 218.437 li
cp
ef
360.112 184.751 mo
368.697 183.529 li
369.434 183.424 370.122 183.94 370.226 184.677 cv
377.749 237.501 li
377.854 238.238 377.338 238.926 376.601 239.029 cv
368.016 240.251 li
367.281 240.356 366.594 239.84 366.485 239.106 cv
358.965 186.279 li
358.86 185.545 359.378 184.858 360.112 184.751 cv
360.112 184.751 li
cp
.2 .211765 .215686 rgb
ef
243.541 141.653 mo
242.573 141.336 241.604 141.02 240.468 140.717 cv
239.332 140.417 238.029 140.131 236.865 140.169 cv
235.701 140.202 234.675 140.561 233.792 140.946 cv
232.906 141.33 232.16 141.74 232.234 141.947 cv
232.309 142.153 233.199 142.158 234.18 142.122 cv
235.163 142.083 236.237 142.005 236.938 142.13 cv
237.639 142.259 237.967 142.591 238.021 142.914 cv
238.08 143.234 237.865 143.547 236.709 144.03 cv
235.55 144.515 233.45 145.165 231.169 145.328 cv
228.888 145.495 226.421 145.168 225.134 145.358 cv
223.845 145.551 223.728 146.261 224.861 146.562 cv
225.992 146.866 228.369 146.765 230.744 146.66 cv
229.81 146.682 228.874 146.703 227.938 146.725 cv
230.646 147.624 233.355 148.525 234.851 149.009 cv
236.35 149.494 236.632 149.563 237.951 149.384 cv
239.273 149.207 241.628 148.783 243.979 148.358 cv
243.835 146.124 243.688 143.887 243.541 141.653 cv
243.541 141.653 li
cp
.858824 .713726 .533333 rgb
ef
196.118 97.6606 mo
191.516 111.445 186.916 125.229 184.796 132.549 cv
182.675 139.867 183.031 140.721 185.448 143.563 cv
187.861 146.405 192.332 151.239 195.477 154.195 cv
198.618 157.157 200.433 158.238 202.248 159.321 cv
203.36 160.648 204.468 161.975 205.581 163.305 cv
207.474 161.514 209.372 159.726 211.266 157.941 cv
210.085 156.861 208.899 155.782 207.713 154.702 cv
207.005 152.773 206.292 150.849 204.386 148.011 cv
202.478 145.175 199.379 141.424 196.282 137.675 cv
201.176 126.884 206.072 116.093 210.969 105.3 cv
206.018 102.755 201.069 100.208 196.118 97.6606 cv
196.118 97.6606 li
cp
.890196 .886275 .894118 rgb
ef
268.205 97.6606 mo
272.75 113.271 277.298 128.887 279.393 137.12 cv
281.483 145.35 281.127 146.202 275.932 146.909 cv
270.735 147.615 260.703 148.177 250.671 148.736 cv
248.441 148.927 246.212 149.118 243.979 149.311 cv
243.835 146.522 243.688 143.734 243.541 140.946 cv
245.58 140.892 247.618 140.834 249.655 140.779 cv
255.612 139.367 261.57 137.952 267.528 136.536 cv
262.801 126.126 258.077 115.713 253.355 105.3 cv
258.306 102.755 263.255 100.208 268.205 97.6606 cv
268.205 97.6606 li
cp
ef
206.206 115.796 mo
213.984 118.827 221.763 121.855 229.538 124.885 cv
230.563 125.284 li
232.944 124.459 li
233.519 124.26 li
241.862 121.367 li
258.09 115.737 li
268.205 97.6606 li
256.144 90.4683 226.203 82.5879 196.118 97.6606 cv
206.206 115.796 li
cp
ef
206.206 115.796 mo
231.603 120.952 li
258.09 115.737 li
268.205 97.6606 li
256.144 90.4683 226.203 82.5879 196.118 97.6606 cv
206.206 115.796 li
cp
1 1 1 rgb
ef
245.865 108.982 mo
246.224 108.57 246.584 108.159 246.766 107.545 cv
246.942 106.934 246.942 106.119 246.824 105.7 cv
246.707 105.275 246.467 105.242 246.231 105.208 cv
245.954 105.168 245.675 105.129 245.399 105.088 cv
245.556 106.387 245.712 107.687 245.865 108.982 cv
245.865 108.982 li
cp
.858824 .713726 .533333 rgb
ef
223.482 122.625 mo
224.281 122.407 li
225.364 123.016 226.445 123.624 227.35 123.928 cv
228.255 124.232 228.976 124.232 229.701 124.232 cv
229.701 124.897 li
228.761 124.825 227.818 124.748 226.882 124.394 cv
225.945 124.042 225.012 123.406 224.079 122.772 cv
223.482 122.625 li
cp
234.527 126.307 mo
237.193 125.444 li
237.896 125.217 238.134 124.681 238.419 124.26 cv
239.57 123.515 240.722 122.772 241.656 121.629 cv
242.589 120.489 243.308 118.943 243.666 117.798 cv
243.756 117.51 243.823 117.245 243.876 117 cv
244.022 116.275 244.022 115.713 244.022 115.155 cv
244.576 113.833 245.067 112.424 245.427 111.15 cv
245.798 109.826 246.028 108.647 245.832 107.129 cv
245.635 105.614 245.013 103.759 244.412 101.831 cv
243.818 99.8984 243.243 97.896 241.191 96.5327 cv
239.141 95.1699 235.612 94.4478 232.086 93.7256 cv
228.558 94.4478 225.031 95.1699 222.982 96.5327 cv
220.931 97.896 220.355 99.8984 219.758 101.831 cv
219.407 102.958 219.047 104.063 218.772 105.088 cv
218.575 105.813 218.422 106.5 218.339 107.129 cv
218.253 107.8 218.25 108.405 218.305 108.982 cv
218.375 109.716 218.539 110.411 218.747 111.15 cv
219.106 112.424 219.594 113.833 220.147 115.155 cv
220.147 115.904 220.147 116.652 220.507 117.798 cv
220.866 118.943 221.584 120.489 222.518 121.629 cv
222.819 122 223.142 122.328 223.482 122.625 cv
224.195 123.252 224.974 123.756 225.754 124.26 cv
226.977 125.444 li
229.686 126.307 li
229.618 126.286 229.593 127.115 229.966 127.615 cv
231.203 129.286 li
231.528 129.726 231.844 129.657 232.086 129.657 cv
232.972 128.942 li
233.558 128.462 235.061 127.501 234.527 126.307 cv
234.527 126.307 li
234.527 126.307 li
cp
.901961 .760784 .580392 rgb
ef
218.305 108.982 mo
217.945 108.57 217.586 108.159 217.408 107.545 cv
217.231 106.934 217.231 106.119 217.348 105.696 cv
217.466 105.275 217.707 105.242 217.942 105.208 cv
218.219 105.168 218.496 105.129 218.772 105.088 cv
218.616 106.387 218.461 107.687 218.305 108.982 cv
218.305 108.982 li
cp
.858824 .713726 .533333 rgb
ef
229.701 124.897 mo
228.761 124.825 227.818 124.748 226.882 124.394 cv
225.945 124.042 225.012 123.406 224.079 122.772 cv
223.879 122.723 223.68 122.675 223.482 122.625 cv
223.75 122.551 224.013 122.481 224.281 122.407 cv
225.364 123.016 226.445 123.624 227.35 123.928 cv
228.255 124.232 228.976 124.232 229.701 124.232 cv
229.701 124.452 229.701 124.674 229.701 124.897 cv
229.701 124.897 li
cp
.317647 .247059 .192157 rgb
ef
238.489 116.143 mo
238.216 110.853 237.943 105.563 236.873 101.827 cv
235.807 98.0938 233.948 95.9092 232.086 93.7256 cv
228.558 94.4478 225.031 95.1699 222.982 96.5327 cv
220.931 97.896 220.355 99.8984 219.758 101.831 cv
219.407 102.958 219.047 104.063 218.772 105.088 cv
218.575 105.813 218.422 106.5 218.339 107.129 cv
218.253 107.8 218.25 108.405 218.305 108.982 cv
218.375 109.716 218.539 110.411 218.747 111.15 cv
219.106 112.424 219.594 113.833 220.147 115.155 cv
220.17 115.207 220.191 115.255 220.213 115.304 cv
220.789 116.667 221.428 117.931 221.824 118.708 cv
222.22 119.486 222.374 119.786 223.451 120.318 cv
224.529 120.853 226.531 121.628 227.726 122.089 cv
228.92 122.55 229.304 122.696 229.952 122.519 cv
230.6 122.343 231.513 121.84 232.98 120.72 cv
234.445 119.604 236.47 117.873 238.489 116.143 cv
238.489 116.143 li
cp
.560784 .380392 .290196 rgb
ef
236.873 101.827 mo
237.943 105.563 238.216 110.853 238.489 116.143 cv
240.289 116.429 242.093 116.714 243.014 116.623 cv
244.222 116.499 245.088 112.341 245.427 111.15 cv
245.798 109.826 246.028 108.647 245.832 107.129 cv
245.635 105.614 245.013 103.759 244.412 101.831 cv
243.818 99.8984 243.243 97.896 241.191 96.5327 cv
239.141 95.1699 235.612 94.4478 232.086 93.7256 cv
233.948 95.9092 235.807 98.0938 236.873 101.827 cv
236.873 101.827 li
cp
.411765 .290196 .239216 rgb
ef
234.527 124.925 mo
235.471 124.853 236.411 124.778 237.35 124.423 cv
238.286 124.069 239.22 123.437 240.153 122.8 cv
240.353 122.752 240.551 122.703 240.749 122.652 cv
240.481 122.582 240.215 122.508 239.95 122.436 cv
238.867 123.042 237.786 123.651 236.88 123.955 cv
235.978 124.26 235.253 124.26 234.527 124.26 cv
234.527 124.479 234.527 124.705 234.527 124.925 cv
234.527 124.925 li
cp
.317647 .247059 .192157 rgb
ef
229.686 126.307 mo
231.442 124.26 li
229.701 124.232 li
229.701 124.897 li
228.761 124.825 227.818 124.748 226.882 124.394 cv
225.945 124.042 225.012 123.406 224.079 122.772 cv
223.482 122.625 li
224.195 123.252 224.974 123.756 225.754 124.26 cv
226.977 125.444 li
229.686 126.307 li
cp
.858824 .713726 .533333 rgb
ef
232.774 124.26 mo
234.527 126.307 li
237.193 125.444 li
237.896 125.217 238.134 124.681 238.419 124.26 cv
239.173 123.771 239.927 123.285 240.621 122.687 cv
240.153 122.8 li
239.22 123.437 238.286 124.069 237.35 124.423 cv
236.411 124.778 235.471 124.853 234.527 124.925 cv
234.527 124.26 li
232.774 124.26 li
cp
ef
203.953 87.7134 mo
203.953 79.0454 li
203.953 78.3008 204.563 77.6909 205.307 77.6909 cv
258.662 77.6909 li
259.407 77.6909 260.016 78.3008 260.016 79.0454 cv
260.016 87.7134 li
260.016 88.4595 259.407 89.0679 258.662 89.0679 cv
205.307 89.0679 li
204.563 89.0679 203.953 88.4595 203.953 87.7134 cv
203.953 87.7134 li
cp
.2 .211765 .215686 rgb
ef
159.45 195.267 mo
199.841 202.945 li
194.835 229.283 li
154.448 221.61 li
159.45 195.267 li
cp
1 1 1 rgb
ef
169.351 198.452 mo
169.516 198.689 169.683 198.925 169.618 199.444 cv
169.556 199.963 169.265 200.761 169.185 201.641 cv
169.102 202.521 169.231 203.48 169.095 204.379 cv
168.96 205.276 168.561 206.115 168.527 206.458 cv
168.497 206.806 168.832 206.663 169.173 206.338 cv
169.513 206.014 169.857 205.51 170.051 204.991 cv
170.244 204.472 170.287 203.937 170.49 203.98 cv
170.693 204.026 171.058 204.649 171.347 205.217 cv
171.638 205.785 171.851 206.295 172.204 207.106 cv
172.559 207.916 173.054 209.028 173.367 209.5 cv
173.683 209.974 173.818 209.805 173.693 209.078 cv
173.564 208.349 173.171 207.063 172.932 206.311 cv
172.688 205.555 172.596 205.334 172.854 205.69 cv
173.109 206.046 173.711 206.983 174.282 207.841 cv
174.85 208.693 175.387 209.468 175.689 209.708 cv
175.986 209.942 176.048 209.646 175.86 209.118 cv
175.67 208.588 175.234 207.83 174.774 206.998 cv
174.313 206.17 173.828 205.268 173.896 205.328 cv
173.963 205.389 174.58 206.412 175.207 207.266 cv
175.836 208.119 176.475 208.805 176.77 208.949 cv
177.067 209.095 177.021 208.704 176.509 207.708 cv
175.996 206.716 175.017 205.123 174.86 204.834 cv
174.704 204.545 175.373 205.562 175.842 206.201 cv
176.315 206.838 176.588 207.096 176.788 207.182 cv
176.99 207.268 177.116 207.179 176.868 206.51 cv
176.619 205.838 175.999 204.585 175.416 203.335 cv
174.835 202.086 174.292 200.834 173.751 200.009 cv
173.213 199.183 172.673 198.779 172.329 198.349 cv
171.985 197.918 171.838 197.464 171.69 197.01 cv
170.91 197.488 170.131 197.971 169.351 198.452 cv
169.351 198.452 li
cp
.858824 .713726 .533333 rgb
ef
210.505 158.449 mo
211.008 159.051 211.508 159.656 212.013 160.257 cv
213.127 160.338 214.243 160.417 215.522 160.844 cv
216.803 161.272 218.247 162.048 219.752 162.368 cv
221.26 162.686 222.826 162.549 223.393 162.702 cv
223.962 162.858 223.536 163.305 222.819 163.652 cv
222.1 163.998 221.096 164.25 220.156 164.247 cv
219.218 164.244 218.345 163.993 218.296 164.34 cv
218.247 164.689 219.018 165.641 219.746 166.437 cv
220.474 167.234 221.155 167.877 222.232 168.92 cv
223.307 169.966 224.778 171.411 225.34 172.191 cv
225.902 172.97 225.555 173.087 224.478 172.451 cv
223.399 171.816 221.591 170.428 220.538 169.596 cv
219.484 168.764 219.187 168.491 219.601 169.108 cv
220.015 169.725 221.143 171.239 222.162 172.652 cv
223.178 174.063 224.087 175.375 224.286 175.994 cv
224.486 176.607 223.977 176.527 223.252 175.916 cv
222.524 175.301 221.581 174.156 220.35 172.697 cv
219.12 171.239 217.595 169.464 217.294 169.388 cv
216.99 169.308 217.906 170.923 219.032 172.59 cv
220.16 174.257 221.501 175.978 222.048 176.869 cv
222.599 177.755 222.356 177.817 222.104 177.876 cv
221.853 177.936 221.596 178.001 220.443 176.896 cv
219.288 175.791 217.24 173.517 215.188 171.246 cv
215.56 172.107 215.931 172.974 216.603 173.935 cv
217.277 174.894 218.25 175.949 218.671 176.542 cv
219.088 177.131 218.95 177.261 218.793 177.403 cv
218.637 177.544 218.465 177.704 217.458 176.767 cv
216.45 175.827 214.607 173.796 213.124 171.97 cv
211.639 170.146 210.512 168.525 209.731 167.272 cv
208.949 166.019 208.509 165.134 208.005 164.395 cv
207.505 163.652 206.937 163.052 206.369 162.455 cv
207.748 161.121 209.126 159.785 210.505 158.449 cv
210.505 158.449 li
cp
ef
226.68 143.583 mo
229.308 143.583 231.934 143.583 234.562 143.583 cv
234.742 144.247 234.928 144.91 235.108 145.573 cv
235.108 145.804 235.108 146.034 235.108 146.264 cv
232.068 146.264 229.029 146.264 225.988 146.264 cv
225.988 146.034 225.988 145.804 225.988 145.573 cv
226.219 144.91 226.449 144.247 226.68 143.583 cv
226.68 143.583 li
cp
.223529 .235294 .239216 rgb
ef
225.988 146.264 mo
235.108 146.264 li
235.108 145.573 li
225.988 145.573 li
225.988 146.264 li
cp
0 0 .0196078 rgb
ef
293.976 316.322 mo
276.938 320.053 li
261.606 329.815 li
259.456 342.461 li
268.642 343.313 289.149 339.916 304.454 323.757 cv
293.976 316.322 li
cp
1 1 1 rgb
ef
272.081 315.68 mo
266.354 320.575 265.519 331.674 269.008 337.728 cv
277.356 352.219 296.291 345.153 295.119 332.615 cv
295.007 331.437 294.916 330.277 294.776 329.226 cv
294.679 328.479 294.559 327.785 294.394 327.174 cv
294.215 326.522 293.984 325.964 293.711 325.451 cv
290.29 319.018 284.235 313.165 276.552 313.821 cv
276.552 313.821 274.283 312.846 273.678 313.138 cv
273.31 313.313 272.226 315.146 272.081 315.68 cv
272.081 315.68 li
cp
.901961 .760784 .580392 rgb
ef
277.079 315.13 mo
277.977 314.839 278.878 314.543 279.858 314.547 cv
280.842 314.55 281.911 314.844 282.979 315.144 cv
283.224 315.144 283.474 315.146 283.723 315.146 cv
283.494 315.214 283.268 315.28 283.04 315.348 cv
281.81 315.203 280.575 315.058 279.627 315.124 cv
278.674 315.188 278.004 315.469 277.337 315.745 cv
277.251 315.542 277.167 315.336 277.079 315.13 cv
277.079 315.13 li
cp
.317647 .247059 .192157 rgb
ef
272.612 316.957 mo
271.77 317.387 270.933 317.817 270.191 318.595 cv
269.453 319.372 268.813 320.492 268.174 321.616 cv
268.303 321.523 268.434 321.429 268.563 321.336 cv
269.329 320.36 270.094 319.384 270.813 318.757 cv
271.531 318.127 272.198 317.851 272.866 317.572 cv
272.784 317.366 272.697 317.159 272.612 316.957 cv
272.612 316.957 li
cp
ef
315.13 339.58 mo
318.459 347.585 li
318.741 348.274 318.416 349.068 317.729 349.354 cv
268.457 369.837 li
267.771 370.122 266.978 369.794 266.692 369.104 cv
263.363 361.1 li
263.077 360.412 263.405 359.617 264.09 359.331 cv
313.361 338.852 li
314.051 338.565 314.844 338.893 315.13 339.58 cv
315.13 339.58 li
cp
.2 .211765 .215686 rgb
ef
272.44 324.033 mo
273.942 322.353 275.442 320.673 277.719 319.475 cv
279.994 318.28 283.04 317.572 285.062 317.514 cv
287.078 317.459 288.068 318.05 289.057 318.646 cv
291.664 321.836 294.273 325.024 295.464 328.5 cv
296.653 331.974 296.429 335.735 295.031 340.1 cv
293.635 344.462 291.063 349.431 286.425 350.159 cv
281.784 350.883 275.075 347.366 271.371 343.305 cv
267.672 339.238 266.979 334.627 266.29 330.015 cv
266.39 328.07 266.491 326.123 267.518 325.128 cv
268.544 324.131 270.492 324.081 272.44 324.033 cv
272.44 324.033 li
cp
.243137 .184314 .129412 rgb
ef
289.044 350.81 mo
290.915 349.84 292.646 348.291 293.62 346.409 cv
294.596 344.527 294.814 342.313 293.573 340.354 cv
292.332 338.394 289.638 336.69 286.572 336.684 cv
283.504 336.679 280.073 338.366 278.32 340.607 cv
276.567 342.848 276.493 345.632 277.581 347.721 cv
278.668 349.806 280.916 351.188 283.04 351.683 cv
285.168 352.176 287.174 351.782 289.044 350.81 cv
289.044 350.81 li
cp
.317647 .247059 .192157 rgb
ef
285.711 347.065 mo
286.357 347.137 287.257 346.968 287.812 346.421 cv
288.371 345.874 288.587 344.952 288.174 344.523 cv
287.767 344.098 286.729 344.168 285.976 344.562 cv
285.223 344.953 284.754 345.67 284.714 346.179 cv
284.677 346.693 285.066 346.995 285.711 347.065 cv
285.711 347.065 li
cp
.243137 .184314 .129412 rgb
ef
274.982 331.6 mo
274.221 329.925 273.665 328.278 273.181 326.646 cv
272.919 325.774 272.679 324.901 272.44 324.033 cv
271.527 324.054 270.616 324.078 269.8 324.198 cv
268.871 324.334 268.063 324.597 267.518 325.128 cv
267.396 325.245 267.287 325.378 267.189 325.521 cv
267.061 325.716 266.95 325.931 266.854 326.163 cv
266.486 327.082 266.385 328.278 266.317 329.508 cv
266.308 329.677 266.299 329.845 266.29 330.015 cv
266.979 334.627 267.672 339.238 271.371 343.305 cv
273.064 345.16 275.381 346.904 277.844 348.178 cv
277.753 348.029 277.664 347.877 277.581 347.721 cv
277.129 346.851 276.878 345.862 276.864 344.84 cv
276.847 343.409 277.298 341.914 278.32 340.607 cv
278.64 340.197 279.019 339.807 279.438 339.439 cv
277.793 336.804 276.149 334.169 274.982 331.6 cv
274.982 331.6 li
cp
.384314 .298039 .231373 rgb
ef
304.454 323.757 mo
302.417 308.688 300.382 293.623 299.319 285.776 cv
298.259 277.931 298.173 277.31 297.067 276.017 cv
295.959 274.725 293.831 272.766 291.7 270.808 cv
289.806 272.418 287.908 274.033 286.011 275.648 cv
287.956 277.593 289.9 279.537 290.926 281.511 cv
291.954 283.482 292.063 285.487 292.418 291.294 cv
292.772 297.103 293.374 306.711 293.976 316.322 cv
297.47 318.799 300.961 321.278 304.454 323.757 cv
304.454 323.757 li
cp
1 1 1 rgb
ef
98.2217 205.941 mo
109.041 214.199 119.858 222.454 125.57 226.543 cv
131.286 230.634 131.896 230.555 137.66 229.308 cv
143.427 228.061 154.347 225.647 165.264 223.234 cv
164.45 221.091 163.636 218.944 162.819 216.801 cv
153.668 218.456 144.517 220.113 139.607 220.701 cv
134.7 221.291 134.03 220.804 129.961 217.867 cv
125.89 214.928 118.416 209.532 110.941 204.136 cv
106.701 204.738 102.46 205.34 98.2217 205.941 cv
98.2217 205.941 li
cp
0 0 .0196078 rgb
ef
118.035 161.421 mo
131.463 163.231 144.892 165.039 152.111 166.282 cv
159.328 167.527 160.335 168.199 162.764 173.103 cv
165.192 178.004 169.046 187.13 172.904 196.261 cv
170.883 197.507 168.863 198.753 166.841 199.999 cv
162.859 192.115 158.877 184.229 156.481 180.205 cv
154.085 176.179 153.278 176.014 148.325 175.301 cv
143.368 174.593 134.27 173.336 125.168 172.08 cv
122.788 168.527 120.411 164.974 118.035 161.421 cv
118.035 161.421 li
cp
ef
273.518 185.2 mo
264.698 195.831 li
264.44 196.14 263.979 196.183 263.671 195.925 cv
248.663 183.474 li
248.353 183.218 248.31 182.754 248.567 182.445 cv
257.387 171.813 li
257.645 171.506 258.104 171.463 258.416 171.719 cv
273.424 184.17 li
273.732 184.428 273.775 184.892 273.518 185.2 cv
273.518 185.2 li
cp
1 1 1 rgb
ef
272.416 185.371 mo
264.551 194.848 li
264.323 195.125 263.909 195.161 263.633 194.934 cv
250.257 183.833 li
249.98 183.603 249.944 183.19 250.171 182.914 cv
258.034 173.438 li
258.263 173.161 258.678 173.125 258.952 173.352 cv
272.33 184.454 li
272.606 184.684 272.643 185.095 272.416 185.371 cv
272.416 185.371 li
cp
.2 .211765 .215686 rgb
ef
263.703 177.294 mo
261.157 192.878 li
263.633 194.934 li
266.178 179.349 li
263.703 177.294 li
cp
.317647 .321569 .329412 rgb
ef
256.048 188.637 mo
258.569 173.204 li
258.37 173.195 258.17 173.274 258.034 173.438 cv
250.171 182.914 li
249.944 183.19 249.98 183.603 250.257 183.833 cv
256.048 188.637 li
cp
ef
163.541 218.695 mo
163.82 218.621 164.099 218.551 164.391 218.117 cv
164.68 217.681 164.981 216.887 165.494 216.168 cv
166.006 215.446 166.728 214.804 167.213 214.037 cv
167.696 213.265 167.938 212.37 168.138 212.086 cv
168.34 211.801 168.5 212.129 168.546 212.597 cv
168.596 213.066 168.527 213.674 168.334 214.193 cv
168.145 214.713 167.824 215.146 168.008 215.244 cv
168.193 215.342 168.877 215.108 169.468 214.866 cv
170.054 214.626 170.551 214.377 171.347 213.994 cv
172.145 213.609 173.244 213.088 173.791 212.937 cv
174.337 212.784 174.331 213.002 173.76 213.468 cv
173.189 213.936 172.053 214.658 171.377 215.072 cv
170.702 215.486 170.49 215.594 170.917 215.489 cv
171.343 215.385 172.413 215.068 173.4 214.792 cv
174.39 214.516 175.301 214.28 175.683 214.294 cv
176.064 214.307 175.916 214.575 175.431 214.85 cv
174.942 215.13 174.116 215.419 173.226 215.747 cv
172.335 216.079 171.381 216.447 171.47 216.443 cv
171.562 216.442 172.694 216.067 173.726 215.83 cv
174.762 215.591 175.691 215.493 176.011 215.576 cv
176.331 215.658 176.039 215.926 175.004 216.344 cv
173.966 216.76 172.185 217.332 171.878 217.449 cv
171.571 217.566 172.741 217.231 173.515 217.052 cv
174.289 216.876 174.667 216.859 174.872 216.922 cv
175.081 216.99 175.121 217.141 174.495 217.488 cv
173.868 217.836 172.581 218.378 171.322 218.948 cv
170.065 219.515 168.841 220.108 167.892 220.385 cv
166.946 220.658 166.273 220.615 165.746 220.686 cv
165.221 220.752 164.842 220.937 164.462 221.12 cv
164.155 220.313 163.847 219.503 163.541 218.695 cv
163.541 218.695 li
cp
.858824 .713726 .533333 rgb
ef
259.456 342.461 mo
250.049 332.29 240.642 322.12 235.857 316.729 cv
231.071 311.341 230.907 310.732 231.596 308.05 cv
232.286 305.368 233.835 300.615 235.378 295.861 cv
237.654 296.549 239.93 297.234 242.205 297.922 cv
241.621 301.332 241.035 304.744 240.637 306.461 cv
240.239 308.179 240.024 308.195 243.55 311.802 cv
247.075 315.406 254.341 322.602 261.606 329.796 cv
260.891 334.017 260.173 338.237 259.456 342.461 cv
259.456 342.461 li
cp
1 1 1 rgb
ef
287.205 274.63 mo
284.962 271.378 282.721 268.126 281.361 266.147 cv
280.003 264.171 279.527 263.468 278.714 263.203 cv
277.899 262.942 276.748 263.117 276.078 263.219 cv
275.41 263.32 275.223 263.351 274.936 262.839 cv
274.654 262.328 274.274 261.278 274.087 260.691 cv
273.899 260.105 273.908 259.982 273.974 259.759 cv
274.037 259.537 274.157 259.212 274.276 258.889 cv
272.812 256.582 271.347 254.277 271.5 254.099 cv
271.654 253.923 273.429 255.873 275.201 257.823 cv
276.43 257.433 277.657 257.041 278.375 256.994 cv
279.093 256.944 279.3 257.242 279.659 258.084 cv
280.019 258.923 280.529 260.302 281.038 261.684 cv
284.277 264.994 287.515 268.303 290.751 271.613 cv
289.568 272.619 288.388 273.626 287.205 274.63 cv
287.205 274.63 li
cp
.858824 .713726 .533333 rgb
ef
244.561 284.907 mo
244.904 284.515 245.592 284.014 246.15 283.333 cv
246.711 282.646 247.141 281.778 247.754 281.111 cv
248.368 280.442 249.17 279.973 249.391 279.702 cv
249.612 279.436 249.253 279.367 248.789 279.444 cv
248.324 279.522 247.758 279.745 247.306 280.068 cv
246.855 280.39 246.523 280.811 246.379 280.661 cv
246.234 280.51 246.281 279.788 246.356 279.155 cv
246.434 278.523 246.544 277.983 246.704 277.11 cv
246.863 276.242 247.075 275.041 247.078 274.476 cv
247.082 273.908 246.875 273.97 246.574 274.646 cv
246.274 275.321 245.877 276.605 245.657 277.366 cv
245.436 278.128 245.387 278.36 245.375 277.922 cv
245.361 277.481 245.387 276.368 245.393 275.342 cv
245.399 274.313 245.387 273.373 245.271 273.007 cv
245.157 272.643 244.938 272.854 244.8 273.397 cv
244.658 273.942 244.597 274.817 244.514 275.763 cv
244.432 276.708 244.326 277.728 244.306 277.64 cv
244.284 277.554 244.349 276.359 244.306 275.299 cv
244.263 274.24 244.115 273.315 243.948 273.029 cv
243.787 272.744 243.604 273.094 243.474 274.204 cv
243.345 275.314 243.265 277.185 243.229 277.511 cv
243.201 277.836 243.214 276.618 243.182 275.826 cv
243.147 275.035 243.064 274.666 242.944 274.482 cv
242.828 274.302 242.675 274.302 242.503 274.997 cv
242.334 275.692 242.15 277.077 241.933 278.44 cv
241.714 279.804 241.465 281.139 241.449 282.128 cv
241.438 283.114 241.674 283.75 241.702 284.3 cv
241.757 285.398 241.257 287.081 236.947 296.334 cv
241.16 297.605 li
241.16 297.605 243.488 286.145 244.561 284.907 cv
244.561 284.907 li
cp
ef
232.003 107.864 mo
110.113 79.8403 li
110.431 78.4595 li
232.321 106.483 li
232.003 107.864 li
cp
1 1 1 rgb
f
109.13 186.44 mo
107.713 186.416 li
109.563 79.1377 li
110.98 79.1621 li
109.13 186.44 li
cp
f
232.27 107.874 mo
232.055 106.474 li
359.936 86.8291 li
360.15 88.2295 li
232.27 107.874 li
cp
f
344.347 212.433 mo
342.942 212.249 li
359.341 87.437 li
360.745 87.6216 li
344.347 212.433 li
cp
f
376.77 319.144 mo
342.969 212.555 li
344.32 212.126 li
378.121 318.716 li
376.77 319.144 li
cp
f
282.031 330.156 mo
281.877 328.748 li
377.368 318.226 li
377.522 319.634 li
282.031 330.156 li
cp
f
214.177 386.511 mo
213.273 385.419 li
281.502 328.906 li
282.406 329.998 li
214.177 386.511 li
cp
f
213.222 386.464 mo
146.404 319.105 li
147.41 318.107 li
214.228 385.466 li
213.222 386.464 li
cp
f
71.2783 272.163 mo
69.9824 271.589 li
107.773 186.142 li
109.069 186.715 li
71.2783 272.163 li
cp
f
159.393 100.349 mo
158.096 99.7773 li
160.954 93.293 li
162.251 93.8643 li
159.393 100.349 li
cp
154.82 110.725 mo
153.523 110.153 li
156.381 103.668 li
157.678 104.24 li
154.82 110.725 li
cp
150.248 121.1 mo
148.951 120.529 li
151.809 114.044 li
153.105 114.615 li
150.248 121.1 li
cp
f
142.603 122.146 mo
142.478 120.733 li
149.537 120.108 li
149.662 121.521 li
142.603 122.146 li
cp
131.308 123.146 mo
131.183 121.733 li
138.242 121.108 li
138.367 122.521 li
131.308 123.146 li
cp
120.014 124.146 mo
119.889 122.733 li
126.948 122.108 li
127.073 123.521 li
120.014 124.146 li
cp
109.555 125.071 mo
109.43 123.659 li
115.653 123.108 li
115.778 124.521 li
109.555 125.071 li
cp
f
294.325 63.375 mo
294.103 56.292 li
295.519 56.2471 li
295.741 63.3301 li
294.325 63.375 li
cp
294.682 74.708 mo
294.459 67.625 li
295.875 67.5801 li
296.098 74.6631 li
294.682 74.708 li
cp
295.037 86.0405 mo
294.815 78.9575 li
296.231 78.9136 li
296.453 85.9966 li
295.037 86.0405 li
cp
295.394 97.374 mo
295.171 90.291 li
296.587 90.2461 li
296.81 97.3291 li
295.394 97.374 li
cp
f
359.729 88.165 mo
294.47 56.02 li
295.097 54.7485 li
360.356 86.8936 li
359.729 88.165 li
cp
f
390.848 145.32 mo
359.421 87.8691 li
360.665 87.189 li
392.092 144.64 li
390.848 145.32 li
cp
f
385.685 146.417 mo
385.509 145.011 li
391.382 144.276 li
391.558 145.683 li
385.685 146.417 li
cp
374.434 147.824 mo
374.258 146.418 li
381.29 145.539 li
381.466 146.945 li
374.434 147.824 li
cp
363.183 149.231 mo
363.007 147.825 li
370.039 146.945 li
370.215 148.352 li
363.183 149.231 li
cp
351.932 150.638 mo
351.756 149.232 li
358.788 148.353 li
358.964 149.759 li
351.932 150.638 li
cp
f
392.876 56.2319 mo
391.882 55.2212 li
394.196 52.9448 li
395.19 53.9556 li
392.876 56.2319 li
cp
384.792 64.1826 mo
383.798 63.1719 li
388.851 58.2026 li
389.845 59.2134 li
384.792 64.1826 li
cp
376.708 72.1333 mo
375.714 71.1226 li
380.767 66.1533 li
381.761 67.1641 li
376.708 72.1333 li
cp
368.624 80.084 mo
367.63 79.0732 li
372.683 74.104 li
373.677 75.1147 li
368.624 80.084 li
cp
360.54 88.0347 mo
359.546 87.0239 li
364.599 82.0547 li
365.593 83.0654 li
360.54 88.0347 li
cp
f
323.718 394.199 mo
322.571 393.367 li
376.872 318.514 li
378.019 319.346 li
323.718 394.199 li
cp
f
221.306 387.217 mo
214.238 386.712 li
214.338 385.298 li
221.407 385.803 li
221.306 387.217 li
cp
232.615 388.025 mo
225.547 387.521 li
225.648 386.106 li
232.717 386.611 li
232.615 388.025 li
cp
243.926 388.833 mo
236.856 388.328 li
236.958 386.914 li
244.027 387.419 li
243.926 388.833 li
cp
255.235 389.642 mo
248.167 389.137 li
248.269 387.723 li
255.337 388.228 li
255.235 389.642 li
cp
266.545 390.449 mo
259.477 389.944 li
259.578 388.53 li
266.646 389.035 li
266.545 390.449 li
cp
277.854 391.258 mo
270.786 390.753 li
270.888 389.339 li
277.956 389.844 li
277.854 391.258 li
cp
289.164 392.065 mo
282.096 391.561 li
282.197 390.146 li
289.266 390.651 li
289.164 392.065 li
cp
300.475 392.874 mo
293.405 392.369 li
293.507 390.955 li
300.576 391.46 li
300.475 392.874 li
cp
311.784 393.682 mo
304.716 393.177 li
304.817 391.763 li
311.886 392.268 li
311.784 393.682 li
cp
323.094 394.49 mo
316.025 393.985 li
316.127 392.571 li
323.195 393.076 li
323.094 394.49 li
cp
f
98.8003 382.501 mo
91.7183 382.244 li
91.77 380.828 li
98.8521 381.085 li
98.8003 382.501 li
cp
110.131 382.913 mo
103.049 382.655 li
103.101 381.239 li
110.183 381.497 li
110.131 382.913 li
cp
121.462 383.324 mo
114.38 383.067 li
114.432 381.651 li
121.514 381.908 li
121.462 383.324 li
cp
132.793 383.735 mo
125.711 383.479 li
125.763 382.063 li
132.845 382.319 li
132.793 383.735 li
cp
144.125 384.146 mo
137.043 383.89 li
137.095 382.474 li
144.176 382.73 li
144.125 384.146 li
cp
155.456 384.559 mo
148.374 384.301 li
148.426 382.885 li
155.508 383.143 li
155.456 384.559 li
cp
166.787 384.97 mo
159.705 384.713 li
159.757 383.297 li
166.839 383.554 li
166.787 384.97 li
cp
178.118 385.381 mo
171.036 385.124 li
171.088 383.708 li
178.17 383.965 li
178.118 385.381 li
cp
189.449 385.792 mo
182.367 385.535 li
182.419 384.119 li
189.501 384.376 li
189.449 385.792 li
cp
200.78 386.204 mo
193.698 385.946 li
193.75 384.53 li
200.832 384.788 li
200.78 386.204 li
cp
212.111 386.615 mo
205.03 386.358 li
205.082 384.942 li
212.163 385.199 li
212.111 386.615 li
cp
f
91.0483 381.67 mo
69.9346 272.01 li
71.3262 271.742 li
92.4399 381.402 li
91.0483 381.67 li
cp
f
76.6577 327.953 mo
75.4634 327.189 li
79.2783 321.218 li
80.4727 321.981 li
76.6577 327.953 li
cp
70.5532 337.509 mo
69.3589 336.745 li
73.1743 330.772 li
74.3687 331.536 li
70.5532 337.509 li
cp
64.4492 347.063 mo
63.2549 346.3 li
67.0698 340.328 li
68.2642 341.092 li
64.4492 347.063 li
cp
58.3452 356.619 mo
57.1509 355.855 li
60.9658 349.884 li
62.1602 350.647 li
58.3452 356.619 li
cp
f
63.0103 361.036 mo
57.3252 356.806 li
58.1709 355.669 li
63.856 359.899 li
63.0103 361.036 li
cp
72.1064 367.806 mo
66.4214 363.575 li
67.2671 362.438 li
72.9521 366.669 li
72.1064 367.806 li
cp
81.2031 374.574 mo
75.5176 370.344 li
76.3633 369.207 li
82.0488 373.438 li
81.2031 374.574 li
cp
90.2993 381.344 mo
84.6143 377.113 li
85.46 375.977 li
91.145 380.207 li
90.2993 381.344 li
cp
f
60.9458 54.564 mo
54.6445 51.3213 li
55.293 50.0615 li
61.5942 53.3042 li
60.9458 54.564 li
cp
71.0278 59.752 mo
64.7266 56.5093 li
65.375 55.2495 li
71.6763 58.4922 li
71.0278 59.752 li
cp
81.1099 64.9404 mo
74.8086 61.6982 li
75.457 60.4375 li
81.7583 63.6802 li
81.1099 64.9404 li
cp
91.1919 70.1284 mo
84.8906 66.8857 li
85.5391 65.626 li
91.8403 68.8687 li
91.1919 70.1284 li
cp
101.274 75.3164 mo
94.9727 72.0737 li
95.6211 70.814 li
101.922 74.0566 li
101.274 75.3164 li
cp
109.948 79.7798 mo
105.055 77.2617 li
105.703 76.002 li
110.596 78.52 li
109.948 79.7798 li
cp
f
200.082 33.3931 mo
193.19 31.7397 li
193.521 30.3618 li
200.413 32.0151 li
200.082 33.3931 li
cp
211.107 36.0381 mo
204.216 34.3848 li
204.547 33.0068 li
211.438 34.6602 li
211.107 36.0381 li
cp
222.133 38.6836 mo
215.242 37.0303 li
215.573 35.6523 li
222.464 37.3057 li
222.133 38.6836 li
cp
233.159 41.3286 mo
226.269 39.6753 li
226.599 38.2974 li
233.489 39.9507 li
233.159 41.3286 li
cp
244.185 43.9736 mo
237.294 42.3203 li
237.624 40.9424 li
244.515 42.5957 li
244.185 43.9736 li
cp
255.211 46.6191 mo
248.319 44.9658 li
248.649 43.5879 li
255.541 45.2412 li
255.211 46.6191 li
cp
266.236 49.2642 mo
259.346 47.6108 li
259.676 46.2329 li
266.566 47.8862 li
266.236 49.2642 li
cp
277.262 51.9092 mo
270.371 50.2559 li
270.701 48.8779 li
277.592 50.5313 li
277.262 51.9092 li
cp
288.288 54.5547 mo
281.396 52.9014 li
281.727 51.5234 li
288.618 53.1768 li
288.288 54.5547 li
cp
294.618 56.0732 mo
292.423 55.5464 li
292.753 54.1685 li
294.948 54.6953 li
294.618 56.0732 li
cp
f
187.578 35.2144 mo
186.868 33.9878 li
193.001 30.4375 li
193.711 31.6641 li
187.578 35.2144 li
cp
177.765 40.8955 mo
177.055 39.6689 li
183.188 36.1182 li
183.898 37.3447 li
177.765 40.8955 li
cp
167.952 46.5762 mo
167.242 45.3496 li
173.375 41.7993 li
174.085 43.0259 li
167.952 46.5762 li
cp
158.14 52.2573 mo
157.43 51.0308 li
163.563 47.48 li
164.272 48.7065 li
158.14 52.2573 li
cp
148.327 57.938 mo
147.617 56.7114 li
153.75 53.1611 li
154.459 54.3877 li
148.327 57.938 li
cp
138.514 63.6191 mo
137.804 62.3926 li
143.937 58.8418 li
144.647 60.0684 li
138.514 63.6191 li
cp
128.701 69.2998 mo
127.991 68.0732 li
134.124 64.5225 li
134.834 65.749 li
128.701 69.2998 li
cp
118.888 74.9805 mo
118.178 73.7539 li
124.311 70.2036 li
125.021 71.4302 li
118.888 74.9805 li
cp
110.627 79.7632 mo
109.917 78.5366 li
114.499 75.8843 li
115.208 77.1108 li
110.627 79.7632 li
cp
f
106.105 84.9258 mo
105.044 83.9863 li
109.741 78.6802 li
110.803 79.6196 li
106.105 84.9258 li
cp
98.5894 93.4155 mo
97.5278 92.4761 li
102.226 87.1699 li
103.287 88.1094 li
98.5894 93.4155 li
cp
91.0737 101.905 mo
90.0122 100.966 li
94.7095 95.6597 li
95.771 96.5991 li
91.0737 101.905 li
cp
83.5581 110.395 mo
82.4966 109.456 li
87.1938 104.149 li
88.2554 105.089 li
83.5581 110.395 li
cp
76.042 118.885 mo
74.9805 117.945 li
79.6782 112.639 li
80.7397 113.579 li
76.042 118.885 li
cp
68.5264 127.375 mo
67.4648 126.435 li
72.1621 121.129 li
73.2236 122.069 li
68.5264 127.375 li
cp
61.0107 135.865 mo
59.9492 134.925 li
64.6465 129.619 li
65.708 130.559 li
61.0107 135.865 li
cp
53.4946 144.354 mo
52.4331 143.415 li
57.1309 138.109 li
58.1924 139.048 li
53.4946 144.354 li
cp
45.979 152.844 mo
44.9175 151.905 li
49.6147 146.599 li
50.6763 147.538 li
45.979 152.844 li
cp
f
45.8286 161.234 mo
44.3218 154.309 li
45.7065 154.007 li
47.2134 160.932 li
45.8286 161.234 li
cp
48.2393 172.313 mo
46.7324 165.389 li
48.1172 165.087 li
49.624 172.011 li
48.2393 172.313 li
cp
50.6504 183.393 mo
49.1436 176.468 li
50.5283 176.166 li
52.0352 183.091 li
50.6504 183.393 li
cp
53.0615 194.472 mo
51.5547 187.547 li
52.9395 187.246 li
54.4463 194.17 li
53.0615 194.472 li
cp
55.4722 205.551 mo
53.9653 198.626 li
55.3501 198.325 li
56.8569 205.249 li
55.4722 205.551 li
cp
57.8833 216.63 mo
56.3765 209.706 li
57.7612 209.404 li
59.2681 216.329 li
57.8833 216.63 li
cp
60.2939 227.709 mo
58.7871 220.785 li
60.1719 220.483 li
61.6787 227.408 li
60.2939 227.709 li
cp
62.7051 238.788 mo
61.1982 231.864 li
62.583 231.563 li
64.0898 238.487 li
62.7051 238.788 li
cp
65.1162 249.868 mo
63.6094 242.943 li
64.9941 242.643 li
66.501 249.567 li
65.1162 249.868 li
cp
67.5269 260.947 mo
66.02 254.022 li
67.4048 253.722 li
68.9116 260.646 li
67.5269 260.947 li
cp
69.938 272.026 mo
68.4312 265.102 li
69.8159 264.801 li
71.3228 271.726 li
69.938 272.026 li
cp
f
67.5601 273.374 mo
67.2163 271.999 li
70.4585 271.188 li
70.8022 272.563 li
67.5601 273.374 li
cp
56.5601 276.125 mo
56.2163 274.75 li
63.0913 273.03 li
63.4351 274.405 li
56.5601 276.125 li
cp
45.5605 278.876 mo
45.2168 277.501 li
52.0913 275.781 li
52.4351 277.156 li
45.5605 278.876 li
cp
34.5605 281.626 mo
34.2168 280.251 li
41.0918 278.532 li
41.4355 279.907 li
34.5605 281.626 li
cp
23.5605 284.377 mo
23.2168 283.002 li
30.0918 281.283 li
30.4355 282.658 li
23.5605 284.377 li
cp
f
394.116 153.847 mo
391.575 147.231 li
392.897 146.723 li
395.438 153.339 li
394.116 153.847 li
cp
398.18 164.432 mo
395.64 157.816 li
396.962 157.308 li
399.502 163.924 li
398.18 164.432 li
cp
402.244 175.017 mo
399.704 168.401 li
401.026 167.893 li
403.566 174.509 li
402.244 175.017 li
cp
406.309 185.602 mo
403.769 178.986 li
405.091 178.479 li
407.631 185.094 li
406.309 185.602 li
cp
410.373 196.187 mo
407.833 189.571 li
409.155 189.063 li
411.695 195.679 li
410.373 196.187 li
cp
414.438 206.772 mo
411.897 200.156 li
413.22 199.648 li
415.76 206.264 li
414.438 206.772 li
cp
418.502 217.357 mo
415.962 210.742 li
417.284 210.234 li
419.824 216.85 li
418.502 217.357 li
cp
422.566 227.942 mo
420.026 221.327 li
421.349 220.819 li
423.889 227.435 li
422.566 227.942 li
cp
f
420.684 234.34 mo
419.416 233.705 li
422.594 227.371 li
423.861 228.006 li
420.684 234.34 li
cp
415.598 244.475 mo
414.33 243.84 li
417.509 237.506 li
418.776 238.141 li
415.598 244.475 li
cp
410.513 254.608 mo
409.245 253.974 li
412.424 247.64 li
413.691 248.274 li
410.513 254.608 li
cp
405.428 264.743 mo
404.16 264.108 li
407.338 257.774 li
408.605 258.409 li
405.428 264.743 li
cp
400.343 274.877 mo
399.075 274.242 li
402.253 267.908 li
403.521 268.543 li
400.343 274.877 li
cp
395.258 285.012 mo
393.99 284.377 li
397.168 278.043 li
398.436 278.678 li
395.258 285.012 li
cp
390.172 295.146 mo
388.904 294.51 li
392.083 288.177 li
393.351 288.813 li
390.172 295.146 li
cp
385.087 305.28 mo
383.819 304.646 li
386.998 298.312 li
388.266 298.946 li
385.087 305.28 li
cp
380.002 315.415 mo
378.734 314.78 li
381.913 308.446 li
383.181 309.081 li
380.002 315.415 li
cp
378.083 319.239 mo
376.808 318.62 li
378.099 319.207 li
378.083 319.239 li
cp
f
379.085 325.649 mo
376.777 319.167 li
378.113 318.692 li
380.421 325.175 li
379.085 325.649 li
cp
382.887 336.332 mo
380.511 329.655 li
381.847 329.181 li
384.223 335.857 li
382.887 336.332 li
cp
386.688 347.014 mo
384.313 340.338 li
385.648 339.863 li
388.024 346.539 li
386.688 347.014 li
cp
390.49 357.696 mo
388.114 351.02 li
389.45 350.545 li
391.826 357.222 li
390.49 357.696 li
cp
394.292 368.378 mo
391.916 361.702 li
393.252 361.228 li
395.628 367.903 li
394.292 368.378 li
cp
398.095 379.061 mo
395.718 372.384 li
397.054 371.909 li
399.431 378.586 li
398.095 379.061 li
cp
401.896 389.742 mo
399.521 383.066 li
400.856 382.592 li
403.232 389.268 li
401.896 389.742 li
cp
405.698 400.425 mo
403.322 393.748 li
404.658 393.273 li
407.034 399.95 li
405.698 400.425 li
cp
f
91.856 389.3 mo
90.4429 389.19 li
90.9878 382.125 li
92.4009 382.234 li
91.856 389.3 li
cp
90.9844 400.604 mo
89.5713 400.495 li
90.1162 393.43 li
91.5293 393.539 li
90.9844 400.604 li
cp
90.1123 411.91 mo
88.6992 411.801 li
89.2441 404.734 li
90.6572 404.844 li
90.1123 411.91 li
cp
89.2402 423.215 mo
87.8271 423.105 li
88.3721 416.04 li
89.7852 416.149 li
89.2402 423.215 li
cp
f
146.537 319.211 mo
70.2603 272.48 li
71.0005 271.271 li
147.277 318.002 li
146.537 319.211 li
cp
f
324 400.854 mo
322.453 393.938 li
323.836 393.629 li
325.383 400.545 li
324 400.854 li
cp
326.474 411.919 mo
324.928 405.003 li
326.311 404.694 li
327.856 411.61 li
326.474 411.919 li
cp
328.948 422.984 mo
327.401 416.068 li
328.784 415.76 li
330.331 422.676 li
328.948 422.984 li
cp
330.646 430.578 mo
329.876 427.134 li
331.259 426.825 li
332.029 430.27 li
330.646 430.578 li
cp
f
110.272 102.354 mo
123.053 102.354 133.477 91.9307 133.477 79.1499 cv
133.477 66.3696 123.053 55.9453 110.272 55.9453 cv
97.4917 55.9453 87.0679 66.3696 87.0679 79.1499 cv
87.0679 91.9307 97.4917 102.354 110.272 102.354 cv
cp
ef
97.5864 89.4136 mo
122.941 89.4136 li
122.941 88.7134 li
123.831 89.3301 li
124.722 89.9468 li
123.831 90.5635 li
122.941 91.1777 li
122.941 90.4766 li
96.5234 90.4766 li
96.5234 81.6714 96.5234 77.71 96.5234 68.9038 cv
95.8228 68.9038 li
96.4395 68.0132 li
97.0532 67.123 li
97.6699 68.0132 li
98.2866 68.9038 li
97.5864 68.9038 li
97.5864 89.4136 li
cp
.666667 .792157 .870588 rgb
ef
98.4497 88.5527 mo
101.79 88.5527 li
101.79 82.7568 li
98.4497 82.7568 li
98.4497 88.5527 li
cp
.945098 .819608 .388235 rgb
ef
102.675 88.5527 mo
106.015 88.5527 li
106.015 80.6548 li
102.675 80.6548 li
102.675 88.5527 li
cp
ef
106.846 88.5527 mo
110.186 88.5527 li
110.186 77.6528 li
106.846 77.6528 li
106.846 88.5527 li
cp
ef
111.049 88.5527 mo
114.391 88.5527 li
114.391 74.8877 li
111.049 74.8877 li
111.049 88.5527 li
cp
ef
115.334 88.5527 mo
118.675 88.5527 li
118.675 72.1206 li
115.334 72.1206 li
115.334 88.5527 li
cp
ef
119.608 88.5527 mo
122.951 88.5527 li
122.951 68.8301 li
119.608 68.8301 li
119.608 88.5527 li
cp
ef
377.445 342.134 mo
390.227 342.134 400.65 331.71 400.65 318.93 cv
400.65 306.148 390.227 295.725 377.445 295.725 cv
364.665 295.725 354.241 306.148 354.241 318.93 cv
354.241 331.71 364.665 342.134 377.445 342.134 cv
cp
1 1 1 rgb
ef
363.297 307.759 mo
395.422 317.601 li
391.595 330.096 li
359.468 320.256 li
363.297 307.759 li
cp
.494118 .627451 .717647 rgb
ef
360.886 311.802 mo
394.467 312.992 li
394.003 326.051 li
360.425 324.861 li
360.886 311.802 li
cp
.666667 .792157 .870588 rgb
ef
362.897 312.855 mo
363.68 312.883 li
363.57 315.994 li
362.786 315.965 li
362.857 313.962 li
362.291 314.488 li
361.759 313.915 li
362.897 312.855 li
cp
.494118 .627451 .717647 rgb
ef
364.279 312.903 mo
364.17 316.015 li
365.99 316.079 li
366.1 312.968 li
364.279 312.903 li
cp
365.015 314.27 mo
365.27 314.278 li
365.253 314.711 li
365 314.704 li
365.015 314.27 li
365.015 314.27 li
cp
ef
366.664 312.987 mo
366.555 316.099 li
368.373 316.163 li
368.485 313.053 li
366.664 312.987 li
cp
367.399 314.354 mo
367.655 314.363 li
367.639 314.797 li
367.385 314.789 li
367.399 314.354 li
367.399 314.354 li
cp
ef
369.05 313.073 mo
368.938 316.183 li
370.759 316.248 li
370.871 313.139 li
369.05 313.073 li
cp
369.784 314.439 mo
370.041 314.448 li
370.023 314.882 li
369.771 314.873 li
369.784 314.439 li
369.784 314.439 li
cp
ef
382.708 313.558 mo
372.574 313.197 li
372.182 324.299 li
382.313 324.657 li
382.708 313.558 li
cp
ef
384.75 324.557 mo
385.534 324.586 li
385.645 321.474 li
384.862 321.447 li
384.791 323.45 li
384.264 322.885 li
383.689 323.42 li
384.75 324.557 li
cp
ef
386.132 324.608 mo
386.242 321.497 li
388.064 321.56 li
387.955 324.671 li
386.132 324.608 li
cp
386.964 323.296 mo
387.217 323.304 li
387.232 322.872 li
386.979 322.86 li
386.964 323.296 li
386.964 323.296 li
cp
ef
388.52 324.69 mo
388.629 321.58 li
390.449 321.646 li
390.338 324.755 li
388.52 324.69 li
cp
389.35 323.381 mo
389.603 323.389 li
389.618 322.957 li
389.364 322.945 li
389.35 323.381 li
389.35 323.381 li
cp
ef
390.902 324.774 mo
391.014 321.664 li
392.835 321.729 li
392.723 324.839 li
390.902 324.774 li
cp
391.735 323.465 mo
391.988 323.473 li
392.005 323.04 li
391.749 323.03 li
391.735 323.465 li
391.735 323.465 li
cp
ef
376.302 330.74 mo
379.233 330.845 381.695 328.554 381.799 325.622 cv
381.903 322.686 379.609 320.228 376.678 320.122 cv
373.746 320.018 371.283 322.313 371.179 325.244 cv
371.074 328.176 373.369 330.638 376.302 330.74 cv
376.302 330.74 li
cp
.945098 .819608 .388235 rgb
ef
387.2 325.81 mo
390.134 325.916 392.593 323.622 392.697 320.69 cv
392.804 317.757 390.51 315.293 387.576 315.191 cv
384.645 315.087 382.182 317.382 382.077 320.313 cv
381.975 323.246 384.267 325.708 387.2 325.81 cv
387.2 325.81 li
cp
ef
376.331 329.881 mo
378.789 329.97 380.852 328.047 380.939 325.589 cv
381.026 323.132 379.104 321.071 376.647 320.984 cv
374.188 320.896 372.127 322.818 372.04 325.274 cv
371.954 327.73 373.875 329.795 376.331 329.881 cv
376.331 329.881 li
cp
.835294 .643137 .337255 rgb
ef
387.229 324.951 mo
389.688 325.038 391.749 323.117 391.837 320.657 cv
391.924 318.201 390.001 316.14 387.546 316.053 cv
385.089 315.967 383.026 317.885 382.938 320.344 cv
382.853 322.8 384.772 324.864 387.229 324.951 cv
387.229 324.951 li
cp
ef
376.603 322.99 mo
377.833 323.033 li
377.658 327.919 li
376.429 327.877 li
376.541 324.731 li
375.652 325.557 li
374.815 324.657 li
376.603 322.99 li
cp
.945098 .819608 .388235 rgb
ef
388.161 318.104 mo
389.206 318.757 li
386.613 322.9 li
385.568 322.247 li
387.238 319.578 li
386.057 319.853 li
385.78 318.651 li
388.161 318.104 li
cp
ef
213.725 409.169 mo
226.506 409.169 236.93 398.745 236.93 385.965 cv
236.93 373.184 226.506 362.76 213.725 362.76 cv
200.945 362.76 190.521 373.184 190.521 385.965 cv
190.521 398.745 200.945 409.169 213.725 409.169 cv
cp
1 1 1 rgb
ef
221.861 387.708 mo
223.547 385.793 224.575 383.282 224.575 380.53 cv
224.575 374.54 219.716 369.686 213.725 369.686 cv
207.73 369.686 202.877 374.54 202.877 380.53 cv
202.877 383.282 203.9 385.793 205.586 387.708 cv
205.59 387.708 li
206.217 388.476 206.848 389.242 207.229 390.23 cv
207.614 391.219 207.75 392.434 207.945 393.177 cv
208.14 393.921 208.121 394.469 209.101 394.469 cv
213.725 394.469 li
215.419 394.469 217.373 394.621 218.347 394.481 cv
219.32 394.345 219.308 393.921 219.502 393.177 cv
219.697 392.434 219.833 391.219 220.218 390.23 cv
220.6 389.242 221.23 388.476 221.857 387.708 cv
221.861 387.708 li
cp
.945098 .819608 .388235 rgb
ef
209.101 394.469 mo
218.334 394.469 li
218.342 394.469 218.347 394.477 218.347 394.481 cv
218.347 400.297 li
218.347 400.585 218.109 400.823 217.82 400.823 cv
209.627 400.823 li
209.339 400.823 209.101 400.585 209.101 400.297 cv
209.101 394.469 li
cp
.317647 .321569 .32549 rgb
ef
209.101 395.275 mo
218.347 395.275 li
218.347 394.469 li
209.101 394.469 li
209.101 395.275 li
cp
.2 .211765 .215686 rgb
ef
209.101 396.891 mo
218.347 396.891 li
218.347 396.085 li
209.101 396.085 li
209.101 396.891 li
cp
ef
209.101 398.502 mo
218.347 398.502 li
218.347 397.697 li
209.101 397.697 li
209.101 398.502 li
cp
ef
209.101 400.117 mo
218.347 400.117 li
218.347 399.313 li
209.101 399.313 li
209.101 400.117 li
cp
ef
209.627 400.823 mo
210.269 401.465 210.907 402.104 211.55 402.745 cv
212.274 402.745 213.001 402.745 213.725 402.745 cv
214.449 402.745 215.173 402.745 215.898 402.745 cv
216.541 402.104 217.182 401.465 217.82 400.823 cv
216.455 400.823 215.092 400.823 213.725 400.823 cv
212.359 400.823 210.993 400.823 209.627 400.823 cv
209.627 400.823 li
cp
ef
215.949 394.469 mo
215.949 394.469 li
215.695 394.469 215.442 394.469 215.19 394.469 cv
219.229 379.398 li
218.588 378.973 217.786 378.482 217.073 378.467 cv
216.824 378.463 216.575 378.514 216.342 378.611 cv
216.35 378.623 216.357 378.631 216.365 378.642 cv
216.657 379.043 216.872 379.553 216.879 380.056 cv
216.886 380.444 216.77 380.842 216.517 381.146 cv
216.318 381.391 216.006 381.593 215.676 381.534 cv
215.642 381.526 215.606 381.519 215.57 381.503 cv
215.236 381.387 215.041 381.005 214.956 380.683 cv
214.846 380.289 214.859 379.842 214.999 379.452 cv
215.135 379.07 215.399 378.747 215.727 378.51 cv
215.485 378.288 215.198 378.121 214.877 378.023 cv
213.995 377.759 212.803 378.023 211.95 378.502 cv
212.095 378.634 212.219 378.786 212.313 378.966 cv
212.674 379.643 212.577 380.748 211.986 381.27 cv
211.429 381.757 210.518 381.562 210.25 380.865 cv
210.102 380.483 210.175 380.036 210.328 379.67 cv
210.522 379.21 210.857 378.81 211.246 378.502 cv
210.888 378.339 210.471 378.288 210.102 378.358 cv
209.401 378.487 208.728 379.078 208.182 379.585 cv
212.172 394.469 li
211.92 394.469 211.667 394.469 211.413 394.469 cv
210.06 389.416 208.829 384.823 207.474 379.775 cv
208.147 379.048 209.035 378.16 210.032 377.973 cv
210.553 377.875 211.137 377.977 211.608 378.249 cv
212.562 377.661 213.948 377.338 214.991 377.649 cv
215.404 377.774 215.77 378.003 216.073 378.304 cv
216.388 378.151 216.735 378.07 217.081 378.077 cv
218.035 378.097 219.187 378.868 219.977 379.433 cv
218.622 384.484 217.299 389.416 215.949 394.469 cv
cp
215.995 378.798 mo
215.711 378.992 215.481 379.266 215.365 379.585 cv
215.251 379.896 215.244 380.266 215.329 380.58 cv
215.38 380.768 215.508 381.067 215.703 381.138 cv
215.715 381.146 215.73 381.146 215.742 381.148 cv
215.925 381.181 216.112 381.028 216.216 380.9 cv
216.408 380.666 216.497 380.359 216.489 380.063 cv
216.481 379.643 216.294 379.207 216.053 378.872 cv
216.034 378.849 216.014 378.821 215.995 378.798 cv
215.995 378.798 li
215.995 378.798 li
cp
211.604 378.72 mo
211.584 378.731 211.57 378.747 211.55 378.759 cv
211.184 379.031 210.865 379.398 210.689 379.817 cv
210.577 380.09 210.503 380.444 210.611 380.725 cv
210.787 381.169 211.375 381.285 211.729 380.974 cv
212.033 380.705 212.153 380.184 212.137 379.791 cv
212.126 379.568 212.075 379.343 211.97 379.148 cv
211.88 378.98 211.756 378.837 211.604 378.72 cv
211.604 378.72 li
211.604 378.72 li
cp
1 1 1 rgb
ef
227.191 252.726 mo
237.884 248.95 li
238.231 248.827 238.616 249.012 238.739 249.359 cv
244.14 264.649 li
244.262 264.996 244.077 265.382 243.73 265.505 cv
233.038 269.281 li
232.69 269.403 232.305 269.219 232.183 268.872 cv
226.782 253.581 li
226.66 253.234 226.844 252.849 227.191 252.726 cv
227.191 252.726 li
cp
.666667 .792157 .870588 rgb
ef
228.887 256.566 mo
238.977 253.003 li
237.926 250.027 li
227.836 253.591 li
228.887 256.566 li
cp
.317647 .321569 .32549 rgb
ef
235.05 267.006 mo
236.77 266.398 li
236.229 264.868 li
232.788 266.084 li
233.328 267.613 li
235.05 267.006 li
cp
.419608 .423529 .431373 rgb
ef
232.657 265.714 mo
234.188 265.173 li
233.647 263.643 li
232.117 264.184 li
232.657 265.714 li
cp
ef
234.558 265.043 mo
236.088 264.502 li
235.548 262.972 li
234.018 263.513 li
234.558 265.043 li
cp
ef
236.457 264.371 mo
237.985 263.832 li
237.445 262.302 li
235.917 262.842 li
236.457 264.371 li
cp
ef
237.128 266.271 mo
238.656 265.731 li
238.117 264.202 li
236.588 264.742 li
237.128 266.271 li
cp
ef
239.027 265.602 mo
240.557 265.061 li
240.017 263.531 li
238.486 264.071 li
239.027 265.602 li
cp
ef
238.356 263.701 mo
239.886 263.161 li
239.346 261.631 li
237.815 262.171 li
238.356 263.701 li
cp
ef
240.321 263.216 mo
240.927 264.93 li
242.457 264.39 li
241.245 260.96 li
239.716 261.5 li
240.321 263.216 li
cp
ef
231.986 263.813 mo
233.517 263.273 li
232.978 261.745 li
231.447 262.285 li
231.986 263.813 li
cp
ef
233.887 263.143 mo
235.417 262.603 li
234.877 261.073 li
233.347 261.614 li
233.887 263.143 li
cp
ef
235.786 262.472 mo
237.314 261.932 li
236.775 260.403 li
235.247 260.943 li
235.786 262.472 li
cp
ef
237.685 261.802 mo
239.215 261.261 li
238.675 259.732 li
237.146 260.272 li
237.685 261.802 li
cp
ef
239.585 261.131 mo
241.114 260.59 li
240.575 259.062 li
239.045 259.602 li
239.585 261.131 li
cp
ef
231.316 261.916 mo
232.847 261.375 li
232.307 259.845 li
230.775 260.386 li
231.316 261.916 li
cp
ef
233.217 261.244 mo
234.746 260.704 li
234.206 259.174 li
232.676 259.714 li
233.217 261.244 li
cp
ef
235.116 260.573 mo
236.645 260.033 li
236.104 258.504 li
234.576 259.044 li
235.116 260.573 li
cp
ef
237.015 259.903 mo
238.545 259.362 li
238.004 257.833 li
236.475 258.373 li
237.015 259.903 li
cp
ef
238.915 259.232 mo
240.444 258.691 li
239.904 257.161 li
238.374 257.702 li
238.915 259.232 li
cp
ef
230.646 260.016 mo
232.176 259.475 li
231.635 257.944 li
230.104 258.485 li
230.646 260.016 li
cp
ef
232.546 259.344 mo
234.075 258.804 li
233.535 257.273 li
232.005 257.814 li
232.546 259.344 li
cp
ef
234.445 258.673 mo
235.974 258.134 li
235.434 256.604 li
233.904 257.144 li
234.445 258.673 li
cp
ef
236.344 258.003 mo
237.873 257.463 li
237.333 255.933 li
235.803 256.473 li
236.344 258.003 li
cp
ef
238.243 257.332 mo
239.773 256.791 li
239.233 255.262 li
237.703 255.802 li
238.243 257.332 li
cp
ef
228.262 257.771 mo
240.219 253.548 li
238.739 249.359 li
238.616 249.012 238.231 248.827 237.884 248.95 cv
227.191 252.726 li
226.844 252.849 226.66 253.234 226.782 253.581 cv
228.262 257.771 li
cp
238.977 253.003 mo
228.887 256.566 li
227.836 253.591 li
237.926 250.027 li
238.977 253.003 li
238.977 253.003 li
cp
.494118 .627451 .717647 rgb
ef
236.82 251.347 mo
237.356 251.157 li
237.41 251.139 237.472 251.166 237.49 251.221 cv
237.92 252.436 li
237.939 252.491 237.909 252.552 237.855 252.57 cv
237.319 252.76 li
237.266 252.778 237.206 252.75 237.187 252.694 cv
236.757 251.479 li
236.738 251.426 236.767 251.366 236.82 251.347 cv
236.82 251.347 li
cp
237.439 250.871 mo
236.577 251.176 li
236.491 251.207 236.444 251.304 236.475 251.391 cv
237.023 252.943 li
237.054 253.029 237.151 253.076 237.237 253.045 cv
238.099 252.741 li
238.188 252.71 238.231 252.613 238.201 252.527 cv
237.652 250.974 li
237.622 250.888 237.527 250.841 237.439 250.871 cv
237.439 250.871 li
237.439 250.871 li
cp
1 1 1 rgb
ef
360.043 110.734 mo
372.823 110.734 383.247 100.31 383.247 87.5293 cv
383.247 74.7485 372.823 64.3247 360.043 64.3247 cv
347.262 64.3247 336.838 74.7485 336.838 87.5293 cv
336.838 100.31 347.262 110.734 360.043 110.734 cv
cp
ef
355.356 98.9297 mo
364.727 98.9297 li
364.727 84.7002 366.16 83.4834 360.042 70.6309 cv
360.042 70.6309 li
353.922 83.4834 355.356 84.7002 355.356 98.9297 cv
355.356 98.9297 li
cp
.945098 .819608 .388235 rgb
ef
356.846 78.1289 mo
363.236 78.1289 li
362.515 76.063 361.49 73.6724 360.042 70.6309 cv
358.592 73.6724 357.567 76.063 356.846 78.1289 cv
356.846 78.1289 li
cp
.317647 .321569 .32549 rgb
ef
362.752 84.7803 mo
362.752 83.2817 361.539 82.0684 360.042 82.0684 cv
358.544 82.0684 357.331 83.2817 357.331 84.7803 cv
357.331 86.2764 358.544 87.4917 360.042 87.4917 cv
361.539 87.4917 362.752 86.2764 362.752 84.7803 cv
362.752 84.7803 li
cp
360.042 82.6885 mo
361.197 82.6885 362.134 83.625 362.134 84.7803 cv
362.134 85.936 361.197 86.8721 360.042 86.8721 cv
358.887 86.8721 357.948 85.936 357.948 84.7803 cv
357.948 83.625 358.887 82.6885 360.042 82.6885 cv
360.042 82.6885 li
360.042 82.6885 li
cp
ef
362.134 84.7803 mo
362.134 83.625 361.197 82.6885 360.042 82.6885 cv
358.887 82.6885 357.948 83.625 357.948 84.7803 cv
357.948 85.936 358.887 86.8721 360.042 86.8721 cv
361.197 86.8721 362.134 85.936 362.134 84.7803 cv
362.134 84.7803 li
cp
.666667 .792157 .870588 rgb
ef
364.727 98.9297 mo
365.414 100.121 366.101 101.311 366.789 102.502 cv
366.789 99.8301 366.789 97.1567 366.789 94.4849 cv
366.129 93.8296 365.47 93.1743 364.811 92.519 cv
364.788 93.752 364.766 94.9854 364.753 96.0542 cv
364.737 97.123 364.732 98.0264 364.727 98.9297 cv
364.727 98.9297 li
cp
.317647 .321569 .32549 rgb
ef
355.356 98.9297 mo
354.668 100.121 353.981 101.311 353.293 102.502 cv
353.293 99.8301 353.293 97.1567 353.293 94.4849 cv
353.953 93.8296 354.612 93.1743 355.272 92.519 cv
355.294 93.752 355.316 94.9854 355.332 96.0542 cv
355.345 97.123 355.35 98.0264 355.356 98.9297 cv
355.356 98.9297 li
cp
ef
355.345 97.4927 mo
364.753 97.4927 li
364.753 96.0542 li
355.345 96.0542 li
355.345 97.4927 li
cp
.760784 .482353 .431373 rgb
ef
355.345 95.6157 mo
364.751 95.6157 li
364.751 94.1797 li
355.345 94.1797 li
355.345 95.6157 li
cp
ef
359.854 102.502 mo
360.229 102.502 li
360.229 92.519 li
359.854 92.519 li
359.854 102.502 li
cp
.317647 .321569 .32549 rgb
ef
360.704 99.4097 mo
362.085 99.4097 li
362.845 99.4097 363.467 100.032 363.467 100.791 cv
363.467 103.97 li
362.085 103.97 li
361.326 103.97 360.704 103.348 360.704 102.586 cv
360.704 99.4097 li
cp
.760784 .482353 .431373 rgb
ef
359.397 99.4097 mo
358.017 99.4097 li
357.256 99.4097 356.636 100.032 356.636 100.791 cv
356.636 103.97 li
358.017 103.97 li
358.776 103.97 359.397 103.348 359.397 102.586 cv
359.397 99.4097 li
cp
ef
224.431 178.009 mo
205.688 193.407 li
218.306 208.764 li
237.048 193.367 li
224.431 178.009 li
cp
1 1 1 rgb
ef
237.048 193.367 mo
218.306 208.764 li
220.937 211.967 li
239.679 196.57 li
237.048 193.367 li
cp
.419608 .423529 .435294 rgb
ef
232.529 198.305 mo
232.05 198.699 231.982 199.409 232.375 199.886 cv
232.769 200.366 233.477 200.435 233.956 200.042 cv
234.433 199.649 234.505 198.939 234.11 198.46 cv
233.719 197.983 233.007 197.913 232.529 198.305 cv
232.529 198.305 li
cp
.317647 .32549 .329412 rgb
ef
223.937 205.364 mo
223.458 205.758 223.387 206.47 223.78 206.947 cv
224.173 207.427 224.884 207.495 225.363 207.101 cv
225.84 206.709 225.912 205.999 225.518 205.52 cv
225.126 205.042 224.414 204.973 223.937 205.364 cv
223.937 205.364 li
cp
ef
235.505 202.02 mo
235.505 202.02 li
235.328 202.166 235.066 202.138 234.923 201.963 cv
232.877 199.474 li
233.517 198.948 li
235.562 201.438 li
235.706 201.613 235.681 201.876 235.505 202.02 cv
235.505 202.02 li
cp
.890196 .894118 .898039 rgb
ef
226.958 209.042 mo
226.958 209.042 li
226.781 209.187 226.518 209.162 226.374 208.987 cv
224.328 206.497 li
224.97 205.97 li
227.015 208.459 li
227.159 208.635 227.133 208.898 226.958 209.042 cv
226.958 209.042 li
cp
ef
227.449 196.092 mo
225.591 197.618 li
219.538 190.25 li
221.396 188.724 li
225.293 193.468 li
225.522 191.114 li
227.913 191.348 li
227.449 196.092 li
cp
.501961 .65098 .74902 rgb
ef
219.764 193.171 mo
218.241 191.316 li
215.636 193.456 li
213.75 197.609 218.084 200.222 220.742 198.147 cv
220.911 198.353 li
218.307 200.492 li
219.832 202.349 li
224.293 198.684 li
221.075 194.767 li
218.471 196.906 li
217.16 195.311 li
219.764 193.171 li
cp
ef
219.842 186.833 mo
212.225 193.089 li
213.163 194.231 li
220.78 187.975 li
219.842 186.833 li
cp
.666667 .807843 .901961 rgb
ef
232.162 109.226 mo
233.292 109.226 234.214 108.304 234.214 107.174 cv
234.214 106.043 233.292 105.122 232.162 105.122 cv
231.031 105.122 230.109 106.043 230.109 107.174 cv
230.109 108.304 231.031 109.226 232.162 109.226 cv
cp
1 1 1 rgb
ef
108.421 188.48 mo
109.552 188.48 110.474 187.558 110.474 186.428 cv
110.474 185.298 109.552 184.376 108.421 184.376 cv
107.292 184.376 106.37 185.298 106.37 186.428 cv
106.37 187.558 107.292 188.48 108.421 188.48 cv
cp
ef
146.907 320.658 mo
148.038 320.658 148.959 319.736 148.959 318.605 cv
148.959 317.476 148.038 316.554 146.907 316.554 cv
145.777 316.554 144.855 317.476 144.855 318.605 cv
144.855 319.736 145.777 320.658 146.907 320.658 cv
cp
ef
281.954 331.504 mo
283.085 331.504 284.007 330.582 284.007 329.451 cv
284.007 328.321 283.085 327.399 281.954 327.399 cv
280.824 327.399 279.902 328.321 279.902 329.451 cv
279.902 330.582 280.824 331.504 281.954 331.504 cv
cp
ef
343.645 214.393 mo
344.774 214.393 345.696 213.471 345.696 212.341 cv
345.696 211.211 344.774 210.289 343.645 210.289 cv
342.514 210.289 341.592 211.211 341.592 212.341 cv
341.592 213.471 342.514 214.393 343.645 214.393 cv
cp
ef
149.599 132.417 mo
155.99 132.417 161.201 127.205 161.201 120.814 cv
161.201 114.424 155.99 109.212 149.599 109.212 cv
143.209 109.212 137.997 114.424 137.997 120.814 cv
137.997 127.205 143.209 132.417 149.599 132.417 cv
cp
ef
323.145 405.385 mo
329.535 405.385 334.747 400.174 334.747 393.783 cv
334.747 387.393 329.535 382.181 323.145 382.181 cv
316.755 382.181 311.543 387.393 311.543 393.783 cv
311.543 400.174 316.755 405.385 323.145 405.385 cv
cp
ef
294.783 66.9868 mo
301.174 66.9868 306.386 61.7744 306.386 55.3843 cv
306.386 48.9941 301.174 43.7822 294.783 43.7822 cv
288.394 43.7822 283.182 48.9941 283.182 55.3843 cv
283.182 61.7744 288.394 66.9868 294.783 66.9868 cv
cp
ef
162.654 95.7725 mo
165.176 95.7725 167.233 93.7153 167.233 91.1934 cv
167.233 88.6714 165.176 86.6143 162.654 86.6143 cv
160.132 86.6143 158.075 88.6714 158.075 91.1934 cv
158.075 93.7153 160.132 95.7725 162.654 95.7725 cv
cp
ef
109.492 128.944 mo
112.014 128.944 114.071 126.887 114.071 124.365 cv
114.071 121.843 112.014 119.786 109.492 119.786 cv
106.97 119.786 104.913 121.843 104.913 124.365 cv
104.913 126.887 106.97 128.944 109.492 128.944 cv
cp
ef
296.102 101.93 mo
298.624 101.93 300.681 99.8735 300.681 97.3511 cv
300.681 94.8296 298.624 92.7725 296.102 92.7725 cv
293.58 92.7725 291.522 94.8296 291.522 97.3511 cv
291.522 99.8735 293.58 101.93 296.102 101.93 cv
cp
ef
351.843 154.514 mo
354.365 154.514 356.422 152.457 356.422 149.935 cv
356.422 147.413 354.365 145.356 351.843 145.356 cv
349.321 145.356 347.265 147.413 347.265 149.935 cv
347.265 152.457 349.321 154.514 351.843 154.514 cv
cp
ef
394.693 58.0293 mo
397.215 58.0293 399.272 55.9722 399.272 53.4502 cv
399.272 50.9282 397.215 48.8711 394.693 48.8711 cv
392.171 48.8711 390.114 50.9282 390.114 53.4502 cv
390.114 55.9722 392.171 58.0293 394.693 58.0293 cv
cp
ef
57.748 360.815 mo
60.27 360.815 62.3271 358.759 62.3271 356.236 cv
62.3271 353.715 60.27 351.658 57.748 351.658 cv
55.2261 351.658 53.1689 353.715 53.1689 356.236 cv
53.1689 358.759 55.2261 360.815 57.748 360.815 cv
cp
ef
80.1284 325.783 mo
82.6504 325.783 84.7075 323.727 84.7075 321.204 cv
84.7075 318.683 82.6504 316.625 80.1284 316.625 cv
77.6064 316.625 75.5493 318.683 75.5493 321.204 cv
75.5493 323.727 77.6064 325.783 80.1284 325.783 cv
cp
ef
276.277 395.013 mo
278.8 395.013 280.856 392.956 280.856 390.434 cv
280.856 387.912 278.8 385.855 276.277 385.855 cv
273.756 385.855 271.699 387.912 271.699 390.434 cv
271.699 392.956 273.756 395.013 276.277 395.013 cv
cp
ef
147.036 388.122 mo
149.558 388.122 151.615 386.065 151.615 383.543 cv
151.615 381.021 149.558 378.964 147.036 378.964 cv
144.514 378.964 142.457 381.021 142.457 383.543 cv
142.457 386.065 144.514 388.122 147.036 388.122 cv
cp
ef
193.356 35.6294 mo
195.878 35.6294 197.935 33.5728 197.935 31.0508 cv
197.935 28.5288 195.878 26.4717 193.356 26.4717 cv
190.834 26.4717 188.777 28.5288 188.777 31.0508 cv
188.777 33.5728 190.834 35.6294 193.356 35.6294 cv
cp
ef
44.7881 164.722 mo
51.1787 164.722 56.3906 159.51 56.3906 153.12 cv
56.3906 146.729 51.1787 141.517 44.7881 141.517 cv
38.3979 141.517 33.1855 146.729 33.1855 153.12 cv
33.1855 159.51 38.3979 164.722 44.7881 164.722 cv
cp
ef
23.3887 288.269 mo
25.9111 288.269 27.9678 286.211 27.9678 283.689 cv
27.9678 281.167 25.9111 279.11 23.3887 279.11 cv
20.8667 279.11 18.8096 281.167 18.8096 283.689 cv
18.8096 286.211 20.8667 288.269 23.3887 288.269 cv
cp
ef
423.228 232.43 mo
425.839 232.43 427.969 230.3 427.969 227.688 cv
427.969 225.078 425.839 222.948 423.228 222.948 cv
420.616 222.948 418.486 225.078 418.486 227.688 cv
418.486 230.3 420.616 232.43 423.228 232.43 cv
cp
ef
406.366 411.79 mo
412.757 411.79 417.969 406.578 417.969 400.188 cv
417.969 393.798 412.757 388.585 406.366 388.585 cv
399.976 388.585 394.764 393.798 394.764 400.188 cv
394.764 406.578 399.976 411.79 406.366 411.79 cv
cp
ef
88.5342 427.738 mo
91.0562 427.738 93.1133 425.682 93.1133 423.159 cv
93.1133 420.638 91.0562 418.58 88.5342 418.58 cv
86.0122 418.58 83.9551 420.638 83.9551 423.159 cv
83.9551 425.682 86.0122 427.738 88.5342 427.738 cv
cp
ef
331.338 435.002 mo
333.86 435.002 335.917 432.945 335.917 430.423 cv
335.917 427.901 333.86 425.845 331.338 425.845 cv
328.816 425.845 326.759 427.901 326.759 430.423 cv
326.759 432.945 328.816 435.002 331.338 435.002 cv
cp
ef
54.9688 62.2935 mo
61.3589 62.2935 66.5708 57.0815 66.5708 50.6914 cv
66.5708 44.3008 61.3589 39.0894 54.9688 39.0894 cv
48.5781 39.0894 43.3662 44.3008 43.3662 50.6914 cv
43.3662 57.0815 48.5781 62.2935 54.9688 62.2935 cv
cp
ef
59.6699 50.2407 mo
59.6699 50.2407 li
59.4219 47.6445 57.1152 45.7427 54.5195 45.9907 cv
51.9224 46.2402 50.019 48.5464 50.2686 51.1431 cv
50.5166 53.7393 52.8232 55.6411 55.4194 55.3931 cv
58.0161 55.1436 59.9194 52.8374 59.6699 50.2407 cv
cp
61.8398 54.2368 mo
59.728 56.7974 li
58.0464 55.7949 li
57.855 55.9102 57.6543 56.0161 57.4482 56.1099 cv
57.3472 58.0547 li
54.0405 58.3711 li
53.564 56.4824 li
53.311 56.4214 53.0625 56.3442 52.8208 56.25 cv
51.3862 57.5313 li
48.8267 55.418 li
49.8423 53.7285 li
49.7354 53.5493 49.6387 53.3618 49.5498 53.1709 cv
47.606 53.061 li
47.2886 49.7563 li
49.1782 49.2856 li
49.2319 49.0654 49.2969 48.8506 49.375 48.6401 cv
48.0703 47.1807 li
50.1846 44.6196 li
51.8447 45.6177 li
52.0508 45.4907 52.2661 45.3755 52.4907 45.2734 cv
52.5996 43.3276 li
55.9053 43.0122 li
56.3745 44.9014 li
56.6094 44.9575 56.8398 45.0288 57.064 45.1123 cv
58.5127 43.8198 li
61.0732 45.9312 li
60.0664 47.6055 li
60.1841 47.7998 60.2925 48.0034 60.3877 48.2124 cv
62.3325 48.3154 li
62.6484 51.6196 li
60.7607 52.0967 li
60.7026 52.3359 60.6304 52.5693 60.5454 52.7969 cv
61.8398 54.2368 li
61.8398 54.2368 li
cp
.494118 .627451 .717647 rgb
ef
52.8604 49.7212 mo
52.3311 50.8813 52.8462 52.2617 54.0063 52.7905 cv
55.1665 53.3203 56.5444 52.8042 57.0737 51.6436 cv
57.6035 50.4834 57.0894 49.1064 55.9287 48.5771 cv
54.7686 48.0479 53.3896 48.561 52.8604 49.7212 cv
52.8604 49.7212 li
cp
ef
91.7446 393.139 mo
98.1348 393.139 103.347 387.927 103.347 381.536 cv
103.347 375.146 98.1348 369.934 91.7446 369.934 cv
85.3545 369.934 80.1421 375.146 80.1421 381.536 cv
80.1421 387.927 85.3545 393.139 91.7446 393.139 cv
cp
1 1 1 rgb
ef
93.5757 384.83 mo
93.5757 384.83 li
95.3965 383.819 96.0518 381.524 95.042 379.707 cv
94.0313 377.886 91.7354 377.231 89.9185 378.241 cv
88.0977 379.252 87.4429 381.548 88.4526 383.364 cv
89.4634 385.185 91.7593 385.84 93.5757 384.83 cv
cp
91.3472 387.691 mo
88.7993 386.963 li
88.9976 385.414 li
88.8511 385.312 88.709 385.198 88.5771 385.078 cv
87.1216 385.623 li
85.8345 383.308 li
87.0625 382.355 li
87.0283 382.152 87.0049 381.944 86.9976 381.739 cv
85.6011 381.1 li
86.3306 378.552 li
87.8911 378.756 li
87.9878 378.621 88.0938 378.49 88.2061 378.363 cv
87.6646 376.906 li
89.9805 375.62 li
90.9277 376.852 li
91.1064 376.82 91.2832 376.8 91.4639 376.79 cv
92.1147 375.37 li
94.6626 376.1 li
94.459 377.631 li
94.6196 377.742 94.7734 377.861 94.9199 377.994 cv
96.376 377.452 li
97.6631 379.769 li
96.4316 380.716 li
96.4644 380.904 96.4858 381.096 96.4941 381.287 cv
97.9048 381.935 li
97.1758 384.481 li
95.6318 384.278 li
95.5259 384.427 95.4116 384.571 95.2896 384.706 cv
95.8345 386.161 li
93.519 387.448 li
92.5664 386.22 li
92.375 386.254 92.1807 386.274 91.9863 386.284 cv
91.3472 387.691 li
91.3472 387.691 li
cp
.494118 .627451 .717647 rgb
ef
89.959 380.721 mo
89.5098 381.705 89.9463 382.874 90.9282 383.321 cv
91.9121 383.771 93.0811 383.335 93.5303 382.351 cv
93.978 381.369 93.5415 380.199 92.5576 379.751 cv
91.5757 379.303 90.4067 379.739 89.959 380.721 cv
89.959 380.721 li
cp
ef
391.469 156.582 mo
397.859 156.582 403.071 151.37 403.071 144.979 cv
403.071 138.589 397.859 133.377 391.469 133.377 cv
385.078 133.377 379.867 138.589 379.867 144.979 cv
379.867 151.37 385.078 156.582 391.469 156.582 cv
cp
1 1 1 rgb
ef
393.301 148.273 mo
393.301 148.273 li
395.122 147.263 395.777 144.967 394.768 143.15 cv
393.756 141.329 391.461 140.674 389.644 141.684 cv
387.823 142.695 387.168 144.991 388.178 146.807 cv
389.188 148.628 391.484 149.283 393.301 148.273 cv
cp
391.072 151.135 mo
388.524 150.406 li
388.723 148.857 li
388.576 148.755 388.435 148.642 388.302 148.521 cv
386.847 149.066 li
385.56 146.75 li
386.788 145.798 li
386.754 145.595 386.73 145.388 386.723 145.183 cv
385.326 144.543 li
386.056 141.995 li
387.616 142.199 li
387.713 142.064 387.819 141.933 387.932 141.806 cv
387.39 140.35 li
389.706 139.063 li
390.653 140.295 li
390.832 140.263 391.009 140.243 391.189 140.233 cv
391.84 138.813 li
394.388 139.542 li
394.185 141.074 li
394.345 141.185 394.498 141.304 394.646 141.438 cv
396.102 140.896 li
397.389 143.211 li
396.156 144.159 li
396.189 144.348 396.211 144.539 396.22 144.73 cv
397.63 145.377 li
396.9 147.925 li
395.356 147.722 li
395.251 147.87 395.137 148.014 395.015 148.149 cv
395.56 149.604 li
393.244 150.891 li
392.292 149.663 li
392.101 149.697 391.906 149.718 391.711 149.728 cv
391.072 151.135 li
391.072 151.135 li
cp
.494118 .627451 .717647 rgb
ef
389.684 144.164 mo
389.234 145.148 389.671 146.317 390.653 146.765 cv
391.637 147.214 392.807 146.778 393.256 145.793 cv
393.703 144.812 393.267 143.643 392.283 143.194 cv
391.301 142.746 390.132 143.182 389.684 144.164 cv
389.684 144.164 li
cp
ef
340.445 123.047 mo
340.445 123.047 li
338.771 121.81 336.41 122.167 335.176 123.839 cv
333.938 125.515 334.296 127.875 335.969 129.109 cv
337.645 130.346 340.005 129.989 341.238 128.316 cv
342.476 126.641 342.118 124.28 340.445 123.047 cv
cp
343.975 123.887 mo
344.369 126.507 li
342.877 126.97 li
342.846 127.145 342.801 127.321 342.746 127.492 cv
343.846 128.589 li
342.273 130.721 li
340.897 130 li
340.727 130.115 340.548 130.223 340.364 130.314 cv
340.362 131.851 li
337.741 132.245 li
337.279 130.74 li
337.116 130.708 336.953 130.666 336.791 130.617 cv
335.69 131.714 li
333.559 130.141 li
334.286 128.768 li
334.184 128.618 334.092 128.466 334.007 128.306 cv
332.445 128.303 li
332.052 125.683 li
333.529 125.231 li
333.563 125.04 333.608 124.851 333.669 124.662 cv
332.571 123.562 li
334.144 121.429 li
335.518 122.156 li
335.675 122.048 335.84 121.95 336.011 121.862 cv
336.014 120.31 li
338.634 119.917 li
339.091 121.406 li
339.27 121.44 339.447 121.484 339.621 121.54 cv
340.719 120.439 li
342.851 122.012 li
342.129 123.388 li
342.239 123.548 342.339 123.716 342.428 123.889 cv
343.975 123.887 li
343.975 123.887 li
cp
ef
319.8 108.477 mo
319.8 108.477 li
316.2 110.554 314.969 115.156 317.045 118.756 cv
319.125 122.356 323.728 123.59 327.327 121.511 cv
330.928 119.434 332.158 114.831 330.082 111.231 cv
328.003 107.631 323.399 106.397 319.8 108.477 cv
cp
324.158 102.688 mo
329.269 104.055 li
328.927 107.156 li
329.221 107.358 329.508 107.579 329.779 107.815 cv
332.666 106.675 li
335.313 111.26 li
332.889 113.2 li
332.968 113.607 333.021 114.02 333.044 114.432 cv
335.851 115.664 li
334.479 120.773 li
331.358 120.418 li
331.169 120.691 330.962 120.956 330.744 121.211 cv
331.87 124.102 li
327.288 126.749 li
325.356 124.32 li
325.001 124.389 324.646 124.436 324.29 124.462 cv
323.037 127.318 li
317.925 125.948 li
318.274 122.881 li
317.954 122.666 317.644 122.429 317.348 122.172 cv
314.454 123.301 li
311.81 118.717 li
314.239 116.787 li
314.165 116.409 314.115 116.028 314.089 115.648 cv
311.256 114.403 li
312.624 109.293 li
315.717 109.645 li
315.922 109.346 316.145 109.055 316.384 108.778 cv
315.247 105.89 li
319.828 103.246 li
321.77 105.667 li
322.155 105.594 322.541 105.544 322.927 105.517 cv
324.158 102.688 li
324.158 102.688 li
cp
ef
323.552 118.694 mo
325.584 118.694 327.244 117.033 327.244 115.002 cv
327.244 112.969 325.584 111.313 323.552 111.313 cv
321.52 111.313 319.863 112.969 319.863 115.002 cv
319.863 117.033 321.52 118.694 323.552 118.694 cv
323.552 118.694 li
cp
ef
338.208 128.043 mo
339.291 128.043 340.172 127.161 340.172 126.082 cv
340.172 125 339.291 124.118 338.208 124.118 cv
337.13 124.118 336.247 125 336.247 126.082 cv
336.247 127.161 337.13 128.043 338.208 128.043 cv
338.208 128.043 li
cp
ef
37.6143 251.218 mo
37.6143 251.218 li
38.2378 249.23 37.1313 247.115 35.1484 246.494 cv
33.1606 245.87 31.0454 246.977 30.4238 248.961 cv
29.8003 250.947 30.9072 253.063 32.8906 253.684 cv
34.8779 254.308 36.9932 253.201 37.6143 251.218 cv
cp
37.9702 254.827 mo
35.6211 256.054 li
34.6982 254.795 li
34.5215 254.821 34.3403 254.837 34.1616 254.841 cv
33.4824 256.238 li
30.9541 255.446 li
31.188 253.91 li
31.0234 253.786 30.8638 253.652 30.7168 253.509 cv
29.2642 254.007 li
28.0376 251.658 li
29.3091 250.73 li
29.2866 250.565 29.2729 250.398 29.2671 250.229 cv
27.8706 249.546 li
28.6631 247.018 li
30.1987 247.259 li
30.3066 247.112 30.4209 246.977 30.5444 246.844 cv
30.0381 245.366 li
32.3877 244.141 li
33.2954 245.391 li
33.4878 245.36 33.6812 245.341 33.8799 245.337 cv
34.562 243.94 li
37.0903 244.732 li
36.8506 246.268 li
37.0039 246.382 37.1509 246.506 37.2891 246.639 cv
38.7573 246.136 li
39.9834 248.485 li
38.7241 249.401 li
38.75 249.582 38.7661 249.765 38.771 249.947 cv
40.1685 250.627 li
39.3765 253.154 li
37.8398 252.92 li
37.7251 253.076 37.5986 253.226 37.4639 253.366 cv
37.9702 254.827 li
37.9702 254.827 li
cp
ef
44.6621 226.951 mo
44.6621 226.951 li
41.5254 224.225 36.7725 224.56 34.0464 227.696 cv
31.3203 230.836 31.6533 235.59 34.7925 238.314 cv
37.9292 241.041 42.6816 240.706 45.4082 237.569 cv
48.1343 234.431 47.8013 229.677 44.6621 226.951 cv
cp
51.5557 229.186 mo
51.9277 234.462 li
48.8843 235.149 li
48.7896 235.493 48.6743 235.836 48.5396 236.171 cv
50.5571 238.528 li
47.0854 242.524 li
44.4609 240.864 li
44.1021 241.072 43.73 241.256 43.3472 241.413 cv
43.0972 244.468 li
37.8203 244.837 li
37.1382 241.77 li
36.8184 241.68 36.5005 241.57 36.1885 241.447 cv
33.8228 243.454 li
29.8276 239.984 li
31.4937 237.366 li
31.3135 237.053 31.1538 236.733 31.0122 236.404 cv
27.9033 236.151 li
27.5332 230.871 li
30.5469 230.202 li
30.6455 229.829 30.7681 229.459 30.915 229.095 cv
28.9048 226.728 li
32.3774 222.734 li
34.9937 224.401 li
35.3271 224.208 35.6704 224.038 36.0215 223.888 cv
36.2759 220.804 li
41.5518 220.433 li
42.2266 223.472 li
42.5762 223.567 42.9248 223.684 43.2642 223.82 cv
45.624 221.804 li
49.6167 225.274 li
47.96 227.897 li
48.1553 228.238 48.3276 228.587 48.479 228.943 cv
51.5557 229.186 li
51.5557 229.186 li
cp
ef
36.2251 233.827 mo
36.8877 235.749 38.998 236.777 40.9185 236.115 cv
42.8403 235.453 43.8657 233.344 43.2036 231.422 cv
42.5415 229.501 40.4355 228.475 38.5137 229.137 cv
36.5928 229.799 35.563 231.905 36.2251 233.827 cv
36.2251 233.827 li
cp
ef
32.1616 250.73 mo
32.5142 251.754 33.6357 252.3 34.6563 251.948 cv
35.6782 251.596 36.2256 250.475 35.873 249.451 cv
35.5215 248.431 34.3994 247.885 33.3774 248.237 cv
32.3564 248.589 31.8101 249.71 32.1616 250.73 cv
32.1616 250.73 li
cp
ef
359.242 378.118 mo
359.242 378.118 li
361.063 377.107 361.719 374.813 360.709 372.995 cv
359.698 371.174 357.402 370.52 355.585 371.529 cv
353.765 372.54 353.109 374.836 354.119 376.652 cv
355.13 378.473 357.426 379.128 359.242 378.118 cv
cp
357.014 380.98 mo
354.466 380.251 li
354.664 378.702 li
354.518 378.6 354.376 378.486 354.244 378.366 cv
352.788 378.911 li
351.501 376.596 li
352.729 375.644 li
352.695 375.44 352.672 375.232 352.664 375.027 cv
351.268 374.388 li
351.997 371.84 li
353.558 372.044 li
353.654 371.909 353.761 371.778 353.873 371.651 cv
353.331 370.194 li
355.647 368.908 li
356.595 370.14 li
356.773 370.108 356.95 370.088 357.131 370.078 cv
357.781 368.658 li
360.329 369.388 li
360.126 370.919 li
360.286 371.03 360.439 371.149 360.587 371.282 cv
362.043 370.74 li
363.33 373.057 li
362.099 374.004 li
362.131 374.192 362.152 374.384 362.161 374.575 cv
363.571 375.223 li
362.842 377.77 li
361.298 377.566 li
361.192 377.715 361.078 377.859 360.956 377.994 cv
361.501 379.449 li
359.186 380.736 li
358.233 379.508 li
358.042 379.542 357.848 379.563 357.653 379.572 cv
357.014 380.98 li
357.014 380.98 li
cp
ef
381.068 365.384 mo
381.068 365.384 li
380.673 361.246 376.997 358.216 372.86 358.61 cv
368.721 359.009 365.688 362.684 366.085 366.821 cv
366.48 370.959 370.157 373.99 374.294 373.595 cv
378.433 373.197 381.466 369.521 381.068 365.384 cv
cp
384.525 371.752 mo
381.16 375.833 li
378.48 374.235 li
378.175 374.419 377.855 374.588 377.527 374.738 cv
377.366 377.836 li
372.097 378.341 li
371.338 375.331 li
370.935 375.234 370.538 375.11 370.152 374.961 cv
367.867 377.003 li
363.787 373.635 li
365.406 370.942 li
365.236 370.656 365.081 370.357 364.939 370.054 cv
361.843 369.878 li
361.336 364.611 li
364.348 363.861 li
364.434 363.511 364.537 363.169 364.661 362.833 cv
362.583 360.508 li
365.951 356.426 li
368.597 358.016 li
368.926 357.813 369.27 357.63 369.626 357.468 cv
369.8 354.366 li
375.068 353.863 li
375.816 356.875 li
376.19 356.965 376.558 357.077 376.915 357.211 cv
379.224 355.15 li
383.305 358.516 li
381.699 361.185 li
381.887 361.494 382.06 361.818 382.212 362.15 cv
385.312 362.315 li
385.814 367.581 li
382.807 368.342 li
382.714 368.723 382.598 369.095 382.463 369.457 cv
384.525 371.752 li
384.525 371.752 li
cp
ef
370.216 364.556 mo
369.372 366.405 370.193 368.604 372.042 369.447 cv
373.891 370.291 376.088 369.469 376.931 367.62 cv
377.774 365.771 376.955 363.576 375.105 362.732 cv
373.257 361.889 371.06 362.707 370.216 364.556 cv
370.216 364.556 li
cp
ef
355.625 374.009 mo
355.177 374.993 355.613 376.162 356.595 376.61 cv
357.578 377.059 358.748 376.623 359.197 375.639 cv
359.645 374.657 359.208 373.488 358.225 373.039 cv
357.242 372.591 356.073 373.027 355.625 374.009 cv
355.625 374.009 li
cp
ef
54.8955 76.812 mo
73.0205 76.812 li
73.0205 83.937 li
54.8955 83.937 li
54.8955 88.6831 li
46.5869 80.3745 li
54.8955 72.0659 li
54.8955 76.812 li
cp
ef
425.867 315.313 mo
407.742 315.313 li
407.742 322.438 li
425.867 322.438 li
425.867 327.184 li
434.176 318.875 li
425.867 310.566 li
425.867 315.313 li
cp
ef
57.8037 371.972 mo
57.8037 370.472 li
64.9282 370.472 li
64.9282 371.972 li
57.8037 371.972 li
cp
57.8037 374.973 mo
57.8037 373.473 li
64.9282 373.473 li
64.9282 374.973 li
57.8037 374.973 li
57.8037 374.973 li
cp
57.8037 377.973 mo
57.8037 376.473 li
64.9282 376.473 li
64.9282 377.973 li
57.8037 377.973 li
57.8037 377.973 li
cp
57.8037 380.751 mo
57.8037 379.473 li
64.9282 379.473 li
64.9282 380.751 li
57.8037 380.751 li
57.8037 380.751 li
cp
57.8037 383.752 mo
57.8037 382.251 li
64.9282 382.251 li
64.9282 383.752 li
57.8037 383.752 li
57.8037 383.752 li
cp
57.8037 386.752 mo
57.8037 385.252 li
64.9282 385.252 li
64.9282 386.752 li
57.8037 386.752 li
57.8037 386.752 li
cp
57.8037 388.597 mo
57.8037 388.252 li
64.9282 388.252 li
64.9282 388.597 li
69.6743 388.597 li
61.3657 396.905 li
53.0571 388.597 li
57.8037 388.597 li
57.8037 388.597 li
cp
ef
356.396 56.437 mo
356.396 57.937 li
363.521 57.937 li
363.521 56.437 li
356.396 56.437 li
cp
356.396 53.4365 mo
356.396 54.937 li
363.521 54.937 li
363.521 53.4365 li
356.396 53.4365 li
356.396 53.4365 li
cp
356.396 50.4365 mo
356.396 51.9365 li
363.521 51.9365 li
363.521 50.4365 li
356.396 50.4365 li
356.396 50.4365 li
cp
356.396 47.6577 mo
356.396 48.9365 li
363.521 48.9365 li
363.521 47.6577 li
356.396 47.6577 li
356.396 47.6577 li
cp
356.396 44.6577 mo
356.396 46.1577 li
363.521 46.1577 li
363.521 44.6577 li
356.396 44.6577 li
356.396 44.6577 li
cp
356.396 41.6572 mo
356.396 43.1572 li
363.521 43.1572 li
363.521 41.6572 li
356.396 41.6572 li
356.396 41.6572 li
cp
356.396 39.812 mo
356.396 40.1572 li
363.521 40.1572 li
363.521 39.812 li
368.268 39.812 li
359.959 31.5034 li
351.65 39.812 li
356.396 39.812 li
356.396 39.812 li
cp
ef
70.6304 295.08 mo
83.4111 295.08 93.835 284.656 93.835 271.876 cv
93.835 259.095 83.4111 248.671 70.6304 248.671 cv
57.8501 248.671 47.4258 259.095 47.4258 271.876 cv
47.4258 284.656 57.8501 295.08 70.6304 295.08 cv
cp
1 1 1 rgb
ef
63.6611 283.896 mo
77.5991 283.896 li
77.5991 274.713 78.4355 276.967 70.6304 271.876 cv
62.8252 276.967 63.6611 274.713 63.6611 283.896 cv
63.6611 283.896 li
cp
.686275 .827451 .839216 rgb
ef
63.6611 259.856 mo
77.5991 259.856 li
77.5991 269.039 78.4355 266.786 70.6304 271.876 cv
62.8252 266.786 63.6611 269.039 63.6611 259.856 cv
63.6611 259.856 li
cp
ef
61.7915 286.118 mo
79.4683 286.118 li
79.4683 283.896 li
61.7915 283.896 li
61.7915 286.118 li
cp
.317647 .321569 .32549 rgb
ef
61.7915 259.856 mo
79.4683 259.856 li
79.4683 257.635 li
61.7915 257.635 li
61.7915 259.856 li
cp
ef
64.6465 283.896 mo
66.6392 282.702 68.6343 281.506 70.6304 280.312 cv
72.626 281.506 74.6216 282.702 76.6167 283.896 cv
74.6216 283.896 72.626 283.896 70.6304 283.896 cv
68.6343 283.896 66.6392 283.896 64.6465 283.896 cv
64.6465 283.896 li
cp
.945098 .819608 .388235 rgb
ef
64.792 261.414 mo
76.4678 261.414 li
76.4678 267.258 77.1665 267.146 70.6304 270.388 cv
64.0938 267.146 64.792 267.258 64.792 261.414 cv
64.792 261.414 li
cp
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (kot) ()
%%Title: (1503.i114.004.S.m007.c10.business round table.eps)
%%CreationDate: 3/19/2015 12:43 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6CNCfBFY,SF'qtYHinj/6lAbmF^9clre=e/2"%iu!Ou6Z.)!Gk!KS`20J>Pa7qUoYdSTPE]$4W*QQ7-*CDDlecX"'`'pN,_O
%pkPJJ^U\Z5IeCZUYQ+Nac*TLRA_Q(goYVdK_a"(jq/=PrhqI(bl^)NBc`Z\"\[d07G'gj7^::nfrQ/[Kc0<d@j3o[J2lE/Fp[$o!
%qG3TQ?C\b-b+AFuQfYQGT3n,er;,RHoPRTg-PFm@I/%opp6<5j5EjqfqrOZ:5!?NiZVK/bq;'s+ihu[G7*"f3%mE%d34h8![J@e\
%oo%9,]k.r@+5rXfHSkT.5IMF.fLl*PbL-=7p36=BCI*Fdr0d'G^[nuHIp(=2:X<@>hONGn?XHrSI^0:R^CT[tRubiY5CITmk?luO
%Z6/Oa[*be$r>Lo)5#n]uJcD5;J,371$Xru%.,b,Lbmo6?cZ,.,=l9&9PE53mW!3u0A\X9)5WJN=-m,[W=G#G%?,"$4]fY7Xa&nAF
%k"(!hs'mmo7:a<2(6<7%io[3%E]hrJM,"=4rpB)sHfaV[o<U[[AFn,[Vm"B`HqSj3F8+qpJ(i?Jrc7RJhHZT,r9ikJcDF>iR^EtS
%?b\Y6YbCJ+s7sV_pW),]q-S(1gXDWFcL,L9?XLI^>5Vp[Vt%B+]t$6crT4Mm2u#mlrVGmG\(AB-7uq,=a!mjj.9V-*RuG^?fZ[:K
%`6&U5q^]\"oc.njX72kRM2%l'`&@:lDpH*W^\Z'*RC+48bdPiHEHD+o\)CQHFT%!43UV6Dk4-K=D0'Z?GBPiu&`RHXO8"[[FSt[,
%q"W1<?>Zl!Yo'tFk>0F*)g7f*Y.sJ`mf(&[fdkplp<eukfrqRGJb(D)pkM*/Q%%=LqrHarrULa`f5G!qo'5i4+9(2N%prVW38=B1
%m,d'rN@jV"c*(LPL]-7'Rh,Lc@f0`9diVMs5;hY#R7+C!RI"mi'(PjYIZ^-",4$AppieH=;4H/'h95PQ:X<DJk_[T5EcHDJHF)Q`
%fWQahFa.bmG-<M!rQ*h#qn"3Pg&A@kdB!8%4`#O^aTo13^t(C^!<.P)31si9s22QuErNK>k1"#93ScTr@iTTc?b^*cIs1MXfu<XM
%1OICAEH?I!C@eX,2m8k&(Ya*lB=k>9TD&$Bq"n2e@-?OWXViL:D3j:.ZGGD$T(T)3].`P(3kK]\qsK@_RNCN6j6nbW0C,T54f;qb
%IWP>EqVqGHP5PaEQi2?N0'(i;YL*m,[.IM)Z6+?k2LFU4W,$dXi"oh.4*#^a<!s*i40;3-RAFE>SDUrbS#]n'BqfP&gjZg0mIg.k
%]2*TD3tB'ZnA@(pJL:l(WD'p<CKq1X*Rpe_1IeT*I]pEqc?WXd*>m<m^@:U)pYKga0.tPb\2f!9jn[*o4+OhbGDuDDmG4Ggq`]7&
%(jF/-#PUc=T>e$@nt\AfAJdLVO)sjK9d@[FW"BPpP6\kn.Ik$b%H\?^$XcC.TDWWX;.i%]T=m9Eq;ma>n?$OkrR:#eb:be%k:^^J
%DpH\#\9P6W5<ln<.=CaOS+F6JM.PZF[,`C/plt"9aEp"qG@=.fnF>M1n%EttNUiKoQi#e&dF"/0j`bu^f'f84gjO6`Aod=#s.?@X
%5@*edS"J?ks3:5FJ,dpYa1j[K4PTe/[JBIM1n_1OdBr^,rj/f)rS\HThq3F=CM]sb'>J;mo:50&<n!T7_jmS6#sH4i+e_]f>$Kb+
%+$RX76PK@72u)">fMDNUZp/EE[/"t<DuW"<?N&6"Bj]gH?Wk]'(iK?;LHjGhfK,$7%L2RGAm;k*g:)N%Z%\?VgnNJnDRPXbEnfl'
%+1Ai_qW2^6F7"fK9G*`>nN;Moa2m,l34YKd"8:=:ktU]il%S@bB,\c;0:q(iDdsjHm/5g,2>>G+.=C^7rqpjsMP[N6DGQmphqid:
%A\Y_I%qes^rJmd.9_tSR7_J$d)K^>Z6gA/gn8Sqj_+1DI[e]p]ZQB\Z[OD-#rXt+dl-2.^pqt-"^Uel:p;jH;C%K050/'K0_3)"L
%S+@G7m`nK2pd[7AnE/m*0D_.3oTd+50>BWaG]e(NjfRP)a1o!\>(2J2gjK8FO2(\PIpLlZp@[[pm6;I1psd#sou6m<?_:Z;=W6<:
%[uWAY1+)#J]Jm=os7nT<<A2X3!=dAC.@\a]cgH8$3I/Vdm5P'cn&8\<Y-/o4qRqGd>eg4%m+&EH3L[\.:%@Wb&`,\`cWf`,dh`g5
%cT2ri=l$jhidZ<Pn<:&JcPFn$qm"6tcBiHen#e=Y#OLooFGp.Zp(X5AmSICMcek^OM/u&aaS2`"s1OH`mH8uq*pi@1!D\)jEW5OD
%%i^93mDlt%42#m^M#VSrlL)i./\/@g?81g1N9n`oo.Rh*(1UL9IP8_7oZ7%0]Hd89):-]O(@.H&%I'ANacMJ/r:Kj^D<#n]I:kmc
%ak>j$Epc,,G_ZfXDr_-Y`_Weqgq5aZ+NSoiOoJ^/_ghLCB>77kbB#;ic^2G6B5NV+k22(!0Wk9Lh>m!]AMHL]IehBtL3`R@Ijaj(
%oH_mF]6nVllBg8m-TBXZnRp,"_)'u8rUC$.IrY#@k/0i%--nXRqoul/,CErX?f,+<EH?;MHiE^0<q9Son&6-]o]/%4s5'8PSDQKu
%p0QI%56glC!a`XU4241fd^)EPfD9hK^(:5+chW(:\W/<$94U$<Z\H'Kr-L0LV[qh<ouGs-N;"FhhT0,$MA^nHMoko:qg6^:5DLII
%p\WFEgX#ol^$*Mug"knne%=*'d$a^#47b[D\M*DSLN9Tk5H]$q</9E%qXi==LYUkZo_,>@h#I*@p"dN/G"ms;h$3%fp%nT2(a#:?
%o(lgV2152Bc%g6*XuF*U]tHKpbj!$SIe_(t2Ic`VYHG$8IWbVODY&Q+2W!$Yr:V&VfUE\5+g`[ZCcu]CT>!M$g"`0+^:E1QJ&"%k
%jR21&lLsnM/`4`im'GlYXSI@;4kNhLG^=H*iqi<0e`Ps7pF@u=rb/'$[,*CXqIEeDFI#YnAE00@:9C@gnp&WfhhNT6me>\^`k+Ef
%RX//+%Ti;ro]kbkgJ@:_kMB*c@Y3Fhc.?Tthk'fBNZgK^0@'<FU#"jDo>SPjJEr1bF5-Q^4a3AY5N*f#UY?l_h0unN5ij'R!o;HL
%q":,gf<tpVI`."gfXI'nX"W>"IW;gljSJQ75-CC$QgUJPh48KNFIh9k1n=7Xg;19Y^H1-)hVDFdFnXVAG;d!A;tX^lH\'!=W;d;"
%Q(S$NDT>3&de5W($f5[s6)_iQn[-?>^A@>c5C[`o1$7Tlp'P%fG;h$6@DCEta.Bg?qX!?%+s3BpkKAeTf<up_a8*(/a=iWHEk"O7
%:Y]ntO1o3Gr8tu_`TbprPo]_cci8-o`QNaXNNc&nrPQ@Be^+6mqYK=amC&X9qA:#4+?Xnj5QCH;PKgV,2nujlJFqEIA_Z[mU;H&(
%7#-hNqYKi\:%LRo[f?3hme#LH((QsFqU!9\YCF0Y!j&iFH?o&Ce_/$)GfCQ4=$O<EIJ;"[m,I$uJ@-F^o@o?*'k[,ghD[^?B8kj2
%qW0o1J&Z$P^:ZOWq5gPnFO`O,dp#oCGIM4'fa[\jo[0/[(Y0&-c&hil::Bu_fpAUDTC9.D\%gm#Qm29r`m2-/!_:,UDT3sqDtD<t
%V^[Y,i-EZ%/FAgQbhqu$jh!^D^?^DsCrZ9T4rEu^S@;;9A*`ks8o:\iDa+$Ba*RU#@unmY'9C]6=Su3\p$_U^p>$co[`e<F*ZIcH
%gki\QVo-"?e?mB1SpDk-m&e>*[a']!95jh!nL*@K4pR#$=8BKTaI>u_]_MF$!qF?Y1=X42nG;f:S"H:dr!K1oeZ8@4`q(7co!.T^
%i5oP8Vg"V[4hl;crMSEC:[C%<h:;=nf4SL+e]4R@+3s*,YKuZoS4a5b[SQfr@D:X]*l!2@S.B8&&+/N,V[F[,O'dimbrq'[mdtBc
%Q!,6]Xi#q'.uRG4CGD'O5I<K2]ge(-be?&a^O_6+0<];#S\83pY0E#WFa\K6pE0=fa(MU$hd#T+huA.D'8O(P*V0SC?r--D64/#8
%6ce"DX`7\fjVoZDD-a1>brr&sT^Apgdf/l9\bod?hsLX<[T`jAOj<K,V.eRV57gQX[Jfbc$2Ni-$CdZ9o'*WN/[TtA](F9\cBfG6
%4^n*>4YgM^oZScU2a3b<Y\u/(]&'D,S+A.F("]qXb>EV$\*iDTa#dMhO8n8:`UR_*M`7LI54$of4+-nsio5f,[pP]@IUN?WC,^:9
%m;C3c34EPailr-29rGbY0pTdL15l4jAi/P9H[LDL!)3%">e`PDbm'C/b__?1++/?ZCi;Bs?^0!H?<O%s@D9DPk&&SVfCJe+b9s4V
%`VJ?O.3<`PY-?g_obWs%*LffJp?MMGc]8guY`lC8Bn(DSo@<4oqmA08J,Pkk1ZQJ>`BSQo@P>9)D4RpJcF<lKjai%[h;2EW^XBa(
%f#onP^DG/.h4=rE/T"k0]"EK7G&d3Q?G(a[jBEAQ\nejbUp"._Ge:FZZo.FC%\q-NN`01g6Yj:U/(Sc$Sf_fp0D'"-%p:F*FN521
%T0K[Dh=^)Hoi%u2p:BbehQ$OfIJJH]0]Url2D;etHusH/p"@S7>7JncXVgKoD9%EqpNWa:-Vc>$PAtsCFLs1J[QA"5BLWs3'+EmN
%g$SSO=)1k#<Nc/7j,)Xh::Ar=E-Q09dp"Q+-X$BGof*r^`Q^,tjV(?p?=2BkhnbTI[W.u)Ep::<%*mTGhn2"a^,ZF=cAEqA@EZtk
%-Md6/k!-n`J#!scpa91P55`CigNT;L)M.gF'Nf9sqssC=CjFd!%DR@$Upi!a?bH=!/Z_R(?=)I%FY?so44ArXI4:59dMD3/o^t#;
%_]-=,!5,M\Xq5+B<gJ\V[kP\4FT\t<=SL[gGY;8qnTX/?]-DD;bG1E.EI.te%sZK+DW%E2]tCn)rDX`WNoq`34k1%Nn(YIDVbVu\
%$gmB$l-8VM(@]$\n`2iSYP$`N\=RHJJ(6YK!nut^1Ks6nnr1Tc4]sj:T3pCp^UeZAql/!/S'S8K:#li>h7e0>SB8.H>.6EFYKu(&
%&6P,4k7Ep9[ck3@=(bm1hX/1Y*bbeCL[eD`ha;'j=3oD1Dn?9.Bk/(`>j$1ZnFfMJ?(JZG[a==+%UPYUlecSD<o<YE=^0qbIsufn
%htN>3[I7;*Rfg2bPXh0kZ).T(2>$3ScTAVE[_%97qE<6U0"eZC'u%]:qmu\M/[&NrHlL+7Mqb]m5?kdHo/tdGK*S$15YV'fIE%8_
%AtQiKHMP"oU.0#4=Z4KMce.s`l=pWcGY>@j[0KVap\;f7s)Ru4oP.e)9iKjFlKh<UN*gg'8V;W+0DqroP;\c:DdN$'s67_u]<d2-
%hH.NX*)GoOiVW>9Z8:`nErP7.MbhW95!N7T2ZN?il0[<rPV.O0@@-13/6BTr3IM&SN\FXWcTaNLH`U[=FTPL']q/"SADlCFqqmRY
%k?EF0O$2N=qj,j_YKoBj4n/CB`S$"WX<!4Ul(K3te#UsREZ>uXp:q[i,l7[smJqBi!.'6S#ReN,;:ss:a`3M1JXe`;:1!kf#9SWg
%UWpmqD(X>r[A`TPrUQ`.:Gs;Bp?*,RZc:]Q'<hUh[p.Te5<+"qq>L+@*7squibs2%?:,/#1Z21C.,thfqV_tA%-3E.2"`g/R:7Wt
%G5MnlCbmdqNiPO(*;A*+!MW"YEt$SR3h?A_&I>r+@%N]LquQfVcR8RW5:h;DhgDRJ*nO9k5V.tuD_V=KUu^;U&2fXL4/9D:[$hp_
%U"#Jpbh7/"qA=N?N]j2_;%!+Yem-UZ:hJ1lCH$!Ga0q'E*t>%eQYo#,eUATVPs\-`WO1>L"]I:$,G>cJO3Y]_D=,`tNnZB,UIP.R
%g_sO5TBpV+pin_hfEM=RR:bp6'RMT54miK7L2^rrk^6gIhXZB*p#FQubSTDf>Y;,kQ=Ke8ZTG;BCIeeLDX;J]g_e.&A:s"`HTefk
%7E6eA<_o9)m.53R18m*0Z.'4RPn`O[cHUZ[3/QD?WR],lRqA6=X@00K*l6G"b[#t;Ej_dqF2EqE;jaV7.)#M`[;\7)))IUQLHmg5
%Q4:`GSGP!MLc3hUm5Z,ZotT7%6sI"N4pN(-UH!I6DtS:n`l9jU\K'@]G7Cp4)5LZ`f164$(QH*MkK-Kr(hd]P@[k9&3$[N%#6?)S
%7P7*<=Uu0M"^?.32L*dgV:ntu)f8c[@;X&uKqP$iD?e5F,BHp[dCrVf@^\pNmF\76^^7r.m.P0V$PKoP84f'1GYUi*XkBS!i]#k:
%%5t>^frscWWQY"F9n:J9pGDWigp93!C`ml[er/,.#ro5sI@k#UT3B(leTs@NKN@eF9tdOLq)BbIEi[6_(]/*1p-T@Z]fB96OFjT'
%_D\!TD$4'?hsrePZ^*@7Nm3SadV5tOl*eQ3G/e]J^Pol$mOTV!Sb"(QhN!]2_tG:o13IE=agP.94AFH0'f.u*&&l-/U]&ID@CE9r
%fhA,/_O7YlD]BqFloeC00>i>#A1%ROe$_T3_0^-oHc:S2e_!_FaaTXp7D`RC11;fg.SX+HglG[JpDdURXG]@QcFRLu"B=+jF%PF-
%G"2"9>Hh9D(gOH$YB[M1[[\[]jHON?0fE6m.GG?O$WF?`%pjgdYlb#3g=c06)ocD^1k9[%J_S^h?.d3h:nOsM_.]7WbEuI(2Yl8E
%+ka:QUfJNHnCWoV;;5<`=uOS1k)APa!W8ql0Ps2]4"^`lr0-O&J1ErVf_CtZfg\s-i)Yu'E=D75C0ur[9E@Y)c9*=#7I?4@'+RnO
%Y7JXAG3@Y@Tj=jpg'-5J22kHSPI6.jPAd'erE(R_^$.tpNh%Dajf7u)fiH7UNHNh?&<]r,iO+LPeL?\VWFgXc3DZ=%*jsgB#;oU2
%Hc4\$FDMaJ8-dVU?(LW^G1aSCCS%jL=2Slg$^tl`Ces"b9"$`akOiTQaAu^N_aq9HN>^]tZASo<1X4p]?mZa1gl@:eDW=pRh1%Q5
%fR*uQDC3!"4`=ta(KpjCT&V0OHIY#f[538E']Uii(dU`.K_K%>H_"HY?&1!40/V7HJX0kHq_mG`UG9;nNo]HE6'?)^B_s;=>j?KM
%ClQE]a=Q]_!o#Q_(\PY5Zc5)H3293d`hj4^GZ;;>XG;R0\6YZXDh$PYU?iB;J1=Taf.s:m?,\ktd..CuR&A(7c$ErkH\;4A\9QHP
%2<2jB0QC(&QY[epGh*(Cd5:Gq!k5NaEFIS7O%[HhU-q^PSKt)"A;Uh4'5<e/T5p.N@k>hPerA7"*SH-PN)0#d@b4DDr0rme6>Mt<
%9AVf82bCq*O($UAB=k/8/0l^LQ=S#c"a&(nku'<K5Po$2n?HgUPo)UL60B6>BnBTopT0A$`!_nNH,Zr1nTK';hqsj.gWFC;*.26O
%\L(X%40%Zfn?nI,1cpf,bSr6<8mOrqq^1&`)fjDX>B!CuD31N&fb%":Q^n$1Z]Kf1=l-ogW#*2=U+Q=,\OX&;(JMp+lokDuC90..
%Fra^VGiR68L!%f'Z0`Ui:"Afs_qEeIcKTZhNmTNWK74]]DKG@@lGp,N*:X@iDJ20hd9ssH%*&-9^_&=#=?<qlDL%F4X+m6h0c].]
%1\PA*ikfLd8L-l8"2+CZ.CS19q2@h=bIXM'WO?`t`S+"<16O3q=E!92^sNBu%MFb<D]5M^m)oNG`/]9JMl%V-4jM'%N+=kO!B1:G
%m'<r,>gp8,5n.5P$"l7TOa(;ee1rBYUmh8818`A];C@\\8@Y:3*<bC3;oWKL[3\?+ln%=+FUIL:j7mVT)KA^-Btn)08f#7imlalo
%e0g7c>(k_Q?njN=n+,6QT!_SbF8*)]7H34d3f@2.pQ2Q#2"gpVPEg!i?/7(#NH'KX;a2sm_-$P5GTA'NO3g7TTI',/`+<dqm8J">
%WhrrGgG&^qkRfYQg#QG%RL-0D@nDY1Q>1Cs!:+N+J?JnZ#o`]bmT\MR#pL338mM&>c>s%cTQ6Ps-L66\,=,JA)\>tqE,&7uKZPu0
%4*@ucf\k=uqLYiTM0(OF<%n#9D.MkZ-8!LUo6D#/I1sPO9MrRg%`">O3=afJG.Cuj%]=9X3jJ.5HU*1_Bpp>b;T-AF7@/RbRO(tm
%-D]"',b#A"3d*HMNkddtm1.IK9,;^<;A$i0E$sZ=mo5Z%j1m?N5f4(0at^?cS("<>ScG13Xes/ED6qY+"-I6!fM+(cOGd*PABPk$
%e4)lA'h,mk6PZR:j4:Ys>q6WXdUk6Y`F7+sZS?u>,Ju:SGf,$oaA582fMg;&Z0+`#`Q%U"Agg2TB<dW!q$<uL&KocR-bg+,6E"nY
%<eWXXn'-u7)WNuG2nt2UZh@GN'O`NEac4$nYk=/6fMWVWC7!:X-ZfIDG+uR?I4TWmN^_&]]ee5La2.Q+e2^F^(/XR'[_m92PDfs<
%980%W4Z.HM6p$'U`CT?2ZZ`'W%s-nE!Sue<V6V_XK[n.,7h`]YG-pf6dJ1tH^k]H-:,+12Rdt'98['gGMt.B1s/(&a9<I&Jog@EG
%BH\qag/7be]@W!Z4;cTA@$kHT9^SEKFN8PrmBifY]]lH%1?4b]LW.t^/Cn!?g2OXYnm^=a$t6Tf`(7+l9H05pdKF2Eq6^$-dB[iu
%#iIBNOfoYK+h'O\XnVGfM&Eq=#O\_ZkF4VbJ;-ic-(/fl*O+SYp"%i.a1r/6)T32#8JEXL<aRrN.V,#oDCdl?Qk#>1_9=o@i+(Df
%c+$@+jd#=bZ3J+MQ`'m$:MQSIFZ$eTUB>,;$V8S/@32cDCnUC..%?GA^+++E<+G!!S<GO'TPDq\iL4^SJ^cJUrsmeT9N"]n)CNF%
%3OVO,>4=H7AJ?^7dO8pP['9EtCS>Uee:SgIo:W$UE>FD20M%=--'a:cad)qp*G][FA/^JX,0,><'!`3CKoE'Rb2RZS:?8)!j2iX8
%%;X<uNLaJcK@FVbU(5o>1nL9$d+iYF@3J$@>bR_;8?MH*2XmU#)/8fj<fG9tU`Cp/NFR$u7C%7_OCToIkd0t1N+Zpj*O]&T3ns$K
%Y@;-sP^Ia!<:o;".9>%MJZA-$k-c+]F-8j/4=LEdY)F:rj@8m(mE\G>%EiD2l<9OJiU_2s\K0P*o?991Q@75F2n35V'X3pmC_Y:[
%%dsDpN.OlipUOurfJ&du_.RI4jm,NuL#6`1\/q0PRn3:"@mAAQ@AM95d:ZPdn@GUg\nP0Q#64*2\_$?;S1qHUJr,_/C`CFu@2`F>
%0r#FJUCIe29SjO\QGt7g'acokJ[TgXHNfaj5>.J+cW[]X_hN=\2kAD%G)#IK:%Lb0q+n)=-."2PeC8d-YmAJ%rh;2j^bE3tCdb?2
%ik4Yb]X0RH>@9,7'e'cTa25u3b$Pr.cQq-H$r[a0-J3%m=0+b$OXp[=JL9WeidPdL+a3T'Z'A*7N;6E7[_sCE,g$6R3ldKfWAg8*
%CR+jTce;>g:(?QRY_^-VT-<_G_$2enF;H4Q+!V(iM7Wsc$u$p>r8LRXhD/(YO[CtX5LhbBm8Fs0VFQ>>Fp;i<P\JEp2o4Q-%bG=F
%>M7fBBbgN+ljqSG02HF?q&RRnLNAL?QF4b(EL,hi<0I?`/fHc2ph]!X"[<;%8t>$/DLh$Y*f_u"KjnYJ#p'QM`bUcm'*,9[>Gjk]
%A!Z'gTu^<!]OSB-@;GU\V8FqAE)4cc82[qt('g[Js$hW`%\u+)gZ)H9gR3@^]$(";P>Cs7G[4p0@?TT`7dY]t,Gjh1VCDDrg8)sb
%dpSXmDQ/?!J.uf5?s#_]'r8*uiHh;*S!G^4r7EKralRjplTh=kD30-@,q(.:()2\DKMqOh.J8R8<mUks*<cqFjPFM;@"re*K<r2:
%4'5<=&#:ON+hm8S!)-)3&lue4d]CuT@i2?3;8:eD1/6&!n;Tc##&>o22K6jTULkElle'?<$IeR@85mjpnEJ07XJ1hCJgO\OD7B\[
%r\\m+Q/E`Y7c)R);#lYKiX;V>Vn!L&(JMWcl;iK_F=X5"Cpn&c28>NHR!c607]C%hZaT6>^O(G?h?l1Glsk"9o:T?'9hL.&AG<Kk
%*d_j\JI0aDPa@VZ`HV."N>*0&+gfQ._0/bYnD)s)YgL]>);B\R,LZ;q:(3,+3/9ejqc%+?Vn[DYiKSIiG-@YuFq4N-8Oe'_1fLLh
%?O@S]ne3[F!7ira@_6gr&LG<1=C<>`Ue;BVZb5`1B+q)pi2V>APZs&94hB,GFc[L[q(<a`:cQ8B@3_reC,(!l]+Ht;$9li`6E:AM
%fYm)2jW_^MZ9m<rFn<5m]%cFD_gHH^?7IR:lJs)7,O&-YVm$WhKOT`hNnraJb.&[ZLDNAFo]@,G(S!tk(7Xna)@GDg*.0ihC.%_C
%lr93f/'R;JDBWg@;PYkMjD`=<$bVb`"<(\Xp)`6PIcPcJ5cQ:/ok=4ApCpl3]Xi&P^rSc:?G].V_$,)@$9`Z/nd9bdYRq$%j^N/Q
%busIBV$E9[X>MX&P=I#)7khT_M6kfRT#,H07t$_(:oc[C!Z[1XnPPca.fSYj$>ikrD)p\.V$%M@4>B4fWj\rTC1JVZRLX>s,BWk#
%+)KEX[fp`4NSkYh`aWCfj[@CZk7%>[Waa!.N3bs4d=_O;G]:BR?DbhHB9A21^1`E2L5M['D'RSS<(fCu1_MQiVR`6-a"=*][YM[)
%-]^t0grPoG#MK_D^K<BS;TZ4<-@5%>4<C3sK.bEO`d'U&hjR2UQs2WP7[-f"$pH`F\'6Qg@#;3%XEfcdHSWJ,Y0n\bYM0nV?1o6c
%mI^l&0kp]0"Nf4QMkiGf3\H79%KDH\Z`2>@$pQXn$(V"7?b/&L\Vl[jA&/5ZQ*,!C296dXU37b#_>lr$TpZ1i$f&KNCDIfY5co*O
%l<L$F^ma(08bQWR72tnP3Jf*G&U].;)Epg7#KE6Gn$4-I%]='R3e:J!s8</\N??8%Q#-n<FmS6#=:/Q![f0O'H/.8Yi^UuZR-$L-
%23-]%WJI%"')\TY@"p\6iCpm44o1tncpX`%R\;'Lo=-1E2rT:\%?tLIX;QWYk_We2DSb-$B"\WpH(8eAk1QM.FV-@[`Sk\J$>,2]
%,Is&kBc*WI/5nPDO_>!ZZg]_i6W4mgkYb/r<KaO@mK]=K`H-SEVkgF]6S(Y5#(PPX#]TPD0r9`SCDe=2DBdK34Dq>o"2R"8ZY=Sm
%"\:En7-kOpZko-@F5o/Z]2+Xfh'FJHik>O:%/=^*R[22sLA<2?E^<#goLfiZ3A,?7M0Lk@2CQ+X7+8.!OXRN`_skcb9<Jpg;pdrZ
%5dJS>M#Gr![(sSG\@H$:2o0g8rQ\=QS)*Q2Y-BTK:4]r,/B=V;:>?\CFgJVD1tj:H,[0BhTo2%h\714qS.U8rRb_0@!Q9B6JsC;N
%B?Y[QR\H-W2>nX6aCDlfCciFJG",>/nj>sDM=O.082'UZ$$rn8agUH8^jru5el?ZR.g07'"-/p%;[Y^8^pogt>IffRBR1ql7A6u`
%M*rRH[0lKi#kmYj>6pu;X,ftA")_&L[[X((BcX]k'003;.EAVtj*jjGAcZ[V>iNsZ!)Ek0WXPh+O+W+(MGgYfcVC=?(SjfA1d+Tf
%7Lt<WAX7^JZ5[5FHd'T+krD%ZKE<)1A/j;H%giIc#S6Q*]6kQ=X4jri#9l`%57`V&=ARMQ0VL)K1;5fqBe\f)Q)-s0N#j+[#LT[>
%!A?`ZqbXZBlt<MtjBU#AG'+^Y3I07/W%P?#F;ZILj(%"okBF`8P$#eqh-:;bH=KdV0soeJqQID,PI!uT")+QiD@teDA!C[?F+F$J
%U<e!+V+-0rk!W0@8C#(62^R:g@^qD%pON-Z=7:g+a/JViI&&'8YSrjs;4?oDV/=>p3p5T;L/C@VT105HA5je1j5k8qD,$fZg$4BY
%@;ANfJs-Z;$O5('*Xcr;kiO6d;.,('KQB&4-)A/26qV1WL1sQ)G5rsl)Al\48^Taia+2iW^VB8!AD^ujjtYV9/S>Nb7prqi<IUYA
%mbK.j6e68Ae@@VqJX6S*4Ah+n;NG>o9g0in/"0mo+8!**(ZVLS*n':K/s1-\"<Q.T:4)/f``ZTd%r,bZ:[UpdH1cf#LMqGrVX^bT
%2!;M(B4Q8b7:@Iaj6Sf#kj2F^J5SP)R;<ZXbG.2n!He[_[LjE_Il5SRL#<LWC<^psn:r=4_V!F-8^*u(7-//l*q$bc^ZOql*]4=?
%SVl(*Xe9T'[jF8X>^PolgG7DURe;bmmE-*WI;nDZJ#u(FUA/_`B=kKYD95AK\ZU7.E?=-VEh45JVj4@-(#gM4B.p@LCPl'NhlrR.
%ON&/Y2PosEY6jqiL)6re)UfIB3TO/9Cd="L^[`YBT_,`hZU:)NMmkD]@P0C\Q'%LDLo.CZ(!3;S9`*AtV6@WskmLH?#VgSL"t4%t
%:?#siad565's\*_<C3-'L#OALi5FiJ-B`AA0%/`KJ.[+iZN7O%efbPb2Fqt"*X`eu1KtET(<[mSg3.MIX`@<OKec8acCP'sg&_>)
%QIT]l2;m^P!UKj9*hjSVaR=@L\a^(/<c'DSi1rmnJqD)5r\h,3Wqk:WEA1IK$M2pNK5;3$R6_^;L5#elk\iID[+j-+r4XeB_h3E;
%_toH>XRV;C^=l"[-dNEpE?.B&Q4JZ..M!"q-]:!DEXG.-*o*UbHe]_>2j`O(/&N;)Y0AT3p`\['@F+7er.+'eGqcqqL1"1*ged4'
%7@*1r8V91;"b`eAXB(ZD@Mt[47)>2P@A-71+Yg4'fBOWmpi$X^?>Qak\\=VjdY@mulX?)J;L1h#ZKr\Z8gFW3q6RfXGSWS]I,.2^
%N1StE"Y&!LjX&CYrTf@/:\(Sr'Ra`!p%VO;@"[eaMJ^@YR.O&GBjp?Qk0Bc=\+e8B$<!Fo,Jr(h@W>e8V0a.\WN[\lW@(m^1r.$%
%frcp\]3A/D'iC=dVkt\nfTJ!#mI,ToFRhAa#5tCjpWnWXJ\DNq\3X`=HsHLG0//4Ud)TjNdS:)u[\9ttd__E?FCl`Vm`.W)Ikjgt
%KKM61CZg)9+foXC6h[gsb7BWXam-gY(QT8P5`&nqaZY"8/1E*?$T[+M0Hb]T'+%SF_P^dEScc0o3YY+0)4+&AdDChS+l=tHYUd:5
%RE:9sI9O/=lElDdE+`K2&M\L^j\qEu7hPoLL3G8uAfQmXkWTn%ZZMRZ6/(scUc<.X`o(b<WQ+B#4ZCoYngMgY;!anQb5u2(5ukiH
%FDLG;/37XpLD.1'S_!NO,S1iLT9Q-B0*[^np6!7EDukXT"F0h^k_(o-BpPf&Nt>8.fgQZ1=;W:ijoZ`qgdM$/?`>k$K[eA%LnFhk
%ejs;@CO3%\ON=ebh!GMXUVn5s^aLHl8.H#N:PW(-egC8!pNd(t*>inECChbFYCK"S+\;0c1=e+)'M]Vk!K?]HWu30TBoGU`*s3sF
%k]mJUCPrGN[\$K6KCFl)po*t;88_8m5[ltaA)rO<ks-i-.l,&._#jt:c[+EC9/&V8@:U1\m#u3'7Vr>)FN=J3#ZS[`aWa-o!b`EQ
%hgbtN-BHe/H(QUg^K"6A.E"g^>"a_J#).VC^:8'M!d1*ISP=!66bB(m8-S8h8>`l?+qY/jX'KF[4fQQ"1l,r$D$\I!9Z+]th6(YZ
%GOY^;-U5Xc,X(g'0iQ_f#KPfaD9"rtMJcaalF$@Zd."'7oAA[eI/]-Y7SJ#=!a(5)T]X&nVE0)'ncZED%L'8#,DJ"/0!l)6p1kLQ
%iW9/r+u8Ja1@l]+m)AUXF,S6^SK5r:)qmHS1UH=X&UQrkblei;g-MD4(\`S9SXJE@J5[GY72BCRecK>PGlRk!Zu0o,Sg9M*`=O/s
%(-h$l":^Gf-RPN1p,=4H)",M?%!':8f%oEg8%@I^0LBRc*ZpQ6pd%2nDU>n,D"+"<@mOiPJ-;)Q]#5J^"HiNS^(AY\8<nFRF?a*i
%3;gG3<Yf\e]!Up!"ch9RV\rqSL\[d69kiZ>$l+L/#@&]-mg3a)3*4HTbE>#J]d;Kb_;oR%n=53l/'.'70_q$%HuI2i4_5J[;MqYZ
%JSbN8]?G]:9TIO)U!NiF>GpR[BCd>b"8Bl'.MuWVf.;p#G=_q:9OiR;Y2d>mV0k*(dXgZWj<W1sQYWD;*]t/GiE2NpBCH?o]>tXD
%G)*-%&JE.F!!3b;Tcj$L`*/66d_E(EgXQIK0g!sK_qVe4kUo;8X>>[]bgTpE!dThpZ/@)XTD(kn3]<pj[k9:m+[)Vp2Mc_gUp]]m
%M9$\Xa9qNZCJ^cBBEG7L7'UFb[a?=Q6-=IX#/SV?SukB$LbNT6<bo8UMNfNt@Y,Ba^9g8MTZ%FOA#q4Pc/fVWU'?$(1\M6QAuoo5
%CGPH3.e>P`l@DX61U^O)h1J;UY"nrm&B#a!;&O$%5*rSZKs*5:dt*16_UPWYV&:/ZN=Z7G#6jU&[[E!\4Atkj/]ff9EFo864V&M4
%&1?f&"rk+:M.XB\ZgARj4_AUg=;8%W3fKS.O]mpZ_uLH'-582sP<hd?Z_n@95ZF[^o42W4R-ociB9XM"5d@t^0\51!U"t69djLtR
%:kBr2_S^*B*mWi`4A1D+2">T"pT0%CJZ1(U69E*oYJQ%GJc#sc+7]X$GT@u'ln3P#Yf'J$A=H?fl!`3!+q-FVj(SS.J`uR4.U\8.
%eFQ;'EQ0,LK\9K]iKmr)S+Bb@j::VYdA8m;MNfb>X><Tg,haN:'J[`P(Y^b^%h?bM)lk)T&3"1Dih-/H]dp]%PsI/,mG>G-+[e&A
%QV0M@-`bld4c4)5!H-l4!C27)A)@5ZHQb[Y\s<sk'.fQ^LEf<Okt'#-`]bc"TN+X!o@A=ZrEr#]CdRR.A>`?^P[VUlU+.N6+A@U_
%NMq3DUIVe[;b=:dfG8ANYZ#*aOL\m=m^mcb+sD=6>=+a7+kduA7SU;&Q8A]]KTW40\qJ8B\<Y=G?/8uYl0a>D+aF8P"1X%;8Ycnb
%r#@eq1M"3[8lJ"CX=a<3H.ZF7CfBlsA10=gp-djn3pI.&gCZr8/>6eIlq+Z7A-->S=".8`(8kL:3_BQFAMBI4kIis.]/FGZfalQL
%47*3B))Zt:?8-h'$Y.42dm0'GT'D&A2[)^`-oW3R#5CAqPS5TR]Z1Sr>U?6+g^kY9S&cjB)]*l&;uhLLPq#:-C@_[i?-Ir]1@^gE
%"YMB;:sRec8aa"(7G4iGe9g4`33>laB#4lXfh2q]h#h+PboWrkf%`*-3'^o^2G^@f9s=UHl:;/2V[qcb*@;&l&7ApEdQsj\S8#rs
%OpH]dP$WoF&cN"j)tD[-fTPg/NC\+-qo)*L#a>FgbCmRA+c#.XD3,WG-&7MRWu\]k8F7WtUC]8jal1`cfB2D4\ZEW;BM$&dfW?=q
%/X0\[k`aa?N+M*S*V>6/&mQ#)D3a0/C!On-Op8=F-1K?N;AM4M69`\<jqtcTF/<Qaco'Wf[6Q9D`:&Mscl%SHLpsa"KBOdt(/,0-
%U%I853Mhst2S2>5m8=RRhIF8nMhe(k4tm>`ASf)[8>p]fY7?afPF,(R#BRNJ:*(3>#Vn!+.lXU"&f]S]'2iH"10!"URX4CN1in3C
%%q_ci\k#N1IH3k#\U%:/W:cVgiVKmb@rS[hWPr!I-;rBF;#s_Oe-Itek__-gAXMKg.f>4_F-E[fi,c8!YHg>G@bVDZeC:%+:3e[d
%'85skYuOY/octtW'[5GYW#cW.i9i&2A[Bp>D>\BsD;-FQ4dZC";Y"nbAf.rNXEIC7?/9(]_'6ZRRM%_t8A6h@@/tRlppR4no%e9m
%C/lO7&5]FO1eadJFE%kM"8Gnfpdiq4Y`tB[%[R@F;P@egqiqQEJ0&64:s9_B3KZk^)Z@5RAoQ[:+JjYIJr']Ol:<4:+Bh;fm`Am2
%1F@bMq==SCWu4H;:]lgs+=EE:)5/k7bih;>!!mfce#X;Fe3TPa\NLSFN+5VFmkLCc%,;OBFk>neWm$G(8c'5J]%QU)Q>Ldh'*CO7
%MMfLGUk>BM;8cRijOdTEWQ):A%PfeYR*pt&.uj^%!g%/FOupL?@<2,u6jkR0X&-Qnj]&8N9kIsR"8P6>WZZ:/j&s0P7_Oo8j336(
%bl00^.ZbLcX%YHJ[Kgrb47JQ5L<=Q`M+QVjoM`mC8>S=G=C6Y$AqAeo9:I[7Oj40Dm9o6t=#[Jr$1fa6cq]'llN4n\`">+hE)/G7
%.&L#O"Mf[7hTC\j!pq6mCeP-FL3E(;7hIb=k;N_\#DfDD!0n,X]]C=PpdC=t"dFYh[3G)NA.o4b#>kU&Xd.MPZdY=m4u=EJ7AWf@
%;D<i*n/KI2mp.V3o"d^Dd_ITU\KkVu;`b5K:7keu-)bFqDLfEq$YQdq2C['(,.u7!*7h6hLo6j62qiuAYn2^a'R>4el`\6&bN$u4
%+@X2Dlr.:.n/;LbWT]$$:gu;pg^&#X3lE1i[@e0%.T5&71?.@KQ')''Wih>Oq+/+o%3!5[`#1fO4!Bh2JjS9IqVl.b=2DamQ9%,P
%6m:gM$+QQL%e*=f*$>j"bF]e2m$X[Qf:^DV&s+6_?h)Q8mq,hEb-YGtVV7c.F*_.;JgM/o.4?+,',#U2r,@PK!Q_d>J<9uVL]lo"
%^m1!;4u//U_)trRPQWt+!&b!-Q\eE;50BRnN=\0<&qGX".GR,f:t`0@Cf<D#$Z5:PQ"_B!!+oS<[aSs\Cg4V*$;hR:@onEl_BLtm
%-taJPXGOLB\0HMW:/XoD,G](KC'\P^=3Dj,1^^%&+D/l>,$\^l>\3t^el50QiW2D%EZ:'#:ak,aLumYZ'lC.5p")@D$^aF?PdoLi
%"8?RDZ6gSXfhF!0]QJ"%[mNsOQ@i"0W=_m#mGQZ+!+;h#!klGt[]@Wi3A>QI5lQHc[-gVAR>]!DEr/J)<`:"eMr%6]IrdbnOCYX3
%Jm!2KU.JC#@[^&6AJqhMZl>F%c!?U=ct2i('+kcuFMol'-eFeQ@G3D)bf`jSFV8hRCr;of&;05!)Zo:1(Bs>;&guDK"A:i/)cCs`
%nV)Jq>gQKu3Q@Tq2jWA-i:=Q6r6kjP1bb,o$[^YHZiC`&h_6VCjD[Qm'81?u0]:Ur.S+$i.jl$nSA\tN3#0lr#*]Mbr0W6EWm^Kq
%@R[p2VT)&1!u#Mn"RL2s#N>g8i8:B+CQH<.=V`B^9oI=E6l5#K30HYk+IWi[/3/kiF9*fjpB6%uKI4QljKV*,:h\[JS:;YAHU.-K
%RG#BL7=90Kk4']+)Pf,>LP"if:V_;!*X@4#2YE%7bR^1:LfiH^eD[WJ!rN$*Z&C\Dg7?8d.AZNhLH#>nmJ-;+nPM#:8g_Ls0+`8s
%WP]4;a;>\!B5L?44:/06$IM)mkMjr)#G,gb\/!!AR:`;?NS>Th_*feC(X+',b;qK\2[P%g1egkA6gWgJrobD9J[mCY?Zb.KlNR&[
%'R5G`hZkiAM5.i6(W\cYf,pS:6H<X#DI%i[-@/1*X0h?6bWDHB"X*T_LrF96\d!,OEuI_:cO'l!-Gu<ZcQ^L7bfBf2EfmctOL8rW
%ptbg7K1*4i*Te`hh#e*!W!]q$f2a'e9*gh,.;;5Ei(S-(^(dEQ!%^P+rICK3;O'.@"a^`5!?2<`$J],#93%MI(oUsF.&N!`)!a*(
%*[$UH:lS`tg[%]/(l$DC"0:Ln,V(&!`\cpl+B')\,@a7LIV!`6QbbM%$)52O`I\IBcTi778>%)A;/p'2H@\Xb<XN+4J<sXjKFDbN
%)6glOSGWd.G7OUN4:@gASTbO9\>Ugm\5U@Lf^5nG=eG*HWbFsGLb2%&YB^n=`cC2k2Ko9AT=OL9Z>dK"1@AV8(csN6a:eH'pllcD
%`7t>gab"5+W%ldPU'rc'8+9deB_%_@@4H6?U+(02"!td7U<S&)0lj!t'jXW(?$A`8(H^(2:(4mBr5^'Q,E/\9L7$!K1Qc.tZ"6fO
%;[:77M)/sTPK$1E-)QdgH@t`R%RtiSg[tmbq16U)V+kIbWM5S`,tXbcO`MYllqY]V/<ZuYO,;<"Z8gUh-$p_?ejj+SdfN6;2d$C^
%WFt`mV3l&X:2m]pUt%e2kO_^Y>lZi@+gh;kMl;`9_@YXT6BY#o.A:iG/#q]!I0uA]!8seQ.eOs.l,dGAP%l$t8@ZlpY@>+6&0Va'
%)$B]UR<]e#oK0ut4Z:!`j/LZd1/hU^J,KCsBDpY^1I5"\&Zm"?&sm'563I<(Ai<J3+76!/KB]nmMe&lapdWh=K$\cGXD_i(WhVsb
%#n;H<QgFW)p7%jd]*FU7)Yu"\Yko[ImbB0%h;Q2V6CthcdA:rGA94>4Qh.:F-!`qB0XcdDO[QjpQ'p@/cJNt:hnY'_&/KeS#B2n&
%,\%Ql=ClC@X=BuuJen8$#WK^G,t&<L=:nDr3&c4?$X[VP`SMUQGH/1#&ec`S;-!#oD#Gtk]]_g%m`@<4M]#>,n8+CjKlb:*<.Iol
%%_19tTuCZFBCM!d$G_Pbnb>&q/cJI7!%:gu[XpYSe@)<CM$0@tq^5>&#eG&i[+(82_=!SZ!?st^Pf#8E?&B;sd>^&$X=<0SIAK<,
%r/?nq%g.U(btZi\V.OTb!P.fE\]:s8@iHZSH%NR\<9KKh<'c+>TL2d,2Y-QD0V]M)T$X]$F?e@bh?R:T@L^s&<2KA+;\:-i+-pk<
%`IZ[$JU%e8C8'k>%]g#t(LC[W]Smp<0MY<;,Z`IVpOnCDJmk?u_5,I6mReB6BjmCrjE%\bTf7W*"i<#TJ-5t?6(5YMMG\+'%#5+=
%_Mfu8SWP\s,@TFL//J<BbosuG*h[<XZ3cA>R9cm(BAO3c9Saoor?*Q2S-H"!"@r]K`l=rdA1Z$Ff*1meK&la-KNP;*]?IKl8ejYp
%jk-<9,7XL<J/$!m-Emru<G!%V_e1pH-$2!8n2N(inrghG;s&i8ri$7%"W]M5=g,`[ar@+eq9MGn5<`L(b`JY4g5k9s4<5>B+\=FH
%ek+LL0$@(WTO`ie+dcP$'"/EiY!?YEhbfr1BjO%>ae5GqZ>KhscC8VM?D8m46C!YPXoWC/(mcUDGAM3$%fkWNA,%1c<$`lQR$3Fd
%%)t]LKd3sYU=^$==Ik<Cpi+BnKr#&_*0/H[Iq/-+*`-JlF+@5a/=2Bc5a&PoV!$Ye/gAkdFtkF4DE\Y4.I*Q]9+B^Cf*d]4%*i!a
%rnGsRiT)`Y!8gm]O%W>cU(E@XE2a!lRh;Dt&J[lnD6]$i.&UXO3]N=-DPn>kqBjee!0Lk`hGeoH4"ZT*q5@LRMhFbGQ.lcM&/n._
%UJa\f>[pl8;F:'fdq?fDPG4Ok*Ma]D`j9.kd1a>nA/T,F+d6'bDD7W4K&+E^IkY$o"b,KnH!H6JKJsN$6rX36-:@hW*X?o[dL)0n
%n=4(34#)#C'6$%bK;M3td!07b-UP?4?s-WeN;[Cqa.)W=BojT:^s-24*m]"4D^ICd;?i#2*Kq."_P#AfN\CPKDr2t)<08@>i`.?&
%OSGDVa]:=Vj^3#f;0A5O#ko;eIC*KmK#^u/hfj*@Qh60J/^s(7n%jS4rY5sVZJ@A)Lt<enJpT\=i':?Zk>>RU?:('!qt<upN$=G%
%V+qr(Fi^'8KUtJ)d1jPkOVj1".!1QMVaVHF*rUf9K:uriXo(@iDQ(=.@"4@a=:steW&+j4PcD@&)fjP5P"#6iUuWm=c3<rA_Z`/h
%I:96-fc?70//.^;m)S3H+hp?!,:58KPH"lldZa=4kV?;4]j/dW`!I6q&r!t6jU2MQjUpE"-/XUh5]daglY-KGJq,ZmZ7EklN7TAd
%O*K1/GdOCp:%4kjm"d,q^l";5ZqCX,%Z#:sl`bUn3]F1*e.D5Us"V2BCV_'^g?n0.IU@<=iCUfVF7Xo.X>#[Tq^NZiA6!l_W;3I[
%1K,0jJQ!kKZ(`e=2_N6bD16ht1mDorT"h>4ihZlBGD.iVZg\'sgZ"t1.^2.]k&BXF*)bF]fEK>&AIM^PB'poJ8M1_FK&2hugk.9t
%mb+CiH"[LB`\crLj?C,^VK`e(&%kM(+`dpDIfYUhi`5P6&2.m@ZVGK.'<+<l7ck8(3`+U,<"oMP?p$n"K+tqF?3DHbHl2\rV:3[V
%6AYj4O9&MgMP*Qb(3R\LR2d,BVINeo>`T3YIBG1Pkm1!UVXeBaWR/jb7FG;1U-HidHRnEg?!Xj^\"XpWU:q6;:a81hGSReWETlJ%
%5l^Z'..;V`r3R"NZjh;.:$I*+G#7pI08Bu@l`0PX<:cNuMN14K.o3!G3L(t<j29ohG0&:G_$\q!@4c7Vr8>ehXA/&.nNm6`7[^"W
%TIY%)TZ.@*:>k7c?@=ia+^$L?MT$1^,ePssB%2P?M,>Tlg`O8[f%^`DB`1MdgR>.d-ldnoo+4);i;g_9Po0^(0t)B7RFnNp*dNG.
%(KF7,#TW4V$:X\2@ROj8@VJk</P'"VE/:^f9JkNcncL$1LX,3!;8%-$JdtXWSSfSo=WeghTj`^t\6YTVGE:9""u[ei'+%EBXmgZM
%NuZZ&*$Dgs)9;jl9!fep68;f7J=?mG9=(P[in#Ma0JH'9DL`oua<I0[[<SHC4gZhe2UKhQ0Sh-GWn_i`Z:19),BCHAS@upW)J,i"
%gM#@WUnFdu=AH/gPkF*$`#WD"%Ys(N@0"t*h]h%9oo\G]-7P#8VBC0_"nXc&q>`8kA<]XR"ZJG4a=dX0VDW!8*mA8dKG@Ak5f?JS
%3gi8`1M<_Ka9\_7@?e(b,>SKqCWJ!@ZXZV4SqpNAeaq6$4VHSkNfrYFdiobmMZY=[qlY7c%.Ad8'?`^?MB9rp)k55FT]R+$JR]Op
%Gs'ha)Neu1HIQB9aOQMjNVEaOY_1GmZ3IKN+q[qIYYIqC68K`G,sil52FOq<,NfhoW&d':4U)P8)7D"PXLjct!*F1K9V9+q5TPMk
%3iaMO8?qq(:Te4P/XZ'd7/U[S$_e;DT"-B4r,Tk)hi1XG8YjdgaNu;8K`[+9[u)-SDP%(Sl).%jb(OfdFR0iM8pDPqp>Ns89'rCk
%e8&o6"f?8V`ZbcEab(C3VnU-piF1WHEI`7.$XnlP-=.mm%IbiR^9Rml,S#^2A==c"jWH_g&Wfg/"N!`W)>H?)4og<F@=`]/Bc>c^
%cpnA2c=0=Y8X_o#NhQdcEl]LOe7Bqe.SuSGMAG?o!"$HRc(e*2QN2+QW+5]UD5`:]^>O<O?)?eA4!*V@=4dZ9faBTc!.os`7VMXW
%A0UHagot]EYBP?3_G6<8N(p6a`YCck)E[d7Q1O(-87XK[6@]eNhMKU'*/oS`+m#1;YTLoBiP;e"Ii"@UA9`L[4tCO1p$\nU$Sff.
%%p;DkX:Q9<frHXN$d7?bKi&=/*rFG'7jjj?M+69$]\&'ddT*=enZA6k)RNWfP'B_1>"?Ydb)jM%J:'B2+XqIefl`b]=Vq[:YVnp]
%Bt7B8%4>`>*Gia_g(*cuisL`,#g%ET(H$T]+V7&%F9P]g,lCXR;cF%1!o>ZA&17ub$VIpMFuUpN8B=2,I(\TFEB,*d;Zf.&HZF`h
%=V0BQO`7D5E4SBY(u41g^'f[K8%L4IOjodBOn]i)[>7h?D8"7d4H/8C,G@?f4sOdO6hbiFhE@Beq[c'\37s@!ms\]o&rFC?Q>Y9q
%oe];W7@.Ne#m(aD._.9pO3A4m<LXq\J<7<@UISlG,o&atN<jDkm59W$Zi2tn3\%Br"5i!%^cYSInmr'"EZaUsNu`>P.CO"R`HT[;
%l#gec(rJGoUQA[`+JK]CSMfP8+sdOr0kJqr0'n$POsc]S96LX+'RGG?'f1uU8OO"+8i+i,MgUcu]rml0?o_3NS1?J[:ECAgiWiIU
%#_A*H`e<d!SVR]bc:YYuVsNq/oS;[*ldH'FkD@lsYb,>7r7/FY0!]X<;VKV8F$a<I.T2AX!lQJk+#B?"jh?g+)Cas5gV]PN4]rEq
%6BS2p!QG8XHR-TAK1%-CUBQ4qT4J]tLidurU-qD4Qsb`a,r-*6\`r.EcT;"<V*5ma12^ce:d#F:"`JuLi3^QMMU!0aO@D--'Iec+
%d(u!(g9+3.HOQra$37-R',_)78=,LgRAIa;QUc18Ltg/@jH67rMf<bE^<n*65p@H)mPMM6kA1Tqg*VGKPnG>j;mdQiDA\0J9"4L3
%L`V,$j$77[dL%FPN3mm$CC2l%@Eq"F[]V#;:g'`fS=VHiX;dMZ'+b)_`B2DPh[!@b`CT[(Z6KhXHB6!P"b0QA=)iL0iKg1M9"YD+
%5;Rj.=icSXZ<$C]i4dPa$f#VHCr#3Zr_F>"o<#ka+HCT4VZNAGhi>p@k%Ai*18119LNH`-<U_7[5PUTIL2nM7$'d&,@C5M9_&4a>
%LXfUh#h^Pl@jT\kQ4lppoRh.]bup2YR'nbP=a.M0HBkS=9/DsJ.GQPZU(%B@AH.R-E\rKt0,1nV't8:5AB!CI@UQkZ^\!o-'P=O"
%N5To'd]`sr-f.)%TaS#c<1$+=26,,0<LEk5<LUV1-4#K+`r+<hn1Be=1J^Op$scd#rGtaom\5+p/4Xl9WN6(A1pnR,^KJ0tD\!#\
%`p@P#j=JW&In.?uQJ9<JH]L4_L@II,b2X;uW5s>SYea4CalSgU#p?[JbPomXFH@UupWkgh)`/'<U]G*>]!?#N62Vl\],XX`g^qE\
%n[,[eapV?F/5TPJ-<.QEF9Y!;5bT?3T.Rn3//;ijd4kum6IT>"K.<i1QRP%n'O@*i"aIdiZUBuH812sG\MS8)8qr%XW>E6fnam!2
%+,c'hEYX.)WI6A=B-@`U:D<KhJu9K\:sn>J"Yo4'1)l]'U+Cc7o=(bZ_9$3:&P[DX*g^%@fa`il36B69UN+i"OsanYNfqH"dG+^`
%\uZ0n$]CVJ$6u]A;nO#DEk:1rOh4,PLF$f!g`!Jnp/rf>N/K%&5H+qQNruPV,[BVnmA173PVi)JnT7uePoqo;Hn/kV==(S#s4L[^
%pTCslg2+HhBW;g@6.(&?"n1M&7e5)V!Z#`g"JiL[@'QA>fU&f8.2&h7d@=D[ifu#]`3h$]R,XqK%RK1PSUADjM0n[O/$QuHFC!!i
%i3K]-^EHrIb+NO[04+nNs1C!l4jI]<(&@-cS`;5In+*ZmpZ-QE'l-C5ONb>a/PV;q=0PLU&-R19qSP6;<oAdt1ERV5mJ#\gBBmk<
%81ZL/Z941'$uUi"3j'@qKHcD+[]Nt=ALL,%PcTXrSKqYh[YbhfakGPq_JkVA,V!,X.Yf'_oj3B@1ac?K"LjKJs%/&ZjOU5ko*p(3
%ph%>A'da$qCLEe4?2478'>BiV7T=La9p11M"qhCKrL5A*$keJrqQm;J=(5ouOoW;?fNltbZ@QQ/O,I\r3A84pkmIf(H7#q:3NXs9
%_p3lBO,4@dZr@4G\M(h*L%JGWBb3ahj?)"EiN/:h'?E`#?!fS:@<Q6MrsXNsL_`AW_efI#WXL>\35R5K6hBY_,RPZJ.Ha8gr^k7'
%_G#qGQcC953!VcbjQ*4sos?_X%,kDNXP;8M]EDJ+^#a*>*3V53f^XOr3_E7#AmX94_iG?@O#P_/_^"T<p]2mI@2Q&9Kh&C`b>nd4
%6BtT*@$"'NOP\2X1i8bML&rmLF$;Y.Ye_R+D4Qcps*qN[]>A:ng$pQDIRnino#@9&m`78P\g.Ek^^I9c'28ZXE<D>G6soFF3%m/M
%\C1R)8\@5\5(%K]*Wej+fkU(kA`Ba#'/SYQU.YrT=rH,K72G4QI`OXum>.SWQU_5-`?X:%F]XeQ.2.'PqJO[aN`8N(4dR8]7eXI$
%q&#3+*jVu,(f(clT3nIURlhBQOA%j-mud>,G\>jdV\8%K5)GuU/*h9G/?/)UE]mB0h5m,X,i,qn+,Wl"eF0*foU"#&5F8CPU.ia'
%/g&]3s!oXuKV6\jk_R.5(ZWKe&W=Y6r##@#XR8bD4IM4cp@&?k*V=K7YeiF2q9.7aI+`q'F8J.1Yo'WMi0Wfuo=`p,!co'em`@U9
%"@7?o*IR@4nB!qgU$E,9[6\dS)P_WqU*JE(A9I@4XU[e+HiK,ch4S+l&4_LOmLd'_7<e4hJ2Ddm[<,nTkf+J\*^l$1N,*]^2bW30
%#P5B0S'8q.=Y,X]V@9hp.N*uf<s&2+h)fU9i.H+^&r0%pPT\-OMIqOYSuf[#STuKB;j63CJCXl9o28Nuf0C<DB7XFZL$/uVSOl_<
%`/G%5am8XE;nkBGf3ElG$9Z@$n;U!L(m9L?305>Mh(oSA-_3\+DWJ,q'kY5]8XO)nT&p2s&)a_!B=#tG12dGl?9L6%.I!YHk#ngs
%N4O&cZ)a9l!J`A&BN+EM$O1g\CJFUV<AB2;Y_#B64I:W?fgY.O7EuYMc^'^`1!^1m#;mt2(XXD1@Zof.I>K795Z+dL;YkXBcI&om
%#Sg%kS^RIB20Y0&<=(J@0m^dC9hGO;.Qd]okOC@f"3(-;j#\P_+;l>^TG!FB1P"cq^d*QA<bO2Q0f=JA<f\#n>09>I7Z]a]KW(Fa
%l,j-#0ZRkg!s=X;f5b\`k[?P@K;2<^nVEEkdtD(#n8lQA1Kc&`%Qf[OQD/?&#d:9mI`Cf.j8ap&d%89J9lbG[6c&m<fj(fQ0F._<
%"CT!%C-b@7](p.X%$6WhAi;1qa=3CXEh`=dO.RKTU7)1<Bq?HE&F;K&-WQlaUZ@h]G)thUB-")X[SGb5'=V+hCZlk&i#?R81e'2Q
%4^J+7.K4C2@WSbD"qm+&!&.-<7g=Q+$\XQij`BK17Qu*_P/<5Q5#8FEco$P$a>m@3!t&]ARC;2XA>i4"O-Su;"2>Y.B[-L3gaFtJ
%%3R+:BhmGl<QS&7C)`(`TYf\-KglN54BI4@f!Ng3c@3W"&fmmq:IUS;R-X%V4c3(s33#)=kMnB/]2tF4P=]$f4,S;?09FS;fK%5_
%O't.43tK-nTlq!O+pDJ5L<ZWV26)[i$L3o1&FCIKErkDpBa/s$i.2C5/JaOJaic#+%bN8\FDUZ53S\atP(S[F1kHi9N=%A/_;o+f
%&Z_)OAluMRG1YZsRf/-&Z$,gd1f;hS5oE75Vpq9S8:U1aJi+3bEZ+-&R6PN?S+pl?HlOEsqn;UZ^>#gIJhH["?DS'goB[0;'nE#K
%9tniO`<0"@8@?gO(PgG!1=sKtUdGdK5,g!Y<g[/]#:UlNLIk(b.G\oC+UgdmhA4q[+(]f";-ZGBa!_:Y3@X4u8X6)<4J\l0dT98?
%d#4<_UF8##KM@Jk$0ABhmAO?\(F7"-m33A@*1)rejZH4OJN-2nc89AAm<#*gd%/t#Ve?<s*(G_I#_D\J;XGs02,]"DHs7:6.V,n1
%H#):4:jc;!Gq?)!MA<3]eJk7*e$)]7r9s?s&UrCq]R%@HOMmS-1_h@;O:XM5ZiiEg!>6B#F\T"r+m9.iQbjW%B!9fP6d/@8-dFJ"
%ZA+`h-<dBfKU4o`<3*!g[jX&npo]3cE)qLd9o&<[*!SV@N"XG$e@^"<!f''FTkOLMWsCY<jgJ)\UL44iN#"bF3u$%H]T/6"S]^/1
%c;dnZ)2-VeZCqIpk%"P2\A:N*'HLD$"EN^2.YL6f>25UAl5a88W=<&^o:]-tAnp%]ZQfBNk(?T$Fk@cFF_o+8,Vab!=pR:__UZf_
%L9fo:UVl[_[^^#6HQroOhi8U>3>3EdZ_heEh(Cq$inpOU@#)H\V(I476*K>j9f)uL7[]QUJtR^J@)$(nm.1o289&MS-BO%V9>L5W
%2ur;b>:@-=7]!AOA:f_1!\#F0K_l"B<(UUt>A^?:Dutf`B18XXnC;gSE5Xr_82POQ`hX1liLk_5Kg#J]R@1u`EJ':.-\d!'eI:EA
%TF\ID;1`^r3L/R'<TO`r>;P$EMZ\$bBCSTTQGk0gR(SgZhL.kXU;F,DFkB@*d)VhP:%/iY_EH<8WjcIrT%pHJUBHDuC\W2AelE$"
%X$`(\oie"p!Zo1Y4!_e]l`0Gqc0Fq*h*!WpJ->MYb4+U=$PN+O#"#(kb2?aR_mE]u,/XMdTpRg=g6?5fJAfYH1":cob:I[2S\%gF
%9]?]3!T;:Yi2tdn$LZtJ"49abnu2KrfM;jVd=^SL6b%0]DHALK`@:qZ:DuTPl((duk8ri30U8EV.M>[B:5lsZ"#g=T%6^`sE5>+@
%l$:4r3>'9J=Xe(n`R08RMHb3+ieQ#%hE;5R0M)sPQntP,[YTTQ%^CDBg>VeZ-[A_/qkR?Mh$'!i]gj@OT''?1,UaBj4a?ZA<?Km=
%NNV%]/U_7-AafMKUIT[F2['G-]Nq$%GJI`o);4-M)0P5d_g1B8:@>l*S[s0cHL132Kb7o+N5R@L`j.2t/Qi<Y:PQ:DYj)Nm-7P2^
%0S=LZ$1CSr>f,'GDccSl*K0J4%q=NmM;f^a5ur?3%bjO]i5S0=ic414E);KZot96.U2*/X0jn]7c:3ZE:&o]BV%0;a'VZfg#=9aU
%7Ms4h`A<>?%2j*IXE5Xq8[,W1$@B08gMo3S:teQ2=@ST.8-8KlP+"[/F)k/l/qC9_X=CZ>r!:Mhce3*g<!SSQSUe-*LQmO6(UL-)
%YgtZ^6I>9.-sb>,_PRoaRL7.>0*%)F(M%4u@Ul&`$c*kU./^0]runGNW1F9n$*!`&2!*#g+q/8m/*j]N?/>8:Ne:Z`*+a9okk(49
%b4gGO2+.sDi<3/&:J,M+AV-Y&p0!63kUOc^LH_ZC+M[*4hIif\5l>3q\<#E.A&+4eWU<VLat;G=,$#54D3*c($5>>%fK3-&Q,f=X
%b@2.'9@"g/n'*54k9@2L![%e\maZZA$5d3YFnqs@@%b4:2P5fH_i'bndO\:nPG/KtBoiVUi5^`nruf0Ja8-G!5<taAQ*o;JY*^`W
%OGE'5#%'[T)6RN>m.uB;3$?4/QHtFg,Y=Dc<T[.uBYd`)gs!VA.<pkWA.c&^:fq@]'n%nF1krX)!g$Y:_k7cqP(TQXnt_Y67ZskO
%+E>d-h6^,a+p\fB88#?A_QlIE!*l2C$ZcKC3Gi?#6G8H0j*L@V_MeJXWj@7U*0HPdA6r$1$(iUU'n[b8,9G)"G&?O%9<S7r?X>-;
%fcaK_cj^%'9J?M0XY\$'K".I[*#%,rVcc=lL-Xg+P'ASR6EuPZ;FsHph3sjY7n^idXqH#OdBKl$#HG2<6?]*[l-a8<E^<0K2*m>I
%"<=<LQtSnH)j?FKO-!jY"7s[@B+H`ahX/8BQW4d?\r'1#bh9,lKT8K7gVR:H&B9lu3S^d_m(uQU[Ep5n6I'*sXN$\SoKXFk><>^(
%M^f'tSM\IfVP5m&[lH%Bgg)<\-J$`inhK%:W$*m@iNK+6$tO3LG'[&kCKQ?`7C5lq9^I%JZnRT/>0REe(%iia"PJ?+PpQ6;8j!pF
%oMhr<?2K8L+qES9W"dMuflI:8/[*TQ:d2$2^pn#Y:[N%#C^o<_'H)q"1JG'kY0DgrJ+,M-.[*W(ZZ/4D8;IFQ4_ApO)pc]a7_*0g
%7Ej$pS.8,o_=n&*.CA!S3!".%7T-9T"CUFQ^+':;ie8$)VG2@jcTI+ZGt^hiA240_6_iCKC3ST7lkA)=@rn6AXb."2AN+I-pXoA+
%#I#)qX5\7Y]KXsfHjpdtL)RD.HGsl38=5V+9-#<jF3dLA%2D1HMUK*AOt^m3-:uU1:(D#)BXkmI7PZqu1W;NLNcAi)JD9W%.+Q_D
%8Er9.U?EL"[<5K/RbI<nD2.KRBD=%.qlQ(bPoiHp=GMYHq.B<'#VQ0J<Mh53XgVTOMLod?>%t(D69\Y+M[8A0U+CSNhHs\J:t?,9
%j\FO><_H8#oTci;Y--FSj(5/_,?Ym1fYM'#fFD)=-E%57&%r^>+;TG2p'=3hccuD"7ie28SA.D'#F8Yi@?J'qN.^PV8AS#aQHE3e
%a`F,T^_]VAZ2>Htd9'_P%-8u-f*qe96#>R#'_,9OFS7"l9H?YiUaiPWT7o`iL/q:i$I"g9$UtMG\!<B8Y0Pr%K"cop+_Ysan]cMZ
%ToIE_7jKA2KnD:XlCJOr^tR^/m:oUCMOgXV"cloGi@Yg[>T(`35P(ZJ.(JH3<1jYOQ`6-P;S5u%SuM!9jEP`Q,fQo,JOh=.'V4>1
%E#2>sO0MM(>*0+7@Yn6NeVeI17,T,J<'5mP<meBED4YaciNdnT=?auY<#0c0eEWDiAEMEP<XC3S3F%e5MAt@R;E`&OK+sd?[q-KN
%0<<j3<8=9m^K5[E_s@@>b%"Mt_[G_ueloiFi1[+/\4,=;OWNu5pUX8d?so;m,RB#\e;_K;6;U\!$=Q:7%5M3AO#"VMHl.=M-1<n%
%87i::VBB^73U(ARi?SJii=Qn4Dj)3I"$dNV\FUO>LZOkh11JGh-=(b7X2h=:=--Bi$Da3S`Tf`fZ613PGlKJ`A7=r.SA"=TM1!Ms
%[:0u)A.PIGQKCV@!j2m[kAc/2hQF@Nk>>7i]VTmfe/?hZ]$fgS^s8MJ#`+'2M/.[]SE,u+d"4WV6P:&A,lHhf-03LQ49h(LNY6@`
%q+A&1C<P/f"[Ts?Js\a&Dt%US&)bi6?uQ,j+I6KK9;P#B*CP7\&Dk@0$']I(?>GFs?q7:'(OTT7_3<ZRoWqZ_*5,<1.s,rl)=#W^
%X4kg)<,M>bbp/PDRbU;qGYAuo0ZcZR^d,q1Rtom"gVSN\nd$0eZ*lY(buRPf/(AbsX(&>Dn<a6Nb9/,?OVW4_`)gHOD1g%5)/+]`
%Qr,!=G_S:9+9X87OS@EGF$U((@f[]$(6hB!%*_AgX0"$uGW^o5)4TZQP+a'\/nL0X+=nKL%[@LD?W&18pb6_hQ'!35>rjZmJOqd2
%TP<]\?-C(PE?`1E'h2VuGugkHD4p)1j4OF9Ue]J!p=b>q!;i;,B5NQ0s&)lLC]R[6X<\<(0a$0<2Q0qS*IsV8@qUBT&-<U614ZuF
%X[UCMS.u_CdCsp4nu=n?J;'+tPj8Tu1<t*R[+i"]f&jf8Vj'@&J.gG0<\r@ghB:n+@:o?Uh7_)p_a"g>??UU`LfqGl"="#(ka8*>
%<`'FrD:Yk!H*ZK@6QRDRAUtb^L]9(ZXH3^kXMmYORr6*"n\hb$Mg8ulWf&#1KIPZ7n>daUh*:+:cZGW%.^mUJ1?a94,Z2+sE(1-@
%%2N22=BJ<;KLmR;>D7#W(_c[+JEsG9U.5<9ARQ5P`G>!BVm5u8[1\7aTi<gl)H:3@#r27[;(0e$aA^Os_0Bs.37&Crq2NjZ<Nb""
%mgb\,]=QXUqE3u_j_(5ebek6Y<GRTQWT<LqU.V"%e4Q<CQZ;@8O:W05Oum;r>=:ur6%)1Qm*SFpogU-tdC0M\.tU/['&"9S4VfC:
%FB>b5b1X\9Mq]XC<^NM<J.^)[h9cBU/)lCcer,(u/1"ERh?=7'-nb:n/f'?J2?iAtg(YW\.[*Ce,Dl(^M"3M=qWVB'\#XTI?:)JR
%J,3@u_"ik5.LK-e.&+Fb.R/Zq#SFR@=>ABg-ODIe>d5"A=]8KL\<b7e[(si:aig=&,6JBT%Um6T70l@'Ll9Wd@;=1*k^.Q0V9:g>
%SIa],0n<^Ra$JN1Nd!'Q'F^5(bi-cjU_i/:,mG6/^G8U?]W,d:-t>E`/lEG,!bDd[*f"gH?(9KO>c%f4Y":?:Qks[,9K*\>qfe(t
%VNQV?U@Dbi3OUA[a=g/_=irJSk_7\Q`fV\8](ts6Eh#[r+(7(6K'Z65hs1LG;S<i!$<.oOQ=[>n;$[htI8aHkQrmE_'@%NZ3&F7_
%6piGK#Ku;"jM=HL:%D[b*:B<6rO#qupNm1)GEan<H!kl`,'l7[:m#GnXuah62rn[NkX9A&ELpGQnQM-M.Fj+lR6fR=4M[8%bB`20
%UbL@3Th`Da;$d>dCEPLni+K#$%.sn++Tu5KH":D`#-"Vqf+Q_4W0`<:9\%cBmp6`n#p/KE<FEHg3;dTS@)QhLXf-L7hn4P,U*f7<
%asP0g+E[hI/+alBeW"V$!+D`eRIYTE=')$uhTO.eX;Em\eQp.$K#6H]n`[X8Y_6]8>@,2sMHa#X<Z;]Rb9A(q8f(I"aFV8\Ihaq.
%f\^"'4V6H3]EFYk!H<8%:4$A5L9El/j?Us5.W/ka;:j;+=PCGEgjb)FT28>$+(adcn`sstJo#-o@96?((qYbNqA<%$Q5sl>!"@Cd
%8KV>^k71[C0?\lZplJ/d:0YnT2)"1rFpX.[%PUF-'[cIDMbO.5lVb*oLgD'eA+S,M=m74FHH%5jLjE0NoN#Kt>D4f4Zmlgng@^9f
%e&rXsqhr\m>1t`cnPu9!E";r#Q_Aj8T#T-o=L(J7OY5.l/1kF3(90Vh*lkIA\Hq-qOK\ijSSO=7+%)4<-U8(Q9e35Bk\[_R7`"Xq
%L?EoE]fZB5A+E2g9lKY@Ts#(P_cX3FG%'NIo#:)mJEWTm,V$D7Gb:?=!<$samP'g=H3_"B\@7a""-7#N$HK#lKn4)64?h[A[>q0n
%<&@j*$jUO)_Z,9Th[hZYU`RIWm_O"_UR-O?k4<K785%N<n5aUh50:mcSd#oK(aQ:o!J`-KIISj#Mq-q'4$Xi>+.Ct\N4\G/Dl;1b
%aN)Y_]%E;^6sD/L5a9*JUc_I6'WYrN'euMkk<=,N5r2NIJh$s5W<nT6;N)"O!C\B"eB=QgRA(I&h*e\!Xq8o;+=IDjYI\@>W:5g:
%$ECt1fc*IQ]Zm6B@i,l)mDE.H]64oQWYc_110s1ZT/,ep^u:lMVCCCWU/*#]R#4LldNh/C4"b\T25_d6Hgl-(<466'?OE!mCgnI,
%"Z3d5Oj?LX*_(isW`)GhB2/Qq.RI-0DSnVhQ"ne`+[C81;+6Lmp5EoC=?8AY(g,No`KuZl&3]0HTZsiCZ5d%Y_Yo__,_T?]Mh)PW
%cr&GK3)=pD;IhN&62(@MWbXm5V(BKed`B[;3B5Sr)kKT>#Qfk09LAb:P$q4Wq0i<IRn#F@+e>YBO>P^C,i`2TPWm;sLMOMM/9pP&
%o=!WDdDUVMN0'a)4V9t<BGfU"lm]'8Wl>FJGk0oooZ\Fk#1&fS;q3GHP86F*,DZu*5H/f"c4C01lTrp3XZGN#b/4_LVTNZ),k6oW
%cDLI%8YKsJ[#@&.#[)]5#a5*R,fsMdFb0,d%#&_+YA_6<@,JaKR3Wbf(ljmo1QM^?,FO(=>3[kf&Ym(g0Uii]GY8YOT0OTtKR]>o
%,H7u21,?T>Zc!GV=*Ph)(t/9oU`tR6"EG\%lm/Hk4XptDL&O6[%V(*<*f[QQ%u-ugc*X<FL_IUm;\cUd"C:7mr2aCBe;U%F3Y/m8
%VuYmJr8ufR@N,dM_uLr<Hb<LWqZot)UC0@jKh5(YS^#?$U91%K-Mr^G/k4Z+b0q%=PVsiTM6Q/%p3GRsA7r.&H&!@k0hj>p2]Vld
%4F+Sb#C\e;Xc*IQji:%-E8cK1!B<&#gXQu!)BXBp2!X(F9s4$&LH0??qPY*YkZARllWK(I^bZ:N;I5,Ub"Xd:,Y8'I4VJ^.3OT2<
%.(F3S`1_+6LtEk%jrQ0?f-a"i7+OM6Z5R1O)BnSN[a!F3H&#`:A8)6=amDt/2D*\kic>c6RQ1/._pKssh05]'O=S9/*Mf.NAqe`c
%,d_6f^K8/q^+PP?5YV;^WH'GO`/<t*,o&Q--l1j?!s7h$Ds4F,F]9?sGEGG4B9iMN:k?),oB]K1>5.Nq>XtJlph77&RL6\^@;srn
%R/p8H5*#:tXq-8ojPZ9j>:):iT$;:G*\@eS0B;#cpc*%rfM1cdR`5/^ObnENkXTSBd;QC;Ojd/I8m#`8GruNX/Qu#3Q+gB&%'*&M
%%Q>X-Eq*)bp2AtHmK7!;!)@,*dHY`QiJOUU1tN_fZXT\%O"L*t9e9?PMH;uo%s4hpUWtWM)2VuuKjBs^>Y($iRVs.lCT,3UQ9!MF
%aJ3i;jBr0kdM\2&l,=jMrbPUN2"%;60L7-gT2C>LPN5KH-9n@l)LM14KcYCobh_0B+G]DM>NAa)c`58A/d>?]6+DTj^gh2S#`6W\
%(LjDWn.)^[Q1@\0+Ua*n2/(O%&41Y1l1,4Go5N@(R1[M_$X%`I%Q/bWhoWI&gWdGg(*=Ws\ked<s!1/9:tD_*Ap?a7-L-O!R2i\p
%V^3'8oWjt7?76l;T#Cf=i)n#s0,pC<(I]A[0(+jZ";XN5ZY'^jROS%=@U*GSOW&L%S&-6jD(>;r-\I_/QV(Pl5u9Gpc7$rQ>UAt!
%e=EBBCd%3<+BXeoUP3+djT6ml14Ft_dXnRoC;IF<4KY,Q<W@_l<,bfF'Egkg+=#60,Y(kHk/m`$UFP7*iL8!L6kf#Hc?khIB]THq
%rT_(n$h&:(r5$&Ai('8$r%!9rLX1GIiQ^1Kk:c;LYHL]>^=iDe["#rBp):X_s*q!;9Ue9E7_4<W9LA(hfDsL>!&l(rCa8QWod8\\
%d7Ve+D8bsOa:a?ka.a.nX)D8JJR895eIR.+p\HjdI_?(Y_K7;sAJ*OM*C4mePBfl%KtO.Zapm:/8b*,5fgmVELfM"5.kgiRIA;tF
%k]%*;ahj$WZU-3U"37"0ZY#Pf4!<p'YL#0&!U*gEr+,2khkb+Fgon:`P_EJWoWQ,J5rHcXN4qm6l>9Ku6e>:*Z(m2<`tTW0oK2`*
%\V(=$T9[GNqPMtg0ZG;\G^RqVekm/;==^McSV4f`_<VIM^@s^kC6'V52L0=%'tBq&T!e94+!oYenhK\p$5"1UMIGiUirr1Yhtim)
%#A\CU!MNS##@=/M9&]/T'0K-Y4^P0>?e>0@"^<-hNo5$Sf'h0Mgf;a/_n]oT<Q;Y2jFlI8&>`h+1u^rk0C'X8:hr%N>.f%aYPg)e
%CT_jOWb/?$Ffr;>8R7#R$;R,'W0e;;oo?^Zng#B]12%1<^@eUVqql>NFCcBPQsf`YPg@-#3(;2!P@-EXV?Gq9O@$;5>>Gt+_>,CB
%-DH^SpNh?XamKZ@P@SLYV-Y>LJ2[HpebKhGn;51AZp]fXhfGRAI*0Tq5$<=&p`PeC5u:>icM56DW!`,)]E*Ga:*.>1Vdlp?LhI"T
%"<dcgmus#<mJsf4_]%G?&bD#O`]F\PP+F<(6)F,Vg8L41f.f;7W@E!0#cg"Oj_DC,?CqkI&0sbPA%!0AhH>".@H]#nW5,@$<ND!k
%n,>Vk=K3D_O=eHW&)Z[p9EA],*FNg]+R8*3@G?Rn#LfWMWh%TTC3"jE\GP4CHi8R.&>oOQ\U4t^2FhMPFrs,7\Kk"dC%jo,a#3Vr
%?9WW/hKN+J=AY8=BbFY@WuU("FS.Ef;3"u8<,&]@/_>]T*'$-o[!_@42d.oCK=Gf!+_gjP<^n\%Wjt)ej#frdJ/EC!0j004B*dUj
%*O5+lS`<q1#JeOqr25TO0gQ/\<QAO$ob_IqYU7]i_06_aIRK/<3Usr_G+VVO&Bo`C)%iX9Nf"1Kq0/'.$X.Gk1s+:"LXWVXkh[8N
%>h[5/%2PLe9Rrf3\o^Y106l??Sk[^3$NVs)OF^rSJBTq?"M&k4r([mO4=OZ,`RTRe..M'&Uh&T%SW$*X;J2@T8VlN!KBKF:"[6(;
%kBFUrOAb%Kh9%"Y[7aB1%SrZ4OAXM\D1]tKO\I3uIVeS`1s_bp^/nT60LZA@:TmgP>rP?ZN1=2%&kq8t8u%+fiCKO)i3M^'bGtlO
%p!5q#F^,(Dc<lGI"aUZ8-)f!M0[uWgoguV#BO2g4>o:H:_+X`B*BrFea*Uef)?k5\mWAa^Qagj:*mdRt!naHBl30JZ]9c=E?McAA
%&)40V&RcNIDoY1>!F7X1O_P#)&XK9*RR:QS&h6$rBcIZ@3**Vs@)*AUO?IBMRuFqsdW>nM7.@f::?)VCM2C9F&9*hfna63,*%NQB
%dLh-f(jEO)`N9CTNl<`2P@r.Uj5Roc(0D-YaGm,Y/DA)B/'$peeb+W7"s)jc-ATpe#&J`bH?Z#K`.(MAo:FBL7-B5@_1PhcQP_F<
%bS-oC;HlLJ]u?PCgb4ISJV[ZV:n7o:).CPmnWN4r,kkX@S_5RR[L%2TNsfY1Si\s`';ER]Hs^?G6ZhFLAjBG^49Ya7bdht$on3!f
%B;QHnaH6],LV',A_RKZ'@mDRJhn'/$@Qr<.,OiDQXVab[PQj3PIB>/(=;!6KS:Fi8;PEO.=%NiqU$eRs-,UjhTF,Xj*`<b)75pU6
%J$SoWs55^oqOj/)7@5BZG`Dj83>#9!T5\QW4o7W#:rP6_6;m^>9E!!<RYR&2Qs27Bhf(BNa$D%'=#ko]`+O]$3-FpEYb2WYqdfB5
%r]ui?B9E`;(;Qi9co!g=GbWY99(?K21mR_tX/<glhOpAGSN>BG&)Z[p7'6(ir#WLs!RJY(/a.uX&Uu1&(*sS<>q\3/1D7K+MA^8F
%BK]LHYC@*R=HFHBj3642E:4),!&KhO&/14!.h<#nrh9M%PVS=7BMWXto'j'd4]o(Z4[R^F-:qHb_4&/$#@$YRW3][Y]oYb"[rPV[
%2]>/@K=@F'!8Q'p8`u3\AeEB1\FJNJFOAqY,A)@b!3R\q6W4b6LOn3tT+BiF*s?,k`8(k%@8IRK%1K6393Ajs6r\aUddFn%WY<'3
%ohIauG2^R.Hf%E`J6=Ca7rhQtgC2&"ip>K31%H!UG34b#/tA]k9\f-QD@R_unm7q)J/J%&ImI]MnXYl!^Z-UKnMq2hq<+&L:&N3`
%+sk!feX*l@f4R%bj1S0B#_B>1+=RNj_-j(N1+X#s*lP)J!ohmaR)B%:?g8_Kh92LDc:GE;Km-7jNqq(uOk@(\dSONM4T2Z1c8G'h
%pYY8.X4<b*>`PgP!lBQ:>KmH]d7lF'3tq*u;m&Nj<A>/_dVX-4qHj20.3i)o46V`0Lm4Te)4Gq$W2&_"0VUJ5RuN;'/bqP=*M0@H
%f"VGK=NnJ[aLGq75[Zq,4*m7e5pChVpq:,/jpP97)q:1.k'lf'ruOr1bRc-Q8eR0j9L'p#$M,\$oE8pZ54mpE'>:+&i`'LkSufZX
%58]e0iNH"Z#f([sbNr3*"J1F<'?-7YQMZOTM87j_0Kt\"R[*XD#@UMo(&7fImG3)*B<LU*G6@dc^6a:2%dV+YSL8'X!sBa.4QP<0
%NhoJQg"hBdG2RilNm"N`>3)"'3YKg)UTq@A?!+2OX?"=/n@24SE2bF32bJqk6YIZ^,nD/1+#bnEeF4<\lOa#&<sA#]1]rOm\J07"
%J/Ddpmidd2Dp]$OU#3:ln=jg8g&#Q/N8Uh:W^Ka6\\57:f:TQ8g;CfHGJHd4Ff5Q5+7uC=OqpXAh<&(V=[[RdL/D.iXE)mpJ`DLL
%N/6b5E]Cm2ag3*=%5r&Qf'M]eE"4S@ms).;g*t:m/0%@M7Se]#2faPWh=Sq5k+Vho#eq[!8$<n_Lt(1%Cq\S&=^B--^QHZtk>1bs
%@?MIjH?nb-?H;K@qRV8=T`?V2430&U*[*PYmP\A%WW5n.JWj'k/?:^BhiX=Ce!1^nQfp29SnQOf$pc^5(m=SeTA/2aYH5G0lKoWG
%$m\#PL_Q;rL,8$])]7F$!,<_WdU3_]#Lhfp7GmL3G$>6-_FME"'(poVpA6TdAk\!$JbH=ZjbQ-4&rHnBh5!+q>IY*>C*k%_"XD6M
%'.@<u]9ZYH>c_BS_RH>e)[V>sjKWo7[ACLioY<&QY83<67Y<l;3USTDj'eb7o_<ID/E1larGT:Lrf/@i^[cge=m3-G+WRK)b=5bu
%]&Lhm._c9T,o%R=Elg&6MDLPQ8p]jQTVqGd[m5$e_"G-Vh*NG%#;B'r[BuQ]E.uo,SP(KSq-/T,_p^oGU#X7fVfSkFmJMCTnt.T\
%Dik9Wa$kth$/L.d3lcL,/cH:CNc%#"n=-sC?I+r*F?o3,EC]4&0:WR`\8.MMa,InW.')L?m%D=Nk@<>tOZ.>&WX6_$NNS>FD=<>r
%qc3V$Ek>dO3%t][R-OJKnJh+=Ca'!CmaaKgO_Kd-\Q,X`@";:U9=CXp"cUdI4/O)*o`ccNMG9E6CIS)Ia5,H&mJGj7kH5Fmk\_:i
%/8L'_6u/3YF9iT"7&rq[3qRKI,G@8\C;8NqQ64.5qIiar-MJR6NL@Zo0@:EQmhB]UZuh(PDR7f'EOU4PF#q&c=CB^VO6PZ[?j9jT
%Vf^$ZeSSn"P4!i1X[Pp+a-4bX*7<*-l1s?(55A-Hh+'[Z[$qlp>_5ZQYDuJ<Fq`dZ:7`@`Cq"O,ceiR\o5r:)coQ@RN4gLm"QJJ$
%\f,k/AAfTZXP:]1H?K94m]-2,GE^&QCK94`Fc`pu"@^Uq33!rR:gMAm]$02BFjMW[CaRoKRrhN(L`u+T`Rgab"o30"?!sj==_kG*
%(RK`cYNnidAtbIEH@YHB>o'U-MD"W<;9\VkqZA?p(WX<7Yjk=!14Cge!]dd?*6NRiflU@.1F+&b=V]!$6T#-GGoE[)BK64L"6&R#
%6U.au^o_'g31aq-j$<!1H-op)cdQpD(>Pha@N98EWdGKl2^VU6E<[<_LJf)Sl$&W3Zjrs%jIB>[<_YGVb)uh:Gi]i6*+V-=eN(s7
%5&a?T=]/GFhp]hZ*,cZiT=L7BlKV#M@ZUS2!?J0?1*\H*eEZRdN_t&B8Lq%OIp.epgZHUfFkHSXY/5C'b9=jQo,kIIa?tuWM]Bc*
%lCr6CKQQ2CA2)<)p/,m"o668E0#J6M+MD4X0tL!L#clD9lQ]`_<@s=A\iu]:\g.K#o*uB^Y%eR3YZ4bi49Qa`d-+R=3?PFsg8=(7
%,?P[\Ils*?8_B)d!=72o@-.Dd/;Jfs>*=j6iT)F#`unX-&8n?ND%[":Sh.GuAF"8'aft&16Z7*r![^;"e%l)QOqG<XYfkjXh&\Be
%#Z/dj:6SJC/dii>8.ijX8?&47JI?TK0UI(JaV8U[W)n7fN,>:bl3b]tSkQ^D3%O+Z`>#K)G!lLNM?^sm6JpddVhRa1H_`JIQ;&QK
%4IQ,40>?G96L&jk6aSP1l^SP'>Xe<DR<ZNWPj8&bgS)U`.h'2TRI4ZbokVP2M&>L]NcaWm*$%S9oVr?8:<uhEJSO2=2po(,74Gjo
%m`1M_Ds!4NOqQ41<c)=X="3-P;V#Wg6F(p&<9$/+0mr:tM]cSl>'`-lU<#QNH=b*6kY0i#*W^*I`TQ;*&AiNX*FjC,2,c#NeWKWE
%o8%JY,$jG-N]QR99cX55%:=-#Rn(:q.8*+gi%_c8T-E61Ve4aYH=%1),HpAGB_9q*Gj?b"`ulbe$Z6Zog_A=.Ft\@gd38f$h9^J!
%2j<9l_BTTaEVDp""$8i4(eq@gA%)T0o**SYN^dlH;\HW[&SeZ@iL]m"G_CRID:iXk75R@[#<)rK$=GgK=%E/mQT3]2f+:&\@`(Pa
%a.d2&/B/9?F_ol7FhnZ&8LCRT?bG'+%f$G9[")h,RtjS7+*ET7TCP0_rlR/qkLjJ)=k7#:SC1(E!!1KA]:YATrQZeGlnG<'N<s1c
%Z8n0BB$t%AfoMLQ`o)&$)&Vk'e2T+fpg=lWk[VTS3bh$'-o!(MOY(bUhCZ=7(:il&Y,r%!_6PM04,,QWO:qA&"BTrYZ,%e,(#mC&
%a1[sa;;#i6#c[B$j,<M]aK^l()_m,0S79DaS7)&m%;'4oGkZIP_rME-;JkMEWifP5L=$,e(KpYH5033oJe;+G"#sF2n`sqNo?F(D
%B,k`FPN(2gUHCk'qeAU'Z\#6UkOVWo!ZA.fE,qd_RkjBEQ+u'q=jW8T[*V2eo#80;r6i\Z[>C@3i02_?g6oQ"+45BHT$5oQh+`nu
%7r6JDMkThiMFnIiM5@TED<#G:(eg"6]'?_)d?*k\0cAb`\h%)]P6#F)_UoZk9u`N`$]Fhi=uKRp*M]D^Fj&(%`imMCG!)0l;7P..
%U8fC.02#K$N!YN+9n&RH@MU\aD7WEX;D*^//8g1%_4h<(2UH&9)sW)jIiu#s1=Rn&XSU`4&R6*2lPa"[N7':<T)>hg/!Ci;=[rZ)
%;E8t)eo`LlG3l","/lkpdh&26?;"F\=kRK/K1/eDbZ('"<uFpK7R7D,NmYKR"nBARV\=-0PhNU-4Iqt\dH?65'qo'cU*-s/FIU\q
%gfL!aB9FocW*3^u3dKXqd0"R"&/D0)F7Uc_P:p&i2.MnK:)PEtA<WA$[&mYHD[,AS@(8VC/6R@":*L##_>=7jeInWrQG@Q%FGf%E
%6pE:&dM<\98+c4W8u-Y64c[&9/2ZU-KV$,sPq*,l_k[`Gc,EQ4S8!m*@NOn4"XBIM0kCUsTMZb499f13=EoVc<KN(d>qmqkA#Y:\
%2H:=0r3T&*RuQEB,dr7a;7Y!f+[`lWR:T9Y5U!Q)I2BrfTrONLB:1M@GI(0%_N[p(hXQ6"P\"Dm`'2&6lJap5U2fp\MQN%fh^Qt4
%_ENpi/80#P])b3XMe&C)7Hn'OU^4Ghh,_K1D!/OHDrZ!X2-Y4W+TIkaG./CoqBGRP:fCqEh<t2NC'cLr<U5f1Jjb_Fh[D!4;*iVt
%hh"#DorLOW=h^$K8ZuKYd1\;h%cc?>@6WArd'1IMb+`_U.OPZ`YhS:!+MXE!-ne,Di&i-'YbMH"j+;oTj'rti`?BmZ@390h7goSG
%V!>e_YC*X7!TZBdFSN(XI5tP/PgEqm>9&X5M1It=/i/7OmItM3(c6[T]1?ZlHZ$?\^(+9S`i^;=r8d6*),%!I?l1F<7W@DgD=Y3l
%X@?W)P0)KG3=:OpDFs1C:+N4KM&?6m*H=Zmi9%g7T_k\*c"t&HYt<a*#h"58P9<,"^fTcZWD`l`2M2NaF*S=nI*M1p2TfeFP:"V&
%E]c.P-cNnZQe)9OiRM`+U<PKKkY-aZl/D/G1qlXgNb51*DnX2H)>X83Y,(jF`0de&&W4C81NShGU4g<XX&3&ahC+FS]uj>YE<oT'
%0-YEWAW/'m6L*Xd+<`kp:&2M6f;QEaGd'8B<@b<6*lel?QpOBr/kQ_flRR!.ajpb>K*_@pghq/7d'bqUm7)X4eRhO;D;UWM<>kh6
%P>W"7\5t+0;"J;6mBI^(Qjfl2;I^]-G$Q4.TU>U_/9:WaV,!c0V<EjP/$$sboT5k*<ah+5ABI!6(3d+"Zrqp(3Y-NR)H9N&MF2i.
%L>"]Q';Ii%#6;knjj>3N8.88Aj<'FpA"X!V1kIJ#eDbJMZ)YU7[DlU6ONafL0op+Lp_F(^CA[a5G:kk8cU*lp.b?dH4,6ntI'CR>
%d`j.AqRg`6jcoV$WO$HH38NrH'o.+i#gasVOV]":IB:`(p\^eB!?<(![E>="diHVmfn&rXUN6nZ"(4DaikC_G"-Z&3i6kB4Vq9bi
%V$P@T,jsVVH:Adg6FO)W_/;s;&6$s[;-0LJQNHo>1q+$h;u.Ok2tpQ$f3]cC?jgj'G[?<7II;9R^atL?#3f5I#qHRNFetD^\1t'n
%ecs4-eu_;^Zc5LsPoWY4>o[25B(ZC8ApPb8I\ma'f<OIq-@j;2SnkEe8nF_>`Q4DF[/)<1/;?=/3dt$L%/%^dEsdN+"=)NcU+3f0
%5d\:rRFZ7%1d%9eMlPZ0_K=T(VBik%0,e,?h/]CO7AC#mo9.!rP;0u0HPRH<kBEDj/1E@6ZR:gT(X4FjK%%fDl&lf_cU5@U3Tqh*
%P7t_K<Hjp&G\InDZctS=4_0ZmDn[lI)!DGVoa)2TeV.oY;2!?H:Q'_m"b1`-acBnjrEYSM%$u[4:F:"bDZ^UIYq/(Gk+5%g\MTR#
%jCK_*h<=C\As3oj07Qr+-Zlm,WDM#gp"gudN):,a!3/iE%.4?6)rS/kD[H\>pi&?ao`p<fI`?_BQ/p\1H11fCn`S!e"X=llGe+kb
%4I[*H.kE@kicqgL"e**@"*DupSjO<]kH77)'R7':.>f@?1nf[SVfdoQ^I[@qgPl7t5Ue,Allk[FmR<Y\L[o<'GGFesm"5SnCrh_L
%$Y*(a1\p3hig!^/cO<GZVSJTq;$Yl+`17^mSgfpdd=gup-Au9f_qI,5:,Ui*\"C/A%WG^uBKU+=VX'jOA,ni>cV\tA+4s$`PC;.&
%^nnDh7@f1$=moSlI^8E5oNfOcGj^/<&)^K8`KIHUcQ3%Z<0II6+ORH%i%rpsWQ!)X`Qh8q+1N>d@)Du*2iruQ%^QYi'diS:%#>`%
%hCAG2.ZR7[o>u(%$HLT%M24*_3A06arl5-Wlt9*2r-?X0*WYj=kPrKN`ZdHIA5r.],r"#GNXhftP1EfR[B_Os*Q?eK]DV@>Juq"!
%0'8luT<LtDo#7.]Z]uG3kJRXPon>u])rKC1G&TWuj,5*2@"R/(flL1mOU)7+RkQ,&'V3nN#osg1&,hgib9q-*oFJO(A"_4r.BDH:
%hTHcZ<`Oo#bb%+O+(_S&+atr";>'7%;1Xjm0lKq%If'J#Pa%=UGMc""HM+bA!lT(8JiC]q+2Q:/Rb5%)MV@J]0Ys>,BRa99rIfS7
%[-KjM<Y@SBP*B3E)B^5!j-q&RIg"ZP]$8?@LCmXYRGCuO(>LS1g2iPmSl'BQGiaP-q#"_W!2u$bHhs_:Q;Lo3@adN#Of/7j-F;2&
%rVS`h7Z6tc49sG6aj(B3'=nm)5ukO*CGatCV(j?i94XnB?Jb;lVnHIG]MR/L>\0mYR2OWfb$&O<.-K?Q88%n4P4X/LXI6A.@/=5r
%29n]dk<*(]3'F_S+$DGa,I$dUmd\Kd#L^_b$ld.$?TJa!.8#2\hQaj]76QC]`o;>4.dK\C2-7=&N^p_%YBOfm:ap_I'UDRo&gPDk
%/4CY)Q6`Bd7cY<X+UcS2jTU7^:R(G_c#f(DfVml(iO[o)2_1ljor($3pNh*`o\]Y.8c0:OUE+5C^P$3?C/nhZ*(HcN8"G:O(%Gd^
%M,rD*IZ%ZMq<]9r).cC`V6#=LQV_>WV,b:=,rm!&p0c*HV3ib@^79VU4#_iHkd0o!ekFSq`(h!T"h`8+)CKd&L"S00$!?pe/TjV!
%En'>cpKMb5`#:[gW:AHp'<A=Ifk*`jaWFC`"q)0]b31jEJ]76GKA";*fSA1)e[C/QJ;*Wq!peurIU&ie[t8E!LCHd!)e^l,I(/r(
%3kJf:/%SpC89qR:1*CCQE+0rcgnPo!1L#B1co_c!.e7g@41ddaJ:5W##KXZr*lt46V6SkDU=+Q?iN%c'm9D(hKKA?!31e@jr'SG'
%4klEDTU<d9dX[(uN=I8s*[/i`(^?*-Z=[`H<QEIB9*/rppVk[#8c"%;;2-l-"GjnW\69.PThkPL$s]hjB+2Hp>[^ao)Uj/a3AFF,
%M3c+#%mWddI$4ZlY_=^=&;94p:;#?[(B)-q@k4i-4i<%6SJfOLZI(I<P5_pJ3q6Iceu0bV&7iV.1_4ce58j46Y%UkDg"FD>\gJ#O
%:ldf5aslI*Bn/WMT0/Qq47?eT>BG#k6B(XUH2CLW+1b'`'MUL5dpO=A3c:g<4"tBB[lQKB53tIU"EI)Q3.QReent222eDe"V=q/6
%,^NM+ct2_&oDps-iPF`eki`6GXVQ<t<ED#[LoA_Ri1P;1[:f#KkiUk-f]=s/Q=8QphTT<'NkbRl"og%YFHpoMbts#Y88c@sOt;@P
%X^WK*X?9b\Uo^gn/j/=V'j".NnVEnN#L"WCNa"EOgJP-'`rMt2/Y_ng[ijaple(tn`eNX>km!BRJ_]>`jDPX5=\V%N_/>Vbr<SlY
%Q1B_(^)hVE-:lM!L]27+YOe?k'K7"u$fl+I)\L'm])p>/"qo]1m@k?X.q]P\G.Kf1_A_;CpK_aaOdAD1-rAj,8-*<k:Vk0IZ?2(@
%%7$QjQ9f,[p[0Zp;@kKMPU`'<d)DH8H"+mQ;LW<Gl`gh,Z^T0\0/^ts3L:JZZZY=:E/VCD7+HgrTclZ=/k2n16fu$e7UM;)1btI^
%IJ)Ng-XA.1#acgm[+O>@QYg(LAk*<p9e$]J)pbQL:/7H!I;+PaN')n9I8rq!rR;ej<O"kYH)8JK2TMPWE10+h>P6A/n\\2<L&[:"
%!uQ?R$@ls63O:iTp%?r>Q][Un:O@F]H-GW`gQW9A2KLT>O7u9+ABDOiG^1pcU.!g*jGf;"6ilXeE4O/S8,b+.oU8>!'aMNGS0nCI
%>$MiCT-4Dljd[k%-+Y`dP'Ga1Z<(4m[rZi`fhGt0lU,GpO+$N@^*UMi-0hfA,u]"eOf&0:"7'smMQ!R`_P;Y$k'V-[8-!r9i!q*%
%43X+')PQ$/PTI2iD`b=Q[:1+lb-s*<X\T23lWD^\,IXLCX=H$u;RkCa2lU0b%15MjM^!*d]`,.NHsi[Q0^F;[6qf-#jHt\]Tk=<o
%(CJ6+HWH$I0)][c!:n!VU>u;`ILtpp,q:XCc)9'`-4:GYRC@6a3mI2&M]7LUmXTa9mu<9;'2=jWFX\Bo0$pHM$T]asbfsbTg\^SD
%a"]me\!;;dcnUr$'*5"R2((1TSiL$@9cPi`'u!"m.!@it5>_QIe_d$=eWm\TmTRZ7rO3;sXh8o(]0*T"B<t?C'=a?R6)/HnZ/YOl
%!Q)(M[EaN@`(JOfrR1NEi#2iND3FriVOKDE\Kot8FD;AN$7hn.DM&fD^rV4;9K&s9eRl';!nqFoYq_Q$^YP^6X#hQ]5SM;iLSD,2
%k4W1`$0ZO1&dEY1(Y,TTj6'P%7;#Ydc;2D:?+K!hbt:H>(Cqljk*-HU0\`O5EZj7D45^].AQgo-P5t:RB").Q-RP0qs+)P$rf>IQ
%i707-GC^@\qT"N,%HEi7c^>I3X12!j&@j.J#BF>4dHaB(YRb3I3&^7.\T^#SIk@AihVXeZ9Wn?mf"8GWq6%U;Kd/NIQJPJ,,#d-Y
%HXL.i6B-gWHK;.KcqF%DRd0qaJII(Ar-G_g'_-p^.^-mALbAZQH/sldm"ETbG3L6Ha#eV3ouDqQfKGbq4TDXCIH%"eUW4`s)PM?W
%O'qnbUGrEEJ!;;LUTgmSkelmG3XiZdL0)E$gt1^;,5P0nXqT3<jX9\8i=A_ZN9)Wd_FI99:UYd!*f*W_0(R(TQ^f*>Y'D[?^PP*a
%TFtd0m/r62nG:n4%_=cY&=uc`TFHc,+2>e?CM@]%"O.HeDe:dH5;ajK2DPujDmDCdiW@@c?[nOkn8j"s_0&$Cpdj;Sq7A<XlJHpA
%0dR5*n8OVn+-/@c%2@Pl6K2b^K[&A$?\CbS%a4tn\#bCI6Cn\Pc[8\Y&t_J8^&2qJA-$!"9B5(qT6^aY*&L!nrh'm,Q+>F]J>VE%
%DhD^U`V(]/2cZY`#a#2<[I_EnY?M>D;TgAu>_[3\Ej1CZ@I_>J:a+:0Qict94@OMAXU.L-IC'cP\L@-@s85MrT"1aW;6qt^@*p>E
%>&$;bCH]>(fAh3>^-hpnKn&!j*P`b?75.VI=1R(a!%se;0MHehDG!jM$]hdKUk;CAMrpAM'CF.r(5^Q9V/C@Y3STi65<XMX2qel1
%8WJ`UaNd=Sa1<ig%7^Gh=4EUAl7Ii?T9+5QDif3'#Xrqrj\uUV-m=kh;iYm\mfpkG)AjTT7@Wd40>T)-9dq33GMAq7"\8b?Pbk]1
%3mm.g$':j>]gaB]+psn!Hgc5R6&rhdMO^9>)l%q^h0+:WYK&SNI#!H7OajLfFZKDH6u?Yolhf818Lj3M3qo,q%Au.<OoZNnJX;uU
%(/'TU$4Oe:V&2>U_b_isK#Km!MV"]m.:jG)KaqWsa19)-'p;\]lUJC5BH7-h.jr]F0i47O8YdoC(*C@>i`Z:\d?'maWdZF?A:?']
%G=0!'-qe?(e9DYulBp1Xj:An$fJg)JBhW7bi.oINDSeXg0QLDh#mWdWHWK%-I6\W>*Z#Ui"U\$5Td>f-q0UUSY%2arO?-0orqInU
%a&T5GX!1g+=E;O)XY0j%=^Hon)Qh9R_+>N7B+\m!Z*hZ"hE3E*b@A7GpQM(.):d^\U:\FU(a2_Lq^qAdlee;+^Y^:cSnN$1?F>qk
%4E[/D2dQIZ#ds,1b4EkBVY4k`_8cd@[Hko_[IK.IA8aI4:si(bEGpZbiEYW27jBGcr6nYNKlai@2-im5]m;ipi_ApnfkZ0[8=S/d
%\9a%"%kePE_;'sf(d$&1Z$)uj]*.8.'C%.rZblS0K]KD_Yc_*7V%A@&9TO&Nl_.Z%29U$T?TVsV)\,+S63*Q01V^W+;)LJd4I7k-
%44T]8+TH[-NCC1l;1bG"Ye9)iZ#F9q.GkVM#iFFp&&u`>kAO0s6Ijh,L9EXuW;*_rnE+ks`dY$7Oi2D,3.6`!IW$rj5YcCR6_^"P
%^5KFLk=XAa&32I7^O+)dF:!$Ojo%ae[A,V_0rH3-h-JB.5=PfU%eZi?_MLPS(/m>LT^qlL,_+@8-c?NkZW>rtWPZbjbgF'WNEL&0
%n'mM$b[0<#oV^Ls,VR5bMhl^$]g?]P/0\g"KM:Y5+M5?$$I?`AZg$>"0;EDbCIm%T;S9:3)Y^g4fY4m:Ij+:d\Ni^m:+_Bl_K9I%
%>@lMejP+4fI7H%,'*/*8KC=AZARo:Y<]noWS)4l-d[5EM8KY8L2Dn@X8b!YT1jI@"B:14E8HPO<:]Y<h#7VNhXJ*:"(mfBh\q)&/
%EB?Yk`J$pWG`])!OtBsk['d0Na^Bj8g,)d?S;7Gm<IS+%<d.'0H"H`3Xp5?a]cUUB^&'a0qW,o3,o"j8=3Dh+qT`3rL`jb('Pi(#
%#@mH64^6Z?br'jbKAEKs\JJF"UU.Co:6K[m^eGcNa--F!_gd#NC)R94Go()[p<jopJeUQ6RXN;OXj7aCJ7J%jU)%>ENQN.j"5.]S
%G]np6Ms,J$Fu?2a6X`0(@"_(#GI:rfCOmG0mP.1VH^iUR)'mmfpOo:houL5l0A_?;.'Ql_#(Kb?:]_1q3c'`cN-tR,oD'Gk)?6]h
%Lfk&H*?J!WUU4%.Ts2]k5C_!Yhk1;I2un&n-$[u\Rtj&kqBGMR>.Y`5_RcONq*(/di^((4ne@`EHq2,&`mJSTl"RBW7R':5h1ON3
%E47:u9Wq*f3%VX_;I>)27U;5mY'pbe9/=SeEcl'74kP_q[nt^`M^[r+oXMaVJHe[cd,Jq8g82D5\ckH^VB4sGXp_=hj^.J4S4&&6
%FO*YS`C/s4,`qQ?f4(n-WotqGQ0d1$1[1X,AtsQ6b)$l]V>k>4UuHTUTbj7;H'oN@He8"S#.ZTB</L;mGg^Ci%sF_`&i7gJgAEU`
%_]%QspOs[\;?^FVLaqHZ0ATTLHa7>+h.dYU*;g,d6#VCb7$2.$fq$mD\Z+oN/QtmHM=>Q5HqMd&2nSZ+Od$PR7r0b`M);Vjju(dS
%\'TI+dr$o)-pEF/[-)QD4lGjDGCCg3"9H>:;5aLaPBlU!)n]&=-kJlLapWB!ILQug+g^Kt`ZTRd3sQ0cPgspU,UjH>0?)U5>)BXJ
%=db-1Ep;XoNodn'3EjYlJpsaX`Up9O)VBiO=eN>f7X:t;PGU<*97?/`qSDS>0;c*C`s%fK=WO4<2"&bB-E31f*%SmJFcZtm\H[Ad
%43*7'Gk$$sk[J)0nP75qa)&18`G+mIN6g%S6E!?;K?X&,lC?fE_+^BhK:["]"NoJr%![g5diO$XE(kUZaC(nER+FR)7VRdTi7)\E
%NR<p/.uF1I%"YhMA*?i##Qhc9O/k.7*ph26??%$\/hU@e(NURH:Xfu@SE,RSr\hkILlQnRl57\dG3<o7AJJL+SV3oI>pAqeo.4CV
%Q)Yi_>H7i6:lS+,f@XHcm*6?\GW4pZ:2Jn$D:&=D5u:*)L8;6jgDS3'YS%O/pgA6)QOJlX=tXA;LskpL%>Tg^MN]GO\<tn#c?/q\
%JSnuPnS*.&'`:;#^r(Wrlao=J2uDRs^%42[lmFVVX\l)/4/B7QAuRCDPGm!bLS^&!<3-T(e(3n[G!!?bHPC`faZQ/=4q:&ca7^Jp
%U$d-]Z0il#FQPK)VlSWF\L#K&0oPS7&!T7l+J+g\:@Zr8cAor3kIOpRf""$NnH.SX_@O2]2KamGkK!d4o\gLdJhPHV,fF-["iWI0
%ZoU#D:"Ql%ZAp,^(,Z2?^:coD'ek?%#S%IZNp#Kk_+od@+PN1aJr]ar-b^Y6p@o+<mWHU58cBaDBAOh-'&&f6FZ=2qQI=dE_)Qp2
%>lu43P)m[*%qWC1=&$E1/>fh[IG%o6X>`iZKGa!TQIK$6dKo-]kWU`=Zf@U/buZ9-+/$]P+ljXD*n2.d<nh+>oum4pl:7Q)k;V&5
%mZ2p/6no#3Ye%i!><-)/SbRNtg>b9p%?dMHh,D\TI"@*fUn_h%$m"?APA8le8Jd0aD`]bA-eL#[4,r3l!(t=0AcVU3%3^8l'O&=4
%ojMPWf)c1:.lM4glJJ'+bFr?u>aH;-]CYukbp8R.!08XdOA#fQ,#_"E6dWMuLKPA9A527Om1o*PK#&49K:'P8IQ?[JXP[ddHE-Dj
%ar<`/(hM"P$Ggfc32obk+[C3=[X\BlN6a^4QVH?g"^pp\rIFhtUBSY9Xc)jp(qS8Voi/3,Y)dV=,Dg)Eei?mX1-ef@+m@"?a_u^/
%`Em;F60rF=h_'X7LcUGuLW^4QdS=14`N:JW_I7*ZQf9@U8kh[JhB/kH4gb!/`b'B0`CX[h?WRYeKW2;SP,"^MgK*3h-4hh,ABOEV
%2d4Fj%SII\DlUWRU<+3M-9%:q)L1L@\m"-nW-K6VCu4KOa`H1sRe:H!Y+Hs%lOAgCFWZ2GYO_\0mpkA'O.7%o[itN':`kG`D8cJM
%n)CH6rruEID45T6CJE>P'E^]_cQ^]'jPh"IKaNbQ).+M-QSh#5]'mdI^EB=`m8p+K)V%(5bQ:Q0/L.\G[@d[$DOiXaFsDbLdT;T]
%B8+SPeD\W!W,qt=q&^S-M(fSZEHFnkec`NNgr1`d+DY.nWkc;d?;DT==7NqZJQRrtm%YZ-l7d$aoHX(mU`[<o@t:<j#8!FcJ4gt^
%[^r8-+//gq6lCE/6QD:-/q#-bVg\8IZ_H%;6gEgrpFZS<@IE?rB!$sDL&Z3%BMS2"_m=K'48FrS>CE$plM88(8m%FonH&e3M"6!T
%nQ)KtkIHl)q_rc4JSrm*p@Cdnrqm:FG_:8-V5uMYj,-hkO1lQ]"Quug7QZN6"@$slI;.),^</^%/*[^e>^ud,?%;f3HB7%b_Zs#)
%R$P%Vd/ro/8E0+>@_Ym_8%4#&qAjU0h%_IJUH:)>]RqB23RCnp5c&A_%E_9DGWiG[7LqhMH@'QRS2Bla?^h<S(5)?N'B*OQX^@Rm
%#"91Yi2&<+OAAi?Q*ZIFMR/9YkgIIT>E42C@SO#f92*"Z(Rm">,t.6hW6B-BDhJ^$;jnjIVIHDaJ<t+tQ@d6!UYQcUd&l6bUb)m0
%B+(m(RIHQs[V-XE>^nLX0Us4,"b(l(3@*q<<Im,ke[elt$q!\g#b;k1qJA=lm5H)ec5C[pr'sD:9do2P]XRW2+(%/0rsnLP.\'4W
%7jW`*in8:+nm[lY"!HjWeIL:&obt.hh>+La%O%q?V4WWT)Q?(f4U4%bQ+@=oSr/foWRD%=hj</kn5u,j)rZeGX4&e]Ra@D:CYV>K
%IukhU&Lc#j@66DEW9;GMW(&*>&Mt#XI6Db)]qF&!<#BXL.sFn>H.H[rWRR<'5L*KZ"g0=Cc^YQs/I>:7_c]P<"(u-S#f6SpOTu/S
%?dN\WKIJ$]X8(F]oguHH,<Cq>](@7"NE#GtJkqjJVO@=J$l5`8Gu^9.[e^$h2T7f8Reh>FIgio"?dJC6]5m#WSt@1'5]"cUI=XEe
%raE"t[Vr[jM"gt`:S^WD&)e2._qGq+#_ZOs@#NcgdDc8<#em!A&IF@=C9os3Y[lQ4Ehj2[>?l&d+Ot>c``'2F#3tj5G<(m'>W*e-
%&Me[nY6G,]_HWjDcOK]&*3_N<b6YG[`o8@X7kNg0#U7KK=apbd@&dLqlW,r!$Rsl?(g,0iX42qfcS=<Z"2l\QE"`&2#R&u.IPA9l
%.6.Zu2_p&b%*6dN#1.kNqXrVVc)#,c(,be4o]Ph#GL>K/0H`,>dI5QKS;:8n,u7qJA+%4#L2`p;!l!bRFjKlq['b?*ER>T"clmq`
%fT-1+]Bi2-CjAo2)=(<)C_Th%I;S7u&:HQ8Y%l!eXo)pr<_2Ukaq\*:#4m8G>[[7^`+KtX>#mj,6;btIBPuJ>J8S2f<soS$8!efc
%<E42.T!Qr?[!4tTB=E2hM94=r:.frX)ORAtmY4CcgnJ5ChkI<;YK\3M6:\!!.S(18YV3%g-G04lcm0`bjmgtP0db2[BT+TJ[Vb%S
%\stjDZOLj9q@.d9XL5YEMK20+YPWr%ECHlI$ufcM!+k.Jhk>R&B%9PUEn5TNeXR$oRlrAHmrn`5gQOCGbJ6$-f+^Lb,Zl*1Dl@XX
%I6sEfE3E*iV=dV9It<2_(Wenj)CBHOs-HUmrR<\SZX0dF/l'g+=I[[FfSPXb9lm'E\(:O8)rP=FCj^6QWa<;Bqgg'5fM_,B5%WrK
%>p8@'B;QeY:jfV4T''hsO\+kWf-5q,QcOjAFnC(*,bA(A'=nm(6)/T>CML[u1Yqo=3hoC8"ObnRC?/80ZlEc=4WR*!&G0sk58V7s
%pHS=DK3a>2(L)^=a5tmKd"(miLq^"ggOfcUDf=22E\2B`UMe!#Cr!0Ll2le6QnJM]?AjI'5cMPtq>_[STFDcP8auTbOqE#4B_%$u
%MI2glZMD3eKa,Jf/s28N*i,r8/lug)kYgb88+hVEfnN^8eHr(<L_V'HV)3#7j1=68-X(6u%JgUZ;OgXg&8(*:dnS(TPGjeNk+'e;
%/_:P`Rk9_JGqdp^Ik`mUCUk*!'qFDU1N)T>%q:mdi/_sJJ1tV5q]ZeaUT@(\'Y35".F]?`S`onS/W.E\kaX%V.ma#O0o*k!SHkc[
%\H2YnU+AmckB"._P[*7Q2PFok(GtD9XGo^)>O1eZq@`K4BV(,N.5BZnHns'cW2:UrXdG;"7*u.=gUr%UkglSU2U.(>kM1($EX.9T
%,36GfrV@Z..*L/p5d$pf3,:Hhbr4>rl_snH#jse*<L[!1_NJGDJ0=Ss9\9kD(h/"kUsYj<+:!]o&j26('Z.o4\1gM`K[[em+hCu$
%UE0jWP/>^:/gX7H.Q1!ijmR'YLObc3L:U6@;u;iu^uKS=.HOd>]rMH-eJ#cI5cOSc!X&ZE.$UVYnt]7_0M2b,5?uFF2BIL+LH0+e
%e3L/_:2j/`9[1_0[P@IY]=+:q'%tZTFGB"ZdKg)8DijM"<.s(HLqZ3KMJV,c9GHIp"hu)?Y\YI6o29Hk?J^qQH[2j82Lh++5aQLE
%BN/r>)pPn%2a2alU7kIj/O&Z%ag#0f!npnN0B#Ofk?dP-+B0S"?CtVj$\+NFcPg-*/27]p@n7I['DD!!EWXdu1ltku"a%GTWDWJH
%7X>\`kZaQ"TmbRVNkW#G@/!D1Y"1;065peDaVUa>6FEfk(UP\Cl=-mdio%:=WCFCtm1+gkO"krH,0=9Z!aQ/(BN/jfRk;--p#f.k
%=n,'Le=6P2Ug33q$k<h*#J,/rdK[\9$Y%sae7F4;(>nU`QpPU+Jq%BhJaeGT9><Tt3*:Eo)T]>)!KN%kWEK&C2QH-M)&!\2U@@q2
%afP1DKX:kn:c>6C?]\9m%6l9E)dlMuFr38%St",)=9(RbI`dksjf+t*rFtGHbi17JCGegTc#9^_UQN'Y2fl!=@JHQdZrsX9A.V<k
%W?n_V0*jHuQ1&RAfWQNjBpq@0n2V1pJHjDl+a\*003C`qa^-TC-?:R'!kMF]d\uuDJY)0gY5H8K"+F]bY@XSYMo*L_pXPF:g9]SM
%=(kI@Ci&9=O<r<+Gqlcc7?(Tq%>`d7&u5a'_.:BMMn&jobIsQG_.ddDj5/YF!dEb/OtDK+OC-i];s8S$OHEn6p2>bjC%Vobgj*lg
%SfejPOuJu<`]W+0*UkI8+J8&TaPHTC:+<_U)osRP@SsUKC:)pU<;-D>nSi.FQ_r8ni$6r:o0No71LHO:$kDa=?'-DhEE$M"+R;/!
%@)#E7'LPIT;)\gji2?@o2MR%-6ega5m4^AYCO$R5eZu#So8iUEfepVUdV<?Q0?Pc&i,aFqO5B-3CV/$70*le5GE0QI;Fbd-D-Fe"
%%4V.[^d&_VL^U]j!Z(-4knUV&$!bWbJ?IJ1'NMoWcsOPeGq";8g)YS=\=l/id/`-3?):H/l4eP1bb!$3E.Ed+=jn"n9Q9kb$Od0Q
%6[JQS"d?:/LSYA4bI`:%X^PpCrRO<MF)[4Qh?`'KkhqJYq\jK[%CEE@;?L/LmW=##f<sa:r-"eDRBl-s(NX+FmeH/t2kZe/oi(e`
%GVG,!\7+e,?-8`%XPbckRrN5I4+_?,4:>RAZ+WDC;,OgB+Gm&*iGgV1?D0g(ej$"%.$WoBS\GVDUes<+4c9`eS#!`U%74Hr-^uqI
%@;A3]6Ed>'2m#LV5+CeZIl#Js-#;ecN?3n=RIra/Gf30gM)W$*CjA=(mU/eB(XQF%dhF6(c5l[20bA.<5h2%T*\/Su*i:R2/F`eQ
%@ae:Urn^+_EfnG^i8@ceC;in"ZLbk#5/7eVVmVn_qh!`m4n"ho!lT9__M*ms?@t"LGn_,-IYt3;L*k.MEN<^AYV8#0CU"[4W]/1^
%-@E8okL496WuelPQ;DlR_F-pX&f>]raCF,C5*2q_U3nM.Hio#24>cV`)'n_1_IJfF^e^u]F79[@Q5Hqd1Or,$'6Ak^RAf\Y>sJ?)
%)*CH,K`:0GW43OeM3,0$itPFO,dl:GQ!ASI+UR\T,6h4#*);U+!0KkLWu;32\M6B^'LOSo%]NnJ6*tF('\J."/m]lr75#om@lg0$
%.$+_PnlF-<$"BF+%\a]9LLoRm%&m4hVh#PO]VshXpN2D%2<r`5:hCcp.ef8#Y:K%7Z4:4e$POk)G,>_>qskD^?j>o$Sj1.OOF\=p
%2f32Y[>S1CFcukX`6ub\[poIk[XIQi19nLV1(sU<3*mj&#[9Ime=f0^Tl>sS0;e^U4sEj><Kh+oW-r>j2GC*GU-jU-&sRZ.L-H!)
%D-u7n]u<\^Ye$IA4b<4SOU.H\[GR?1ZKPB6epHpgU?BIFc-h*W!'l&E0[<jWp.o4.4);YC?^SphJK^$U_<W(gB)rCKKGaXbjI9ho
%?6"7=!j:%Gk51&&A3@=;,n$i5,8Bn[PQS6EAu7XESm65Rh6Zrs=j@d;,IYdtR?Ks"ES`9rW$LIh_V%Bn<#u:oWN/AI:+V<s`7TZl
%Ns6ilR:TrgIjNIeK0"N`Rt,Bgc.ba54C\u4hTWul$&"Z$?OtdT9J.:V$(SrTGN<0:G>.1ir#6Y'8.qp:UZqbkp.Y"m<JmMAbY&k1
%%?j$bE_#JQCZ.g#MaKVr#pHXX77p5us&AiSTA-LtKU3I#\XY+!0bG)0Z[)n/#3Xc_CY%f7?G5H&SM4c75(J(-R0$Mt8Tc0o'o.$C
%ZULJ)QQYEn<.X[+pqDkoK\XOM>o-bj2DUD;%>$&V5tlU#KQ$!Mir$Kj64&8^?O'/k32;DgVH!k9@2pK$$tX=g!1\=Qc$DN0p"t!s
%:0RC,em;sSI8S25**WFnPYbVD?#0dJ#h]F@diE,2\GES@_Kg?Kbq([_luSTu)(,]F7MTEs9hj\Hj99YUVQ$No]pW%Hs4]31Oc2co
%p0DXRro0O@S5P6ikdqLYTj,9iIER3<!k1W_<E/hmrihaTMqoTa$JX;n#euh<XBsDfA2F<Q-`"YP;KTlW`5R++'JoXCWE9uF?l$X(
%M(L$X.BsN@Ur#uhRdWNX`io*T,$*++_F:_FY1k'O&0su/#Z)*PFoOi7.LI$*TIngIa=e")R_9PHZk3df96a)HDl;a#X4Z$9PRFiQ
%2pnOu&!imp9Gpno8MQ!Q0.G"Get!_h&%rKE5@aQI6/kN8*?lmH%b4NAQ:lE&8.N_D8ot*Nq*ifd8#k;2-!'A7#SY&uL5FV0l%2SJ
%!qjMh#*Q,p)C,.UmhJn(A\=n1IS+7=?jp8KORK7sR9d"c7KhXQ9eaXfFs)DZNWODip0d1/S)t_NF-^4_Ug$@Nl7u"[=^%j<k:Y/T
%D(;INLt\#!&,3QrB*c&]V!:sZ4G.EpgPmnOmj17s&)24<)rNW,8psncEa/lZ?fcE`1Vg<CNccY&OPAS-WBtP_\-Mg9O\OeSp[@hN
%#)n6N<U+V;<Mane4b;mU@]=\A9DAj[QJAqYion!`54q+IF@"[-'S'I'2cBgWGK!3`bbr_`C/e5]E=uFJDGF620XK66^LlW9,;uE=
%e7*<7+=[*2em]DBmL)m"gV[T\/]PJT+,_[be:PFmCVR.ATf%J5!t;chZ1X'^SSRufb7.H"MgZ7W.VUA&SF62i1O:Si!Co8k^R#T)
%R=]Co38]@G&lLi:W[8Au-Ff!hGZrH/G-O*g&l!3Fo-e8hi+u_#,FnCDc$MT1q7bM\AV!Y&2iN^8?:+0R\2;o1pDdRH9&-U*l1t7%
%/eIa!?(S>0$FUT61+q-CdfW@g9;qsjPk#"pQHOoRiEW@H4NpO`;XO^J$=:re(&,`IXd3<d?M3[a8OuFX*Z2Yt'BL1@hUlGbX2JMs
%3gIJ$&-J./'GM3/\o0F?.j/Ob!GWcE[@1bVl!QD;m&7KBVf#_?DR'b50TO8@RfqF^>$)A/M_$JGADH4)-k7AQ>k'03]U-c\IL@b.
%l7bb0=o+N-mX%KZ7G^Ad*i(rpg*#sVGG/+\JT/?OY7'c)Z"A'>!OOHEd*0n/1kEiML;r$:!:9phL3n>=<*C_s1tt5kkd\qC&Wk3q
%\T!K-WeM.3_$Lj1O\9qTnY-2)+I>uS=@:K<>#GQ=>$H.2WS806o#(q.S5",bX1X=Y'Pbb%djis3,1%(Z>NV2s7JqO(b&t=h)2XTZ
%>_?Z\`J4+SG@$q['<6W8]A'fs(O<_]6O]cBA)I,!jS7'57gm(1>EkK]DLM6*L>4"Z%k'(6N%-Bf@L%LGFU+W.lApO:)nIqciICj!
%]6t1T?,Y_Z=@Cf[09&'-6atbVO2[k;g52(taf%IKMNT:Qjp7NM[@ls5^elHTrUuX$hk;9G)co=EWNd?5;1(O$mMF`CZ"#P6o*[ou
%H;(Y\0D8-7<UZ?]o.O7r'dO"pW*V@=W=b%*I&X)FMh`L/])<Y;Bqf3:BEKFp(5p/:Roai6Z,;68mVVmNh)]#8Ub[A]8Xu[E477#/
%Res@=9C,:dK+r0*L\+N-WFgis4P814:ej@umIG+HS3ok4W5e*GeJ1(r6+Sr96u3`$EnkN]i+\rBa\]q6f;'0Q5qZ1/5]V*pp4-,A
%Fu(O)R[V2d-4)i[g-tYK&']McG/@Tke%KuLi_lLp.@^%V&Z-0E9N6hRAnd55(aN`RnUhs&F:llU-q>Ir$,U8Y3@`E%66jeuIP:`N
%X0`?,9qQLc1;!XA',FLbTQdkL#I5sWN5i3rrr<ZF-D6<?#E\R>!KjGOV;IFEm6m/nOK]"N.8#%6oJ5#Z:l,maMtS;jnZWUZ3Zo]V
%QjaE,Y8p0k"%]/2_,Z/eAeT=+7I,]oLt9"J9T9CMLQkM=LFbZ*O;66"&uB%d+K9A]Wo2e^Uh$n">X=[I9a<#p6>f?>;`m0\C+S.u
%3[r)QaY"aj#'=F6#8Qqd&VKP:;XoQa@rDuh\-nsP(!f"bBb%[(b*%YUBRYLJD"_UrbU4_e6*ic.`Q[1KN""))bbkgj0<,m"J6`:7
%94G=<jcebG'j?E^Dh]%PCsGkk*V$R+cX"?#fP"Q45QrXrD5(U^XnQ_a8j\o^!7=/!W"mKD@^mn[0I&2\+!4<`gdk=a)&5"pdLC1;
%haZ:oo@W](Xa1,+@Ut"(eq]-$HI),hI=1;"GN`.^8ESN/*[N,I*`7,*%mB4IA_5iVo+U"'(^*HaQa4-\`>Nrj<(0L)28kdb_k+o5
%6j5k)UuDGOg[Mj+\)aBH:a+ls\D[farT"IJ>QG]MKV(oZO(1@6LDV&N93BDOFQKgc.0,;mRmDDkd+l/;9jqpM@8[@C=j#6dFD/*&
%ap@f*\$gUB#j9E("7L;9j4VWg]-(,e9-Q^-QgP)_h\;X;2&._('\q`LdOMRg1U`8RKd'%MYWeOpXt)WGBtK^h<(i3#2?N*RFBsq[
%eEpb5/:?]8aPXigpCa*?M\1nY1bV(<KB0r0@.1@#.7qbXq?2tLCl2eALsgEsFGYE?L);Kgh:_(SML3X8I_59l&[oe4P/u.o3j@ND
%[^qtk[[#'R["L.\YqWta0NBLZZ6_oq0aWXT=Nt8?+jB@cXX(/D,:eNG=H7"58eBh>cf)>E,,TarWC_Dg5ePRg=Yh4DCTG0^1]F.g
%]E/$H]-O!oP/"^%>sL<gU6hk!]R`'>bpo1hRtW2n/nd0ThP("EP801$:&/h1I#E[\Wl74_T9R/3&]d$i,De9XKAc$C2t^sL1FVnC
%6GH"I0etq4Ip0q!cY47'mau]ro\8:ZCJ5,%`Ub4u>ZLRg.F>jhS'2G(B3.lS>YCNlg)BmuJCKiL0Yf+Il;+c9g?J;*OWWJS@h(qL
%3+E>am+&3\In/1LeN1R(OpF%mUpqC7s)Y?YGS%tLh_AHT9,@3*6N\7#a:,N,QAM]-Lcjl2Gic5q(2l^[l\sqdiJO!4ga!/_O>EaV
%^G:-k.II][Hu^uGiVoV=q&Tio"Y9,VWLoZ)e5(E%`0'K,Be@]8X;?s?[3blq!OuR@O<Q&YrqHq3>/N9UN?p)c?OA[_dYQ;YiHu2(
%Mja1cg'*qA?GKFMBl169f%/G_%igU\_1dJbE(mb=nfD=;(D(B33C^\edLCVY<WufS$PFk&%N4DC%:;>[oWq@=?>,O_n+4(I5/h5P
%6C1S'BN4G0/fJ_Flg(MP*q';YQKc\faK:?HP^*;dLk2dq,bEfaS:/'GaU%_C-U\a?E0VDCJVulhN)^3sfVW+&/#5e0'1<PqYfMdr
%[Vp!P`"&s(>.qkl@C(e5P^t-tJoS.GN<F:mC[koqqS^5uL1u<W//E$;etT_fgu][aDK]2rNnEuV:R5QN3@N]<!qRa&9(73nJ<j=<
%]+@QgTnr+YP+UpV.*<"@eYJ?SOg3'Z%8TI[DURnmN\NV*)f_$Yd\jo69pt'ulptksAHH++1+;8iUe:3,)TW[Dfh88e^jUll,0mlF
%S5CVDS=-U*XF>13@--dHI_K3JJV^[LV"4EfH)oald7t546Hlu:QEab<a3gQYfH=B'QXs+9XQ[,NSeTF-g^[;Ua-JBI9D)kd0$-fl
%KTS5Ve=TZ$l!#Zka%blQrG43$D_P90;\JSRe0PR.q&SF9LpQ.,BB\X=G25D[M-t@+2fl^93Jo@n[&42qZ_Ou+]LA8og]7bH#3;Gq
%"U2$=D\:f^7B-0U1,juB]q.FCiu;qgWZaf)[TIe2^7IU_6S<]P];0]!s1G;Y!$q6)Hpm>dl?c3X/['Ji9cHcRWO::NEQVN^nKkBm
%O@#^k=b<:_4^15pPT>C/1\Tac_<*,Zfo8oTqAe0Y\,h@H@5%VRjQLN!HoR%SIqnVMB,m-IanFiK(OdgP44ln4@iN[t&*/;X70:0_
%,T0,JFgI/G)8?d]K51UHnpn7,+_$g0)TPfc+M8o8&2g1gbIZ7a(ssrH,=nmpPJC.9hga^%cR@n%oY7rk6t@'O3.WcolG`P8AJYWQ
%IdNh?$BS2q5SCa!kM-mMX%dp9kD\*9k&l-='FdC%4+bi+7QN&&Y!3[q(7@Q;[:gqj=`pLB(`DeOl4X30O^6l-b_>FQB`]*LlX=pD
%g8!ka_%)qS.nd>9`<85-,lHqR$dE<P!HP!#ak"[MP^*RSKuM/Id+u%244bGJQ&&g3a*:=-i]Lh2Q?`$"3r*<,m!Rp8B2gjIH*r\#
%C+YH<9/,7Lj%4QYKqt()a&X?gZf%>#!_c\6B$NdM*&Bp0;61C"9(HjKduP\['mq7u"d2QY.p*<l:'(dp2P"umfr$VKr:FsoTnP<b
%&.bP9kpSphD6s/XnXgZ3T::L]288l,?s2:8/\$#_!J<f'fFT1^:;_[TcBTK5oQlnYkm55^GC+]>`]R?@cB7a"p8/t;46S<?c/"p6
%1eWOcgk<&"eB8>UAb\Gk!aZeCqN<P<nEiSJTbYlXe,quL3J.jAkR\5)*.rHbD9)jt*<FW\n^6s*%IoiK;in).<Kp6i`)Z=q"\(B)
%p+2`=1S"7':?UKPcQgDD"rF;M`*RBt2**8EGua_0Gqb@abP>:./;F65r3hce]]e<\gtiD4/f`Inh[($.$3QpH:?$Ji'UbmAl5i1=
%O-<tCc31k(ZHnjh3"YS&MuCPoA1n74W4S0gWlR4';Xa""4Z1rKLcfj_hZ*+jjg6P>,eV+8IYc3r=O`b:JUOiH`Tg>!7H25@r548>
%*0k=:C0%Zo6o>^6IcpYe`]i60p=DDV@O9mL>7_H?h*e.?dOZVDH)s'r7DS!ehlV&Xl*l!A?Vdg'roAUV`Y=$>%*NZ`1&^<6qXe>U
%kuDMPL;ft2B[\#"A@lPP9-DH.!MX)'K#>7sBq\5?<4_.i)gs4[f2\Ahpecso2L1.<SnhI@>-UF@`)@^"MPq),]pmM"?7L[keJ%Tj
%ZjYb;#i'i49sfj%PWZlt$I:+5q+Tf+B+cc5LB6YNX;)0M+=l$EQ[YrJf$Y@?K[F26E`uVNk1K9baGX?OCl@ocNCHS[=e.'A]L0VZ
%O\ctQ/ldZ03<g(oGgT>_*0lV/CRsX2T,iN&CIQKfK%L1TbmYMu'^cVMM^AG`I]?4#8J7bR<m+h"Z5Dt;E82hCkRYB!K!ZN*&W^rG
%NE<Jh)+a,<C=B_1g9WcD)%GhS$"q/EFkS01\Yb_9d1m'[8'VoO;au$Uic"1DOuSJXL>[nJV6`P$R.+>t\ZTB-^`>7;FH"iH5dG_i
%NWg^,).02k2FSo,+.(_o)&TBF0&G;:A&H,qFHI_PUIGAh$Nb1I;1s6:%,)eqq=,Id:)ZqP,"iiN5*J@)m\maOgNth<d>8?j&"`Ue
%#08hXG1Krk&S#'P1+8Il7h-tFOCTR#TYAL,KQ!W&*aZLGo4QPn?A\oA+.K4<==0C$#+*U&q1LqcQTd;&?oUZ-ZB9i=["e/>]U-CB
%p$)GX;3G)0IYia']SB9pEl1GSaHYgS7D?Vjm6`F@/+^H,8.r7V%g<K(?@L$[6qmY9=,]5#*r1-<8j'KEj988eFn*9j;QUcO><La$
%]2jM;-VRe(U!q1#!Skcmj<QOqYW2*BMmd-::jQgLi$7PlpW#tm6_[9U?(+?"3"DD=(4^GE"m"%H%ScXLC@L&Cb9C#R5:9;r@)Cq!
%d3FcF)F*^Ab(C@Mbg$aKNZl&),pgNe!D[&gN>EOF2.lsWBI^hd;$KO<@jEsE\bJA7WcLi,6c9nW2dN[@nng'<U9/u=,DdKsc9l9"
%/m.o]@sA&QcnZ?8FQ`nlS:-QCpf)sdD'b5CQCKge>][n*<@*$;3PU6c>Bm:g.jcu%[T_[X&V7%f6FN(n1[^bEWLDLOpk5*,64@,&
%DISMNDBnNjZfY9n.dhbbBRk73nd6":`]Hm'>05cjqOu#ZW?ZL;YtdjR8`9hf@[[(D!>uf_$s9@<%:*80'aBn2#=KH"#H0'[GP.pG
%&G<dDeRl;?kBDB&"-+65ESGdceE+)^s,POS,(VNC!O$M<!qtRCT\Le]Bi_o-6pJ1cfG&3b+I36c.89=sL-<Mn?D79IO]>^orcB/Z
%d_b3MIHp[-Tq.2hc!JXs&#f;/bh9(2Dbq^dJ>RVLGkN*N]FV.C4L"HHNT1hu'Ao,\H0L8:7MWK*k?a"',5*V0d*[:nq`TX[iiJ/f
%9JjG`-`%g+kA[E=c6[0^"q@mM4J.KC%^kDp4s+;ZYBCFum[Z^pC$o4e6!\;-2DmrYDc<o(o"`NZ(Op,bl`ghX_0W:9&FP',%3U%D
%IJ&1X2]85\>4kte8m_7OlPqCV7j]a`C]rRUP"!R?b*3TX8bVRXddYCgSJDlBY>XcLqRC>[!-R=>GLI..)nE88%;2c;=XnEi?)WYt
%D9D<aI6D_gr?qb$.4K"o,U,`DNsg>&`s(28_L,U;p]Q0!70/Kh<c]@0I\P&9]KV)OkQ'VgH5re<BX()T7jYrLYrK4'U;n41.r\.3
%?7^JVp7\EiEDN@J%ra5X*l[6@\$?MZ4%Aouetb_r6a'g'+(3Z)7qpd2Iuh"YU>5--I01(-c:EBg_^]s7Y2\$]qiga]I0]c1%:<U8
%G/;m"7A$eA-M3e@Dm8u1b<sZ;:=GP=T!7c^bb)l2MdDc#nQ%Kl*7h*ZjZJ.op$lG[)sj\GS9TAZ(bgAd.fBtOc]9HChgt52W)"-V
%:Lu\@or5%-!5;MW8Vm;X!m;-7^6J9rVP.LK[s>V,5^ZC4,B%:W$#j?r)1$s@_!$T#"T<+S:@0$h=GuM`'"-;0Q^Bo$o%Z`P^;9g<
%<lq-Pjh9g<WTK87IssN5r!n+X!11(l;$#H-KHF`hoa(EWa-4d:_"S3.V[>\`_(h@aX@KKZQ1Ys/[gKp%=k<:Q!P$$bANb\Fq=/"e
%47Kobjf&;=<p!%P:KVllkq@SU`?Qi'U]7#LFt;e`dr19PHh2TtV3_(t;gqj[DLma_N_S2acqG-X;h0t"iYC0Z8+cknoFua0]1u2o
%Z"BH`[H;b/S#$;Zdi9LRos#F<O^VuKZb2,`V5C)fpUti:K?AYrncF5l"Unh-b*KS*.g@G5gR>+TZ:-D!<d*P$PO>7AHk$@\D:]>N
%]7`Sh"$E_/HmhOZiYdLF'%l>61hP=c/UNU/@a!92Ni-KW@Hh*Vf2L3V*[XWbVmX6?3P`*Rj)BkborKp6h:D37WZ4gZ1;hPR(9aX9
%*If;:/3!cT]8D8Mq\/iZ!Jq+(DrBujbKh9Hq=?gUnS8@?Ze#\Y?m"7*bKh9HO.Q0J`E:`J[_31,'qm=o5(p6DpFIg@7+`SQJMZn_
%j%tmQCt>q_7J!L9&?th:M+9kZYg$$kH-G3R'Yl9g1:h,+$soqTaK:0"Ve5h.nMV+,1l5oI05[!7CP'SGM"n"A?Z8)jklV2_-SAb[
%$"6f=GRMN$ZV4T7<T<[JZ26!Br:f+KkPsX.rp`ean4u:KoM>MXcbKA;s7ktG!;g-n?^D"Ys6Tsgj8[O+o7-W"s)S&*J,K;,5CT-<
%hu@&uqo@UohgbR[5Q/@3s5W#8]79b1hu3<,s7X'Sro\e,e*m;.qu;!Al*l0?j7!$@:]L"+huEDRs3JIXImELunUnUVqu?;<rpP@2
%n,@ea2X,q~>
%AI9_PrivateDataEnd
